<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>For you, jzy</title>
    <link href="/2024/12/03/For-you-jzy/"/>
    <url>/2024/12/03/For-you-jzy/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="fa4301289cec0133b02d115b1fd4d955160094f205904e9cbfad8bb823e327d4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码, 你的生日哦.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>作业</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BGV全同态加密</title>
    <link href="/2024/05/11/BGV%E5%85%A8%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86/"/>
    <url>/2024/05/11/BGV%E5%85%A8%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="BGV全同态加密"><a href="#BGV全同态加密" class="headerlink" title="BGV全同态加密"></a>BGV<strong>全同态加密</strong></h1><h2 id="方案描述"><a href="#方案描述" class="headerlink" title="方案描述"></a>方案描述</h2><ul><li><p><strong>KeyGen</strong>($\lambda$)：根据预设的加密方案的安全性，选择一个安全参数$\lambda$，安全参数的选择将影响密文模数$q$和密文多项式的最高次数$N$。在本文中，选择的参数满足128比特安全性。随机采样$s \leftarrow \mathcal{R}_2$，$a \leftarrow \mathcal{U}_{q_L}$和$e \leftarrow \mathcal{X}$。之后，计算私钥$sk = s$和公钥$pk = (pk_1,pk_2) = ([-a \cdot s+te]_{q_L} , a)$。</p></li><li><p><strong>KeySwitchGen</strong>($sk$)：模交换能够让同态乘法的次数增加，而模交换需要依赖模交换密钥，首先随机采样多项式$a \leftarrow \mathcal{U}_{q_L}$和$e \leftarrow \mathcal{X}$。然后输出$ks = (ks_1, ks_2) \equiv ([-a \cdot s + te + sk \cdot sk]_{q_L} , a)$作为模交换密钥。</p></li><li><p><strong>Enc</strong>($m,pk$)：给定输入消息$m \in \mathcal{P}$，首先选择三个随机多项式：$u \leftarrow \mathcal{R}_2$，$e_1 \leftarrow \mathcal{X}$和$e_2 \leftarrow \mathcal{X}$。然后加密器通过计算生成密文$c$：$c=(c_1,c_2)\equiv([pk_1 \cdot u+te_1+m]_{q_L},[pk_2 \cdot u+te_2]_{q_L}) \in \mathcal{C}$。</p></li><li><p><strong>Dec</strong>($c,sk$)：解密一个密文$c$，需要在对应的模数链层次$l$执行以下步骤：$\mathrm{i)}$ 计算$m’ = [c_1 + c_2 \cdot sk]_{q_l}$，以及$\mathrm{ii)}$ 输出解密后的明文$m = m’ \pmod{t}$。</p></li></ul><h2 id="计算模拟"><a href="#计算模拟" class="headerlink" title="计算模拟"></a>计算模拟</h2><p>给出模拟代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">poly_mod_add</span>(<span class="hljs-params">poly1, poly2, mod</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;多项式模环加法&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 确保 poly1 是较长的那个多项式</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(poly2) &gt; <span class="hljs-built_in">len</span>(poly1):<br>        poly1, poly2 = poly2, poly1<br>    <span class="hljs-comment"># 将较短的多项式补零</span><br>    poly2 += [<span class="hljs-number">0</span>] * (<span class="hljs-built_in">len</span>(poly1) - <span class="hljs-built_in">len</span>(poly2))<br>    <span class="hljs-comment"># 对应系数相加并取模</span><br>    result = [(a + b) % mod <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(poly1, poly2)]<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">poly_mod_mult</span>(<span class="hljs-params">poly1, poly2, mod, N</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;多项式模环乘法&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 初始化结果多项式</span><br>    result = [<span class="hljs-number">0</span>] * (<span class="hljs-built_in">len</span>(poly1) + <span class="hljs-built_in">len</span>(poly2) - <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 对每个系数进行乘法和加法</span><br>    <span class="hljs-keyword">for</span> i, a <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(poly1):<br>        <span class="hljs-keyword">for</span> j, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(poly2):<br>            result[i + j] += a * b<br>            result[i + j] %= mod<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>        <span class="hljs-keyword">try</span>:<br>            result[i] = (result[i] - result[i+N]) % mod<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> result[<span class="hljs-number">0</span>:N]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">poly_mult_number</span>(<span class="hljs-params">poly, num,mod</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(poly)):<br>        poly[i] = (poly[i] * num) %mod<br>    <span class="hljs-keyword">return</span> poly<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Gen_pk</span>(<span class="hljs-params">a,s,t,e,mod,N</span>):<br>    pk1 = poly_mod_mult(a,s,mod,N)<br>    pk1 = poly_mult_number(pk1,-<span class="hljs-number">1</span>,mod)<br>    pk1 = poly_mod_add(pk1,poly_mult_number(e,t,mod),mod)<br>    pk2 = a<br>    <span class="hljs-keyword">return</span> [pk1,pk2]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Enc</span>(<span class="hljs-params">pk,m,u,mod,N</span>):<br>    pk1 = pk[<span class="hljs-number">0</span>]<br>    pk2 = pk[<span class="hljs-number">1</span>]<br>    c1 = poly_mod_mult(pk1,u,mod,N)<br>    c1 = poly_mod_add(c1,m,mod)<br>    c1 = poly_mod_add(c1,poly_mult_number(e1,t,mod),mod)<br><br>    c2 = poly_mod_mult(pk2,u,mod,N)<br>    c2 = poly_mod_add(c2,poly_mult_number(e2,t,mod),mod)<br>    <span class="hljs-keyword">return</span> [c1,c2]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec</span>(<span class="hljs-params">c,sk,mod,N,t</span>):<br>    temp = poly_mod_mult(c[<span class="hljs-number">1</span>],sk,mod,N)<br>    temp = poly_mod_add(c[<span class="hljs-number">0</span>],temp,mod)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(temp)):<br>        temp[i] = temp[i] % t<br>    <span class="hljs-keyword">return</span> temp<br><span class="hljs-comment"># 示例使用</span><br>m = [-<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]  <span class="hljs-comment"># 表示 2+x</span><br>a = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>]     <span class="hljs-comment"># 表示 1+x</span><br>s = [<span class="hljs-number">1</span>]<br>e = [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>t = <span class="hljs-number">5</span><br>u = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>e1 = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br>e2 = [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br>mod = <span class="hljs-number">133</span>            <span class="hljs-comment"># 模数</span><br>N = <span class="hljs-number">2</span><br><br><span class="hljs-comment"># # 计算多项式模环加法</span><br><span class="hljs-comment"># add_result = poly_mod_add(poly1, poly2, mod)</span><br><span class="hljs-comment"># print(&quot;多项式加法结果:&quot;, add_result)</span><br><span class="hljs-comment"># 计算多项式模环乘法</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原始明文:&quot;</span>,m)<br>pk = Gen_pk(a,s,t,e,mod,N)<br>sk = s<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;公钥pk1:&quot;</span>, pk[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;公钥pk2:&quot;</span>, pk[<span class="hljs-number">1</span>])<br>c = Enc(pk,m,u,mod,N)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密文c1:&quot;</span>, c[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密文c2:&quot;</span>, c[<span class="hljs-number">1</span>])<br>result = dec(c,sk,mod,N,t)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后的多项式&quot;</span>,result)<br></code></pre></td></tr></table></figure><h3 id="加密模拟"><a href="#加密模拟" class="headerlink" title="加密模拟"></a>加密模拟</h3>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BGV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/17/%E5%B8%B8%E7%94%A8python%E5%87%BD%E6%95%B0/"/>
    <url>/2023/05/17/%E5%B8%B8%E7%94%A8python%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="常用python函数"><a href="#常用python函数" class="headerlink" title="常用python函数"></a>常用python函数</h1><h2 id="sympy"><a href="#sympy" class="headerlink" title="sympy"></a>sympy</h2><ul><li>sympy.mod_inverse(a,p)：模p下的逆元</li><li>sympy.totient(37)：输出某个数的Euler函数</li><li>sympy.gcd_list([4,6])：求最大公因数</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/28/%E8%8D%89%E7%A8%BF/"/>
    <url>/2023/03/28/%E8%8D%89%E7%A8%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="同态加密算法BGV的优化"><a href="#同态加密算法BGV的优化" class="headerlink" title="同态加密算法BGV的优化"></a>同态加密算法BGV的优化</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="单位根与分圆多项式"><a href="#单位根与分圆多项式" class="headerlink" title="单位根与分圆多项式"></a>单位根与分圆多项式</h3><ul><li><p>有一个域$F$,元素$\omega \in F$如果满足$\omega^m \equiv 1$,那么w是m次单位根，如果找不到一个比$m$更小的数$m’$，使得$\omega^{m’} \equiv 1$是F中最小次数的根，那么$\omega$称为m次单位原根。</p></li><li><p>如果$\omega$是m次原单位根，那么有如下两条性质</p><ul><li>性质1：对于唯一的一个$j \in \mathbb{Z}_m$每一个m次单位根都能被写为$\omega^j$，这是因为$\omega^{jm} \equiv 1$，所以也是m次单位根。</li><li>性质2：对于唯一的一个$j \in \mathbb{Z}^*_m$，每一个m次单位原根都能被写为$\omega^j$。这是因为$\omega^j$是m次单位根，其次找不到比m还小的值使得$\omega^{jm} \equiv 1$成立（假设d|m，那么$\omega^{d} \neq 1$从而$\omega^{jd} \neq 1$，因为j和d互素，jd必不可能是m的倍数）。</li></ul></li><li><p>假设$\omega = e^{2\pi i/m}$是复数域的m次根，定义分圆多项式：</p><script type="math/tex; mode=display">\Phi_m(X):=\prod\limits_{j\in\mathbb{Z}_m^*}(X-\omega^j)\in\mathbb{C}[X].</script><p>有如下性质:</p><ul><li>分圆多项式有多项式次数$\phi(m)$，j的个数是与m互素的个数</li><li>$\Phi_m(X)\in\mathbb{Z}[X]$</li><li>分圆多项式在有理数域上不可约</li><li>$X^m-1=\prod\limits_{d|m}\Phi_d(X)$以及他的变式$\Phi_m(X)=\dfrac{X^m-1}{\prod\limits_{d\mid m}\Phi_d(X)}$。显然，如果m是个素数p，那么$\Phi_{p}(x)=\frac{x^{p}-1}{x-1}=\sum^{p-1}_{i=0}{x^i}$</li></ul></li></ul><h3 id="规范嵌入和无穷范数"><a href="#规范嵌入和无穷范数" class="headerlink" title="规范嵌入和无穷范数"></a>规范嵌入和无穷范数</h3><p><strong>基本思想</strong>：定义$\mathcal{A}:=\mathbb{Z}[X]/(\Phi_m(X))$，$\omega$是一个m次单位原根，有一个多项式$a=[f(X)\text{mod}\Phi_m(X)]\in\mathcal{A}$，我们可以清晰的定义$\boldsymbol{a}(\omega^j):=f(\omega^j)$，而不用在乎$f(X)$的具体取值(因为模了一个分圆多项式)。</p><ul><li>规范嵌入：多项式$a\in\mathcal{A}$的规范嵌入是一个向量</li></ul><script type="math/tex; mode=display">\operatorname{cannon}(\boldsymbol a):=\Big(\boldsymbol a(\omega^j)\Big)_{j\in\mathbb Z_m^*}.</script><ul><li>无穷范数：使用常见的无穷范数作为多项式$a \in \mathcal{A}$的大小（size），取规范嵌入后向量元素的最大值即可</li></ul><script type="math/tex; mode=display">\quad\|\boldsymbol a\|:=\|\mathrm{cannon}(\boldsymbol a)\|_\infty = \max\{|\boldsymbol a(\omega^j)|:j\in\mathbb Z^*_m\},</script><h3 id="编码——拉格朗日插值"><a href="#编码——拉格朗日插值" class="headerlink" title="编码——拉格朗日插值"></a>编码——拉格朗日插值</h3><blockquote><p><strong>目前的困境：</strong>BGV的明文为一个$N-1$次多项式m(x)，我们如何把$N$个数值$(a_0,a_1,\dots,a_{N-1})$编码进一个明文多项式$m_1(x)$，另外N个数值$(b_0,b_1,\dots,b_{N-1})$编码进多项式$m_2(x)$。使得当明文多项式做多项式乘法后$m(x) = m_1(x)<em>m_2(x)$，解码$m(x)$得到的是对应数值的点乘形式$(a_0</em>b_0,a_1<em>b_1,\dots,a_{N-1}</em>b_{N-1})$</p></blockquote><p><strong>先介绍一下拉格朗日插值：</strong></p><p>假设我们有一些已知点 $(x_i, y_i)$，我们想要找到一个函数 $f(x)$，它在这些点上与 $y_i$ 相等，同时在这些点之间光滑连续。拉格朗日插值的想法是使用一个多项式来近似这个函数，多项式的系数可以通过在这些点上求解一系列的线性方程来获得。</p><p>下面是一个使用拉格朗日插值计算多项式的示例。假设我们有三个点 $(0, 1)$，$(1, 2)$ 和 $(2, 3)$。我们可以使用一个二次多项式来近似这些点，形式为 $f(x) = a + bx + cx^2$。我们可以通过求解以下三个方程来确定多项式的系数：</p><script type="math/tex; mode=display">\begin{matrix}f(0)=a+0b+0c=1\\ f(1)=a+1b+1c=2\\ f(2)=a+2b+4c=3\end{matrix}</script><p>通过求解这些方程，我们可以得到多项式的系数 $a = 1$，$b = 1$ 和 $c = -\frac{1}{2}$。因此，我们的多项式为 $f(x) = 1 + x - \frac{1}{2}x^2$。</p><p>现在，我们可以将上述思想扩展到任意数量的点。具体来说，我们要使用一个 $n-1$ 次多项式来拟合 $n$ 个已知点。设 $(x_i, y_i)$ 是这些已知点中的第 $i$ 个点，我们的多项式可以写成以下形式：</p><script type="math/tex; mode=display">f(x)=\sum_{i=1}^ny_iL_i(x)\quad\text{}</script><p>其中 $L_i(x)$ 是拉格朗日基函数，定义为：</p><script type="math/tex; mode=display">L_i(x)=\prod_{j=1,j\neq i}^n\frac{x-x_j}{x_i-x_j}</script><p>这个基函数的作用是将多项式 $f(x)$ 在 $x_i$ 处变为 $y_i$，同时在其他点处为零。因此，我们可以将多项式表示为所有基函数的线性组合。</p><p><strong>解决方案：</strong></p><p>假设多项式是在模$q$意义下进行的，我们预计算出一个$N$次原根$\omega$满足$\omega^N \equiv 1 \mod{q}$，我们选取N个点</p><script type="math/tex; mode=display">(\omega^0,a_0),(\omega^1,a_1),\dots,(\omega^{N-1},a_{N-1})</script><p>使用拉格朗日插值确定一个多项式$m_1(x)$，同理对另外N个点</p><script type="math/tex; mode=display">(\omega^0,b_0),(\omega^1,b_1),\dots,(\omega^{N-1},b_{N-1})</script><p>确定另一个多项式$m_2(x)$，这样多项式乘法$m(x) = m_1(x)<em>m_2(x)$后，代入N个横坐标值$(\omega^0,\dots,\omega^{N-1})$之后得到的纵坐标即为对应位数的点乘$(a_0</em>b_0,a_1<em>b_1,\dots,a_{N-1}</em>b_{N-1})$</p><p><strong>注意：</strong></p><ul><li>为什么要选取$N$次原根$\omega$ ?因为有良好的性质，即$(\omega^0,\dots,\omega^{N-1})$在模q意义下每个数都各不相同（如果相同那么$\omega$不是$N$次原根）</li><li>如何找$N$次原根$\omega$ ?首先找到一个模q的原根g，然后使用快速幂运算去计算$g^{(q-1)/N}$即可得到$\omega$</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/09/seal%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/03/09/seal%E5%BA%93%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="seal库BGV同态加密解析"><a href="#seal库BGV同态加密解析" class="headerlink" title="seal库BGV同态加密解析"></a>seal库BGV同态加密解析</h1><h2 id="seal库参数设置"><a href="#seal库参数设置" class="headerlink" title="seal库参数设置"></a>seal库参数设置</h2><p>先看seal库源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> map&lt;<span class="hljs-type">size_t</span>, vector&lt;Modulus&gt;&gt; &amp;<span class="hljs-built_in">GetDefaultCoeffModulus128</span>()<br>            &#123;<br>                <span class="hljs-type">static</span> <span class="hljs-type">const</span> map&lt;<span class="hljs-type">size_t</span>, vector&lt;Modulus&gt;&gt; default_coeff_modulus_128&#123;<br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    Polynomial modulus: 1x^1024 + 1</span><br><span class="hljs-comment">                    Modulus count: 1</span><br><span class="hljs-comment">                    Total bit count: 27</span><br><span class="hljs-comment">                    */</span><br>                    &#123; <span class="hljs-number">1024</span>, &#123; <span class="hljs-number">0x7e00001</span> &#125; &#125;,<br><br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    Polynomial modulus: 1x^2048 + 1</span><br><span class="hljs-comment">                    Modulus count: 1</span><br><span class="hljs-comment">                    Total bit count: 54</span><br><span class="hljs-comment">                    */</span><br>                    &#123; <span class="hljs-number">2048</span>, &#123; <span class="hljs-number">0x3fffffff000001</span> &#125; &#125;,<br><br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    Polynomial modulus: 1x^4096 + 1</span><br><span class="hljs-comment">                    Modulus count: 3</span><br><span class="hljs-comment">                    Total bit count: 109 = 2 * 36 + 37</span><br><span class="hljs-comment">                    */</span><br>                    &#123; <span class="hljs-number">4096</span>, &#123; <span class="hljs-number">0xffffee001</span>, <span class="hljs-number">0xffffc4001</span>, <span class="hljs-number">0x1ffffe0001</span> &#125; &#125;,<br><br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    Polynomial modulus: 1x^8192 + 1</span><br><span class="hljs-comment">                    Modulus count: 5</span><br><span class="hljs-comment">                    Total bit count: 218 = 2 * 43 + 3 * 44</span><br><span class="hljs-comment">                    */</span><br>                    &#123; <span class="hljs-number">8192</span>, &#123; <span class="hljs-number">0x7fffffd8001</span>, <span class="hljs-number">0x7fffffc8001</span>, <span class="hljs-number">0xfffffffc001</span>,                               <span class="hljs-number">0xffffff6c001</span>, <span class="hljs-number">0xfffffebc001</span> &#125; &#125;,<br><br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    Polynomial modulus: 1x^16384 + 1</span><br><span class="hljs-comment">                    Modulus count: 9</span><br><span class="hljs-comment">                    Total bit count: 438 = 3 * 48 + 6 * 49</span><br><span class="hljs-comment">                    */</span><br>                    &#123; <span class="hljs-number">16384</span>,<br>                      &#123; <span class="hljs-number">0xfffffffd8001</span>, <span class="hljs-number">0xfffffffa0001</span>, <span class="hljs-number">0xfffffff00001</span>, <span class="hljs-number">0x1fffffff68001</span>, <span class="hljs-number">0x1fffffff50001</span>,<br>                        <span class="hljs-number">0x1ffffffee8001</span>, <span class="hljs-number">0x1ffffffea0001</span>, <span class="hljs-number">0x1ffffffe88001</span>, <span class="hljs-number">0x1ffffffe48001</span> &#125; &#125;,<br><br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                    Polynomial modulus: 1x^32768 + 1</span><br><span class="hljs-comment">                    Modulus count: 16</span><br><span class="hljs-comment">                    Total bit count: 881 = 15 * 55 + 56</span><br><span class="hljs-comment">                    */</span><br>                    &#123; <span class="hljs-number">32768</span>,<br>                      &#123; <span class="hljs-number">0x7fffffffe90001</span>, <span class="hljs-number">0x7fffffffbf0001</span>, <span class="hljs-number">0x7fffffffbd0001</span>, <span class="hljs-number">0x7fffffffba0001</span>, <span class="hljs-number">0x7fffffffaa0001</span>,<br>                        <span class="hljs-number">0x7fffffffa50001</span>, <span class="hljs-number">0x7fffffff9f0001</span>, <span class="hljs-number">0x7fffffff7e0001</span>, <span class="hljs-number">0x7fffffff770001</span>, <span class="hljs-number">0x7fffffff380001</span>,<br>                        <span class="hljs-number">0x7fffffff330001</span>, <span class="hljs-number">0x7fffffff2d0001</span>, <span class="hljs-number">0x7fffffff170001</span>, <span class="hljs-number">0x7fffffff150001</span>, <span class="hljs-number">0x7ffffffef00001</span>,<br>                        <span class="hljs-number">0xfffffffff70001</span> &#125; &#125;<br>                &#125;;<br><br>                <span class="hljs-keyword">return</span> default_coeff_modulus_128;<br>            &#125;<br><br></code></pre></td></tr></table></figure><p>这是BGV的128bit安全性参数设置，随着模多项式的次数$n$不同，对应的密文模数的大小$log(q)$也有调整，具体的公式可以按照下面的方法计算：</p><script type="math/tex; mode=display">\lambda \approx -log(\cfrac{A*log(q)}{n})\cfrac{Bn}{logq} + C\sqrt{\cfrac{logq}{n}}log(\cfrac{n}{log(q)})</script><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20230309155417529.png" alt="image-20230309155417529"></p><h2 id="BGV噪声变化"><a href="#BGV噪声变化" class="headerlink" title="BGV噪声变化"></a>BGV噪声变化</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NTT的实现及其加速</title>
    <link href="/2022/12/14/NTT%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%85%B6%E5%8A%A0%E9%80%9F/"/>
    <url>/2022/12/14/NTT%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%85%B6%E5%8A%A0%E9%80%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="NTT的实现及其加速"><a href="#NTT的实现及其加速" class="headerlink" title="NTT的实现及其加速"></a>NTT的实现及其加速</h1><h2 id="NTT快速数论变换原理"><a href="#NTT快速数论变换原理" class="headerlink" title="NTT快速数论变换原理"></a>NTT快速数论变换原理</h2><h3 id="多项式相乘的困难"><a href="#多项式相乘的困难" class="headerlink" title="多项式相乘的困难"></a>多项式相乘的困难</h3><p>假设有多项式A(x)，一共有n项,最高次项为$x^{n-1}$,设其系数为$a = (a[0],a[1],\cdots,a[n-1])$，类似的假设另一个多项式B(x),设其系数为$b = (b[0],b[1],\cdots,b[n-1])$，如果想要将两个多项式相乘，很明显一共要乘$n^2$次，能不能减少乘法的次数，使其复杂度比$O(n^2)$更少呢？</p><h3 id="基于FFT-快速傅里叶变换-的多项式相乘"><a href="#基于FFT-快速傅里叶变换-的多项式相乘" class="headerlink" title="基于FFT(快速傅里叶变换)的多项式相乘"></a>基于FFT(快速傅里叶变换)的多项式相乘</h3><p>把$x=x_0$代入A(x)可以得到多项式在点x0处的值，类似的，我们代入n个这样的点$ (x_0,x_1,\cdots,x_{n-1})$,可以得到n个多项式取值$ (A(x_0),A(x_1),\cdots,A(x_{n-1}))$，可以证明，仅通过这n个多项式取值，我们可以还原出原本的多项式。</p><blockquote><p>证明：</p><p>假设还原出的多项式不唯一，分别设为f(x)和g(x)，这个两个多项式的最高次为n-1,否则还原失败</p><p>令h(x) = f(x)-g(x) ，这个多项式的最高次至少为n-1</p><p>那么代入$ (x_0,x_1,\cdots,x_{n-1})$个点，h(x)均等于0，即这个多项式有n个解</p><p>而即使在复数域上n-1次方程也至多有n-1个解，矛盾</p><p>故只能还原出唯一的一个多项式</p></blockquote><p>类似的，代入多项式B(x)得到$ (B(x_0),B(x_1),\cdots,B(x_{n-1}))$，我们在进行下面的点乘操作得到</p><script type="math/tex; mode=display">(A(x_0)*B(x_0),A(x_1)*B(x_1),\cdots,A(x_{n-1})*B(x_{n-1}))</script><p>这是一个n维向量，按照这个向量还原多项式，我们就可以得到两个多项式的乘积</p><script type="math/tex; mode=display">C(x) = A(x)*B(X)</script><p>注意这里的乘法为多项式乘法，这样多项式相乘就巧妙的转化为点乘，复杂度只有O(n)</p><p>但有个疑问，把点代入多项式计算不是也有计算量吗？这个算法快就是因为，我们可以设置点$ (x_0,x_1,\cdots,x_{n-1})$，这些点经过精心设置，可以在计算例如A(x0)的时候很快。</p><h3 id="基于CT蝴蝶变换的NTT算法"><a href="#基于CT蝴蝶变换的NTT算法" class="headerlink" title="基于CT蝴蝶变换的NTT算法"></a>基于CT蝴蝶变换的NTT算法</h3><p>注意这里的参数需要满足一些条件</p><ul><li><p>$q \equiv 1 \mod{2n}$</p></li><li><p>$n = 2^k,k\in Z_+$</p></li><li><p>$\psi$为模数q的2N次单位根，即满足$\psi^{2n} \equiv 1 \mod{q}$</p></li><li><p>数组$\phi = (1,\psi^1,\psi^2,\cdots,\psi^{n-1}) $</p></li><li><p>数组$\psi_{rev}$是把数组$\phi$按照bit-reversed顺序重新排列出来的，见下面的例子(多项式次数n = 8)</p><blockquote><p>X(0) = X(0,0,0) —&gt; X(0,0,0) = X(0)</p><p>X(1) = X(0,0,1) —&gt; X(1,0,0) = X(4)</p><p>X(2) = X(0,1,0) —&gt; X(0,1,0) = X(2)</p><p>X(3) = X(0,1,1) —&gt; X(1,1,0) = X(6)</p><p>以此类推</p></blockquote></li></ul><p>下面是蝴蝶变换算法</p><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20221215122722792.png" alt="image-20221215122722792"></p><h3 id="基于GS蝴蝶变换的NTT逆变换"><a href="#基于GS蝴蝶变换的NTT逆变换" class="headerlink" title="基于GS蝴蝶变换的NTT逆变换"></a>基于GS蝴蝶变换的NTT逆变换</h3><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20221215122822035.png" alt="image-20221215122822035"></p><h3 id="NTT的一些性质"><a href="#NTT的一些性质" class="headerlink" title="NTT的一些性质"></a>NTT的一些性质</h3><p>假设”$\cdot $”代表多项式乘法，”$\circ $”代表分量乘法</p><ul><li>NTT(a) + NTT(b) = NTT(a+b)</li><li>NTT(INTT(a)$\cdot$ INTT(b)) = a $\circ $b</li><li></li></ul><h2 id="Barrett-Reduction-乘法取模加速"><a href="#Barrett-Reduction-乘法取模加速" class="headerlink" title="Barrett Reduction 乘法取模加速"></a>Barrett Reduction 乘法取模加速</h2><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><ul><li><a href="https://blog.csdn.net/YKRY35/article/details/79179285">(37条消息) 大数取模运算Barrett reduction_YKRY35的博客-CSDN博客_大数取模</a></li><li><a href="https://www.luogu.com.cn/blog/Sweetlemon/barrett-reduction">Barrett Reduction 乘法取模加速 - Sweetlemon 的博客 - 洛谷博客 (luogu.com.cn)</a></li></ul><p>Barrett reduction是一种求模运算的优化方法，它可以将求模运算的时间复杂度从O(n)降低到O(log n)。</p><h3 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h3><p>一般来说，32位整数加法操作比乘法操作快得多，大概快3到8倍。而移位操作又比加法操作快10倍以上，核心思想就是把除法尽可能迁移到移位操作上。</p><p>我们（人工）计算取模，用的是 </p><script type="math/tex; mode=display">r= a\bmod p=a-\left\lfloor \dfrac{a}{p} \right\rfloor *p</script><p>这个计算中有除法，在计算机组成原理中，两个32bit的数相除需要32次移位和32次加减法操作，开销比较大。</p><p>而两个32bit的数相乘只需要32次移位操作。我们希望能用乘法替换除法，计算出</p><script type="math/tex; mode=display">q=\left\lfloor \dfrac{a}{p} \right\rfloor</script><p>我们可以钦定一个整数 k，再弄出一个整数 m，使得</p><script type="math/tex; mode=display">\dfrac{m}{2^k}\approx\dfrac{1}{p}</script><p>那么 q不就约等于$ \dfrac{a\cdot m}{2^k}$了吗？这样除法运算就被拆成了一次乘法和k次位移，速度大大加快。</p><p>为了防止算出的商超过实际的商，我们一般取 </p><script type="math/tex; mode=display">m=\left\lfloor \dfrac{2^k}{p} \right\rfloor</script><p>这里，我们取</p><script type="math/tex; mode=display">k\ge \lceil 2\log_2 p \rceil\</script><p>也就是使得$ 2^k\approx p^2$。下面我们证明，这样取 k时，$0\le a-pq&lt;p$，也就是我们稍后在计算余数$a-pq$ 时，得到的答案<del>至多需要再做一次减法</del> 不需要再调整。</p><blockquote><p>下面是这样设置参数的合理性证明，证明$0\le a-pq&lt;p$：</p><p>由于 $q=\dfrac{am}{2^k}$</p><p>因此 $pq=\dfrac{apm}{2^k}，a-pq=\dfrac{a}{2^k}\cdot (2^k-pm)$</p><p>第一点，由于$2^k\approx p^2$，而a是模p意义下两个数的乘积，所以$a&lt;p^2$</p><p>于是有$0&lt;\dfrac{a}{2^k}&lt;1$</p><p>第二点，由于$m=\left\lfloor \dfrac{2^k}{p} \right\rfloor$</p><p>所以有$\dfrac{2^k}{p}  -1 &lt; m\leq \dfrac{2^k}{p} $，进一步推出$0\leq(2^k-pm)&lt;p$</p><p>综上可以证明$0\le a-pq&lt;p$</p></blockquote><p>总结这个算法的流程如下：</p><ul><li>根据 p<em>p</em> 的规模选取合适的 k，一般要求 $k\ge \lceil 2\log_2 p \rceil$。</li><li>根据 k,p 预处理出 $m=\left\lfloor \dfrac{2^k}{p} \right\rfloor$。</li><li>实际计算时，用 $q=\dfrac{a\cdot m}{2^k}$计算出商，再用$ r=a-pq$ 得出余数</li></ul><h3 id="c-例子"><a href="#c-例子" class="headerlink" title="c++例子"></a>c++例子</h3><p>下面是一个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RingMultiplier::mulModBarrett</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span>&amp; r, <span class="hljs-type">uint64_t</span> a, <span class="hljs-type">uint64_t</span> b, <span class="hljs-type">uint64_t</span> p, <span class="hljs-type">uint64_t</span> pr)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">unsigned</span> __int128 mul = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">unsigned</span> __int128&gt;(a) * b;<br><span class="hljs-type">uint64_t</span> abot = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint64_t</span>&gt;(mul);<span class="hljs-comment">//只会返回a*b的低64位</span><br><span class="hljs-type">uint64_t</span> atop = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint64_t</span>&gt;(mul &gt;&gt; <span class="hljs-number">64</span>);<span class="hljs-comment">//得到a*b的高64位</span><br><span class="hljs-type">unsigned</span> __int128 tmp = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">unsigned</span> __int128&gt;(abot) * pr;<br>tmp &gt;&gt;= <span class="hljs-number">64</span>;<br>tmp += <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">unsigned</span> __int128&gt;(atop) * pr;<br>tmp &gt;&gt;= kbar2 - <span class="hljs-number">64</span>;<br>tmp *= p;<br>tmp = mul - tmp;<br>r = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint64_t</span>&gt;(tmp);<br><span class="hljs-keyword">if</span>(r &gt;= p) r -= p;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数主要用来计算r=(a*b) mod p的结果，采用Barrett乘法算法，其中$pr=2^{kbar2} / p$，kbar2是一个预设的常量，模数p的大约满足$log_2p = 60$，所以这里的kbar2 = 120,于是有$pr \approx p$。</p><p>算法原理：</p><script type="math/tex; mode=display">r = mul - \left\lfloor \dfrac{mul}{p}\right\rfloor*p \\=mul - mul*\dfrac{pr}{2^k}*p \quad where \quad r=2^k \quad and \quad pr = \dfrac{2^k}{p}\\这里把mul*pr/2^k变成如下操作,其中abot存放mul的低64位，atop存放高64位\\[(abot*pr)>>64+atop*pr]>>(kbar2-64) \\=[(abot*pr)+atop*pr*2^{64}]/(2^{kbar2})\\这样可以完成barrett的快速求余操作</script><p>算法步骤：</p><ul><li>1）先把a*b的结果存到mul变量中，abot存放mul的低64位，atop存放高64位； </li><li>2）然后把abot乘以预设的pr，得到tmp，并右移64位；</li><li>3）再把atop乘以pr，再加到tmp上；</li><li>4）把tmp右移kbar2-64位，再乘以p；</li><li>5）最后求出mul-tmp，得到r； </li><li>6）最后判断r是否大于p，如果大于，则减去p，得到最终结果。</li></ul>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sm2椭圆曲线公钥密码算法</title>
    <link href="/2022/12/05/sm2%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/"/>
    <url>/2022/12/05/sm2%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="sm2椭圆曲线公钥密码算法"><a href="#sm2椭圆曲线公钥密码算法" class="headerlink" title="sm2椭圆曲线公钥密码算法"></a>sm2椭圆曲线公钥密码算法</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="国密算法介绍"><a href="#国密算法介绍" class="headerlink" title="国密算法介绍"></a>国密算法介绍</h3><p>国密即国家密码局认定的国产密码算法。主要有SM1，SM2，SM3，SM4。<a href="https://so.csdn.net/so/search?q=密钥&amp;spm=1001.2101.3001.7020">密钥</a>长度和分组长度均为128位。</p><ul><li><p>SM1 为对称加密。其加密强度与AES相当。该算法不公开，调用该算法时，需要通过加密芯片的接口进行调用。</p></li><li><p>SM2为非对称加密，基于ECC。该算法已公开。由于该算法基于ECC，故其签名速度与秘钥生成速度都快于RSA。ECC 256位（SM2采用的就是ECC 256位的一种）安全强度比RSA 2048位高，但运算速度快于RSA。</p></li><li><p>SM3 消息摘要。可以用MD5作为对比理解。该算法已公开。校验结果为256位。</p></li><li><p>SM4 无线局域网标准的分组数据算法。对称加密，密钥长度和分组长度均为128位。</p></li></ul><p>由于SM1、SM4加解密的分组大小为128bit，故对消息进行加解密时，若消息长度过长，需要进行分组，要消息长度不足，则要进行填充。</p><h3 id="SM2算法简介"><a href="#SM2算法简介" class="headerlink" title="SM2算法简介"></a>SM2算法简介</h3><p>SM2椭圆曲线公钥密码算法是我国自主设计的公钥密码算法，包括SM2-1椭圆曲线数字签名算法，SM2-2椭圆曲线密钥交换协议，SM2-3椭圆曲线公钥加密算法，分别用于实现数字签名密钥协商和数据加密等功能。SM2算法与RSA算法不同的是，SM2算法是基于椭圆曲线上点群离散对数难题，相对于RSA算法，256位的SM2密码强度已经比2048位的RSA密码强度要高。</p><p>sm2主要满足电子认证服务系统等应用需求。</p><h2 id="椭圆曲线介绍"><a href="#椭圆曲线介绍" class="headerlink" title="椭圆曲线介绍"></a>椭圆曲线介绍</h2><ul><li><a href="https://link.springer.com/content/pdf/10.1007/978-1-4939-1711-2.pdf">参考书籍</a></li></ul><h3 id="基本数学形式"><a href="#基本数学形式" class="headerlink" title="基本数学形式"></a>基本数学形式</h3><p>椭圆曲线是下面方程的一组解：</p><script type="math/tex; mode=display">Y^2 = X^3 + AX + B</script><p>这种类型的方程也被称为魏尔斯特拉斯方程，得名于19世纪对其进行广泛研究的数学家。下面给两个曲线的实例并画给出图片：</p><script type="math/tex; mode=display">E1 : Y^2 = X^3 − 3X + 3 \;and\; E2 : Y ^2 = X^3 − 6X + 5</script><img src="/2022/12/05/sm2%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E6%A0%B7%E4%BE%8B.png" class="椭圆曲线图"><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20221205130657777.png" alt="1"></p><h3 id="实数域上椭圆曲线"><a href="#实数域上椭圆曲线" class="headerlink" title="实数域上椭圆曲线"></a>实数域上椭圆曲线</h3><h4 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h4><p>令E为如下椭圆曲线：</p><script type="math/tex; mode=display">Y ^2 = X^3 − 15X + 18.</script><p>点P = (7, 16) 和 Q = (1, 2)为椭圆曲线上的两点，并构成直线L:</p><script type="math/tex; mode=display">L : Y = \frac{7}{3}X − 1/3.</script><p>如下图所示，直线L和椭圆曲线E交于三个点P,Q,R</p><img src="/2022/12/05/sm2%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E4%BA%A4%E7%82%B9%E5%9B%BE.png" class="椭圆曲线交点图"><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20221205131119418.png" alt="image-20221205131119418"></p><p>点R关于x轴对称得到R’,我们定义椭圆曲线d上的加法运算,</p><script type="math/tex; mode=display">P \oplus Q = R',</script><p>和我们通常理解的加法不同，这里的加法是在曲线上进行的，也就是说给出两个点，相加一定可以得到椭圆曲线上的第三个点R’，这个点就是加法的结果。</p><h4 id="加法运算瓶颈——无穷远点O"><a href="#加法运算瓶颈——无穷远点O" class="headerlink" title="加法运算瓶颈——无穷远点O"></a>加法运算瓶颈——无穷远点O</h4><p>还是按照上面的图片，我们尝试做这样的加法</p><script type="math/tex; mode=display">R \oplus R'=?</script><p>按照上一节的加法运算，直线RR‘应该和椭圆曲线交于三个点，但是这里没有第三个点，这时候该怎么办？数学家定义了一个无穷远点$O$,并假设点$O$也在椭圆曲线上，这样RR’就能交于椭圆曲线的点$O$了,于是有</p><script type="math/tex; mode=display">R \oplus R'=O.</script><p>基于无穷远点有这样的性质</p><ul><li>无穷远点$O$和椭圆曲线上任意点P的连线一定是垂直于x轴的</li></ul><p>结合之前的加法运算，于是有公式：</p><script type="math/tex; mode=display">P \oplus O = P</script><font color='red'>这是不是很类似于一个零点，任何点加这个点都是其本身</font><p>除此之外，基于无穷远点还有如下性质</p><script type="math/tex; mode=display">P + O = O + P = P \; for \;all\; P ∈ E\\P + (−P) = O \; for \;all\; P ∈ E\\(P + Q) + R = P + (Q + R) \; for \;all\;P, Q, R ∈ E\\P + Q = Q + P  \; for \;all\; P, Q ∈ E</script><p>四条公式分别代表Albel群(交换群)的4条性质：存在零元，存在逆元，结合律，交换律</p><h4 id="加法运算公式"><a href="#加法运算公式" class="headerlink" title="加法运算公式"></a>加法运算公式</h4><p>这里给一张图片，很好的讲述了加法的运算公式</p><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20221205132805302.png" alt="1"></p><img src="/2022/12/05/sm2%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99.png" class="加法运算法则"><h4 id="减法运算公式"><a href="#减法运算公式" class="headerlink" title="减法运算公式"></a>减法运算公式</h4><p>定义负数元的概念：如果椭圆曲线上的一个点P=(a,b)，那么点P的负数元为$\ominus P = (a,-b)$</p><p>这样定义有很好的性质：</p><blockquote><ul><li>$P\ominus P = O$</li></ul></blockquote><p>相当于实数域加减法的相反数的概念。</p><h3 id="有限域上椭圆曲线"><a href="#有限域上椭圆曲线" class="headerlink" title="有限域上椭圆曲线"></a>有限域上椭圆曲线</h3><h4 id="有限域上椭圆曲线定义"><a href="#有限域上椭圆曲线定义" class="headerlink" title="有限域上椭圆曲线定义"></a>有限域上椭圆曲线定义</h4><p>从上一节的介绍上可以看到，椭圆曲线上的加法运算构成一个群，所有的点可以是小数，也可以整数。那我们能不能加以限制，令椭圆曲线上的点全部都集中在某个域中呢？</p><p><strong>定义1.</strong>令$p$是一个奇素数，在有限域$\mathbb{F}_p$上的椭圆曲线有如下形式,</p><script type="math/tex; mode=display">E : Y ^2 = X^3 + AX + B \;with\; A, B \in \mathbb{F}_p \;satisfying\; 4A^3 + 27B^2 \neq 0</script><p>这里$4A^3 + 27B^2 \neq 0$是保证椭圆曲线上没有奇异点。</p><p>则定义在有限域上的椭圆曲线坐标是集合.</p><script type="math/tex; mode=display">E(\mathbb{F}_p) = \{(x, y) | x, y \in \mathbb{F}_p \; satisfying \; y^2 = x^3 + Ax + B\}∪ \{O\}</script><blockquote><p>一个例子,考虑下面的椭圆曲线：</p><script type="math/tex; mode=display">E(\mathbb{F}_{13}) : Y ^2 = X^3 + 3X + 8 \;over \;the \;field \;\mathbb{F}_{13}</script><p>我们取X=0,得到$Y^2=8\pmod{13}$，但我们解不出这个Y，因为方程无解</p><p>我们再取X = 1,得到$Y^2=12\pmod{13}$，解出两个解Y=5或者Y=8，那么得到在$E(\mathbb{F}_{13})$有两个点(1,5)和(1,8)</p><p>X遍历有限域$\mathbb{F}_{13}$,我们可以用类似的方法得到下面所有点</p><script type="math/tex; mode=display">E(\mathbb{F}_{13}) = \{O,(1, 5),(1, 8),(2, 3),(2, 10),(9, 6),(9, 7),(12, 2),(12, 11)\}</script></blockquote><h4 id="有限域上椭圆曲线运算"><a href="#有限域上椭圆曲线运算" class="headerlink" title="有限域上椭圆曲线运算"></a>有限域上椭圆曲线运算</h4><p>类似与实数域上的加法运算，有限域上椭圆曲线的运算，除法用模逆运算代替，所有运算均在有限域上进行（算完之后要模一个p）。这里还是举个例子</p><blockquote><p>椭圆曲线：</p><script type="math/tex; mode=display">E(\mathbb{F}_p) = \{(x, y) | x, y \in \mathbb{F}_p \; satisfying \; y^2 = x^3 + Ax + B\}∪ \{O\}</script><p>计算P=(9,7)和Q=(1,8)的和</p><script type="math/tex; mode=display">λ = (y_2 − y_1)/(x_2 − x_1)  = (8 − 7)/(1 − 9) = 1/(-8) = 1/5 = 5^{-1} \mod 13 =8\\ x_3 = λ^2 − x_1 − x_2 = 64 − 9 − 1 = 54 = 2\\ y_3 = λ(x_1-x_3)-y_1 = 8*(9-2) - 7 = 49 \mod{13}= 10</script><p>最终得到P+Q=(2,10)</p></blockquote><h3 id="椭圆曲线的一些名词"><a href="#椭圆曲线的一些名词" class="headerlink" title="椭圆曲线的一些名词"></a>椭圆曲线的一些名词</h3><h4 id="椭圆曲线的阶"><a href="#椭圆曲线的阶" class="headerlink" title="椭圆曲线的阶"></a>椭圆曲线的阶</h4><p>我们之前说到每个在有限域上的椭圆曲线都由有限个点组成。那么我们不禁要问：到底是多少个点？</p><p>首先，我们要定义一下 在一个群有多少个点就叫做这个群的“阶”（order）【在此放上wiki<a href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Order_(group_theory">关于order的解释</a>)】。</p><blockquote><p>椭圆曲线$E(\mathbb{F}_{13}) : Y ^2 = X^3 + 3X + 8 \;over \;the \;field \;\mathbb{F}_{13}$的阶为9，因为总共有9个点</p></blockquote><h4 id="椭圆曲线的基点"><a href="#椭圆曲线的基点" class="headerlink" title="椭圆曲线的基点"></a>椭圆曲线的基点</h4><p>先介绍一下循环子群的概率，方便我们之后基点的讨论</p><h5 id="数乘和循环子群"><a href="#数乘和循环子群" class="headerlink" title="数乘和循环子群"></a><strong>数乘和循环子群</strong></h5><p>在实数域乘法的定义是：</p><script type="math/tex; mode=display">nP=\underbrace{P+P+⋯+P}_{n个p}</script><p>使用倍加运算可以实现，其时间复杂度我们之后再讨论</p><blockquote><p>举个例子：</p><p>已知椭圆曲线</p><script type="math/tex; mode=display">E(\mathbb{F}_p) = \{(x, y) | x, y \in \mathbb{F}_p \; satisfying \; y^2 = x^3 + 3x + 8\}∪ \{O\}</script><p>取其上一点P(9,7)，其倍点运算为：</p><ul><li><p>P = (9,7)</p></li><li><p>2P = (9,6)</p></li><li>3P = (1,12)</li><li>4P = (9,7)</li></ul></blockquote><p>可以看出，点P运算4次还是点P，这就是循环子群的概念，可以看出点P的运算结果可以构成一个有限的集合，这种群算方式可以看成群的运算，从而构成循环子群。</p><h5 id="基点的概念"><a href="#基点的概念" class="headerlink" title="基点的概念"></a>基点的概念</h5><p>可以看出基点就是椭圆曲线上的一个点，基点有一个阶n，点加运算n次即可得到再次得到基点。</p><h5 id="基点的生成"><a href="#基点的生成" class="headerlink" title="基点的生成"></a>基点的生成</h5><p>基点可以构成一个循环子群，sm2椭圆加密就是在这个子群上进行运算。</p><p>假设椭圆曲线的阶为N，对于椭圆曲线上的每一个点，我们都有$NP = O$，同时基点G（其阶为n）也能构成一个元素个数的为n的子群，由群论的拉格朗日定理，一定有$n|N$，我们设置一个辅因子$h = N/n$，随机取椭圆曲线上的一点，可以看出点hP循环n次就是无穷远点，如果n为素数，那么点hp生成的子群阶就是n</p><script type="math/tex; mode=display">n*h*p = O</script><p>通过下面的运算步骤，我们可以寻找到阶为n的椭圆曲线下的子群。</p><blockquote><ul><li>计算椭圆曲线的阶 N 。</li><li>选择一个阶为 n 的子群。n必须是素数且必须是 N 的因子。</li><li>计算辅因子 h=N/n 。</li><li>在曲线上选择一个随机的点 P 。</li><li>计算 G=hP 。</li><li>如果 G 是0，那么回到步骤4。否则我们就已经找到了阶为 n 和辅因子是 h 的子群的基点。</li></ul></blockquote><h2 id="sm2国密算法流程介绍"><a href="#sm2国密算法流程介绍" class="headerlink" title="sm2国密算法流程介绍"></a>sm2国密算法流程介绍</h2><p>最详尽的算法流程步骤请参见这个pdf：<a href="https://oscca.gov.cn/sca/xxgk/2010-12/17/1002386/files/b791a9f908bb4803875ab6aeeb7b4e03.pdf">sm2技术文档</a>，本人在这里仅仅简单介绍一下流程和步骤，并讲解其中原理。其中流程中的一些符号不给予解释，文档里都有。</p><h3 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h3><ul><li>A1：用随机数发生器产生随机数k∈[1,n-1]； </li><li>A2：计算椭圆曲线点C1=[k]G=(x1,y1)，按本文本第1部分4.2.8和4.2.4给出的细节，将C1的数据类 型转换为比特串； </li><li>A3：计算椭圆曲线点S=[h]PB，若S是无穷远点，则报错并退出； </li><li>A4：计算椭圆曲线点[k]PB=(x2,y2)，将坐标x2、y2 的 数据类型转换为比特串； </li><li>A5：计算t=KDF(x2 ∥ y2, klen)，若t为全0比特串，则返回A1； </li><li>A6：计算C2 = M ⊕ t； </li><li>A7：计算C3 = Hash(x2 ∥ M ∥ y2)； </li><li>A8：输出密文C = C1 ∥ C2 ∥ C3。</li></ul><p>其中KDF为密钥派生函数，函数原型为KDF(z,klen)可以根据比特串z，和长度klen，从而输出一个长度为klen的比特串。</p><p>下面给一个流程图</p><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20221210202636498.png" alt="image-20221210202636498"></p><h3 id="加密算法原理的一些理解"><a href="#加密算法原理的一些理解" class="headerlink" title="加密算法原理的一些理解"></a>加密算法原理的一些理解</h3><ul><li><p>为什么随机数k范围是[1,n-1]，因为如果k=n，那么[k]G = O，这样的点G是无法用坐标表示出来的，也无法参加后面的运算</p></li><li><p>真正的密文在C2里，想要获取C2，必须用密钥派生函数KDF得到比特串t的值，而想要得到t的值，又必须计算$[k]P_B$，但是k是随机生成的，想要准确的获取k有两种方法。一种是从$[1,n-1]$遍历，要知道这样的遍历需要计算$n*(n-1)/2$次加法运算，n一般是个很大的数（数量级为$10^{78}$），这种计算量算到宇宙毁灭也算不出来。另一种是解方程$[x]G=(x_1,y_1)$，这就回到椭圆曲线上的困难问题<a href="https://baike.baidu.com/item/ECDLP/3324859">ECDLP</a>，所以想要解密是十分的困难。</p></li><li>C2的长度为klen，即和密文的长度想当</li><li>C3是哈希函数，更多的是为验证接受到的密文是否出现改动</li></ul><h3 id="解密算法"><a href="#解密算法" class="headerlink" title="解密算法"></a>解密算法</h3><p>设klen为密文中C2的比特长度。 为了对密文C=C1 ∥ C2 ∥ C3 进行解密，作为解密者的用户B应实现以下运算步骤： </p><ul><li>B1：从C中取出比特串C1，将C1的数据类型转换为椭圆曲线上的点，验证C1是否满足椭圆曲线方程，若不满足则报错并退出； </li><li>B2：计算椭圆曲线点S=[h]C1，若S是无穷远点，则报错并退出； </li><li>B3：计算[dB]C1=(x2,y2)，将坐标x2、y2的数据类型转 换为比特串； </li><li>B4：计算t=KDF(x2 ∥ y2, klen)，若t为全0比特串，则报错并退出； </li><li>B5：从C中取出比特串C2，计算M′ = C2 ⊕ t； </li><li>B6：计算u = Hash(x2 ∥ M′ ∥ y2)，从C中取出比特串C3，若$u \neq C3$则报错并退出；</li><li>B7：输出明文M′。</li></ul><p>还是给出一个流程图</p><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20221210204747217.png" alt="image-20221210204747217"></p><h3 id="解密算法的一些理解"><a href="#解密算法的一些理解" class="headerlink" title="解密算法的一些理解"></a>解密算法的一些理解</h3><ul><li>为什么计算$[d_B]C_1=[d_B*k]G$即可得到加密流程中的(x2,y2)，要知道只有$[k]P_B=(x2,y2)$，理由是：</li></ul><p>密钥对的设定是有规则的，即$[d_B]G=P_B$，所以这里可以等价。试想一下，想要根据公钥PB得到私钥$d_B$，又需要解一个ECDLP问题，sm2的安全性就基于此。</p><h2 id="Python程序实现"><a href="#Python程序实现" class="headerlink" title="Python程序实现"></a>Python程序实现</h2><p>sm2算法的实现有专门的库gmssl，调用其中的库即可实现加解密。</p><p>这里仿照gmssl库做出了一些改进，实现了sm2的加解密。</p><p>其中椭圆曲线参数的设定和基点的选择参照官方技术文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">基点G的阶:     FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123<br>素数p:        FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF<br>基点G横坐标:   32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7<br>基点G纵坐标:   bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0<br>椭圆曲线系数a: FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC<br>椭圆曲线系数b: 28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93<br></code></pre></td></tr></table></figure><p>代码实现如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><span class="hljs-keyword">from</span> gmssl <span class="hljs-keyword">import</span> sm3,func<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-comment"># 选择素域，设置椭圆曲线参数</span><br><br>default_ecc_table = \<br>&#123;<br>    <span class="hljs-string">&#x27;n&#x27;</span>: <span class="hljs-string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,<br>    <span class="hljs-string">&#x27;p&#x27;</span>: <span class="hljs-string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,<br>    <span class="hljs-string">&#x27;g_x&#x27;</span>: <span class="hljs-string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7&#x27;</span>,<br>    <span class="hljs-string">&#x27;g_y&#x27;</span>: <span class="hljs-string">&#x27;bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,<br>    <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,<br>    <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,<br>&#125;<br><br><span class="hljs-comment"># default_ecc_table = \</span><br><span class="hljs-comment"># &#123;</span><br><span class="hljs-comment">#     &#x27;n&#x27;: &#x27;1&#x27;,</span><br><span class="hljs-comment">#     &#x27;p&#x27;: &#x27;D&#x27;,</span><br><span class="hljs-comment">#     &#x27;g_x&#x27;: &#x27;1&#x27;,</span><br><span class="hljs-comment">#     &#x27;g_y&#x27;: &#x27;1&#x27;,</span><br><span class="hljs-comment">#     &#x27;a&#x27;: &#x27;3&#x27;,</span><br><span class="hljs-comment">#     &#x27;b&#x27;: &#x27;8&#x27;,</span><br><span class="hljs-comment"># &#125;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CryptSM2</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, private_key, public_key, ecc_table=default_ecc_table</span>):<br>        <span class="hljs-comment">#初始化函数，需要输入公钥和私钥</span><br>        self.private_key = private_key<br>        self.para_len = <span class="hljs-built_in">len</span>(ecc_table[<span class="hljs-string">&#x27;n&#x27;</span>])<br>        self.public_key = self.Str_coordinate_to_jacobian(public_key)<br>        self.ecc_a3 = (<br>            <span class="hljs-built_in">int</span>(ecc_table[<span class="hljs-string">&#x27;a&#x27;</span>], base=<span class="hljs-number">16</span>) + <span class="hljs-number">3</span>) % <span class="hljs-built_in">int</span>(ecc_table[<span class="hljs-string">&#x27;p&#x27;</span>], base=<span class="hljs-number">16</span>)<br>        self.ecc_table = ecc_table<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">double_point</span>(<span class="hljs-params">self, Point</span>):  <span class="hljs-comment"># 倍点</span><br>        l = <span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(Point)) <span class="hljs-comment">#计算点的16进制长度 </span><br>        len_2 = <span class="hljs-number">2</span> * self.para_len<br>        x1 = <span class="hljs-built_in">int</span>(Point[<span class="hljs-number">0</span>], <span class="hljs-number">16</span>)<br>        y1 = <span class="hljs-built_in">int</span>(Point[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>        z1 = <span class="hljs-built_in">int</span>(Point[<span class="hljs-number">2</span>], <span class="hljs-number">16</span>)<br><br>        p = <span class="hljs-built_in">int</span>(self.ecc_table[<span class="hljs-string">&#x27;p&#x27;</span>], base=<span class="hljs-number">16</span>)<br>        <span class="hljs-comment">#使用计算倍点的公式</span><br>        T6 = (z1 * z1) % p<br>        T2 = (y1 * y1) % p<br>        T3 = (x1 + T6) % p<br>        T4 = (x1 - T6) % p<br>        T1 = (T3 * T4) % p<br>        T3 = (y1 * z1) % p<br>        T4 = (T2 * <span class="hljs-number">8</span>) % p<br>        T5 = (x1 * T4) % p<br>        T1 = (T1 * <span class="hljs-number">3</span>) % p<br>        T6 = (T6 * T6) % p<br>        T6 = (self.ecc_a3 * T6) % p<br>        T1 = (T1 + T6) % p<br>        z3 = (T3 + T3) % p<br>        T3 = (T1 * T1) % p<br>        T2 = (T2 * T4) % p<br>        x3 = (T3 - T5) % p<br><br>        <span class="hljs-keyword">if</span> (T5 % <span class="hljs-number">2</span>) == <span class="hljs-number">1</span>:<br>            T4 = (T5 + ((T5 + p) &gt;&gt; <span class="hljs-number">1</span>) - T3) % p<br>        <span class="hljs-keyword">else</span>:<br>            T4 = (T5 + (T5 &gt;&gt; <span class="hljs-number">1</span>) - T3) % p<br><br>        T1 = (T1 * T4) % p<br>        y3 = (T1 - T2) % p<br><br>        form = <span class="hljs-string">&#x27;%%0%dx&#x27;</span> % self.para_len<br>        <span class="hljs-keyword">return</span> (form % x3, form % y3, form % z3)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_point</span>(<span class="hljs-params">self, P1, P2</span>):  <span class="hljs-comment"># 点加函数，P2点为仿射坐标即z=1，P1为Jacobian加重射影坐标</span><br>        p = <span class="hljs-built_in">int</span>(self.ecc_table[<span class="hljs-string">&#x27;p&#x27;</span>], base=<span class="hljs-number">16</span>)<br>        X1 = <span class="hljs-built_in">int</span>(P1[<span class="hljs-number">0</span>], <span class="hljs-number">16</span>)<br>        Y1 = <span class="hljs-built_in">int</span>(P1[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>        Z1 = <span class="hljs-built_in">int</span>(P1[<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)<br><br>        x2 = <span class="hljs-built_in">int</span>(P2[<span class="hljs-number">0</span>], <span class="hljs-number">16</span>)<br>        y2 = <span class="hljs-built_in">int</span>(P2[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br><br>        T1 = (Z1 * Z1) % p<br>        T2 = (y2 * Z1) % p<br>        T3 = (x2 * T1) % p<br>        T1 = (T1 * T2) % p<br>        T2 = (T3 - X1) % p<br>        T3 = (T3 + X1) % p<br>        T4 = (T2 * T2) % p<br>        T1 = (T1 - Y1) % p<br>        Z3 = (Z1 * T2) % p<br>        T2 = (T2 * T4) % p<br>        T3 = (T3 * T4) % p<br>        T5 = (T1 * T1) % p<br>        T4 = (X1 * T4) % p<br>        X3 = (T5 - T3) % p<br>        T2 = (Y1 * T2) % p<br>        T3 = (T4 - X3) % p<br>        T1 = (T1 * T3) % p<br>        Y3 = (T1 - T2) % p<br><br><br>        form = <span class="hljs-string">&#x27;%%0%dx&#x27;</span> % self.para_len<br>        <br>        <span class="hljs-keyword">return</span> (form % X3, form % Y3, form % Z3)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">kp</span>(<span class="hljs-params">self, k_int, Point_xy</span>):  <br>        <span class="hljs-comment"># kP运算，即k倍点的运算函数</span><br>        Point = Point_xy<br>        k = k_int<br>        mask_str = <span class="hljs-string">&#x27;8&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.para_len - <span class="hljs-number">1</span>):<br>            mask_str += <span class="hljs-string">&#x27;0&#x27;</span><br>        mask = <span class="hljs-built_in">int</span>(mask_str, <span class="hljs-number">16</span>)<br>        Temp = Point<br>        flag = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.para_len * <span class="hljs-number">4</span>): <span class="hljs-comment">#每个16进制4个bit</span><br>            <span class="hljs-keyword">if</span> (flag):<br>                Temp = self.double_point(Temp)<br>            <span class="hljs-keyword">if</span> (k &amp; mask) != <span class="hljs-number">0</span>: <span class="hljs-comment">#用与操作判断k的最高位是否为0</span><br>                <span class="hljs-keyword">if</span> (flag):<br>                    Temp = self.add_point(Temp, Point)<br>                <span class="hljs-keyword">else</span>:<br>                    flag = <span class="hljs-literal">True</span><br>                    Temp = Point<br>            k = k &lt;&lt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> self._convert_jacb_to_nor(Temp)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_convert_jacb_to_nor</span>(<span class="hljs-params">self, Point</span>): <span class="hljs-comment"># Jacobian加重射影坐标转换成仿射坐标</span><br>        len_2 = <span class="hljs-number">2</span> * self.para_len<br>        x = <span class="hljs-built_in">int</span>(Point[<span class="hljs-number">0</span>], <span class="hljs-number">16</span>)<br>        y = <span class="hljs-built_in">int</span>(Point[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>        z = <span class="hljs-built_in">int</span>(Point[<span class="hljs-number">2</span>], <span class="hljs-number">16</span>)<br>        p = <span class="hljs-built_in">int</span>(self.ecc_table[<span class="hljs-string">&#x27;p&#x27;</span>], base=<span class="hljs-number">16</span>)<br>        z_inv = <span class="hljs-built_in">pow</span>(z, p - <span class="hljs-number">2</span>, p)<br>        z_invSquar = (z_inv * z_inv) % p<br>        z_invQube = (z_invSquar * z_inv) % p<br>        x_new = (x * z_invSquar) % p<br>        y_new = (y * z_invQube) % p<br>        z_new = (z * z_inv) % p<br>        <span class="hljs-keyword">if</span> z_new == <span class="hljs-number">1</span>:<br>            form = <span class="hljs-string">&#x27;%%0%dx&#x27;</span> % self.para_len<br>            <br>            <span class="hljs-keyword">return</span> (form % x_new, form % y_new, form % z_new)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self, data_str</span>):<br>        <span class="hljs-comment"># 加密函数，data消息字符串</span><br>        data = data_str.encode() <span class="hljs-comment">#将消息转化为bytes流</span><br>        msg = data.<span class="hljs-built_in">hex</span>() <span class="hljs-comment"># 消息转化为16进制字符串</span><br>        G = (self.ecc_table[<span class="hljs-string">&#x27;g_x&#x27;</span>],self.ecc_table[<span class="hljs-string">&#x27;g_y&#x27;</span>],<span class="hljs-string">&quot;1&quot;</span>)<br>        k = <span class="hljs-number">2</span><span class="hljs-comment">#int(func.random_hex(self.para_len),16) #1.产生随机数k \in [1,n-1]</span><br>        C1 = self.kp(k,G) <span class="hljs-comment">#2.计算[k]G = (x1,y1)</span><br>        C1 = self._convert_jacb_to_nor(C1)<br>        C1 = C1[<span class="hljs-number">0</span>]+C1[<span class="hljs-number">1</span>]<br>        xy = self.kp(k,self.public_key) <span class="hljs-comment">#3.计算点s = [k]pk</span><br>        x2 = xy[<span class="hljs-number">0</span>]<br>        y2 = xy[<span class="hljs-number">1</span>]<br>        m_len = <span class="hljs-built_in">len</span>(msg)<br>        t = sm3.sm3_kdf((x2+y2).encode(<span class="hljs-string">&#x27;utf8&#x27;</span>), m_len/<span class="hljs-number">2</span>)<span class="hljs-comment">#5.计算t = KDF(x2||y2,klen)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(t,<span class="hljs-number">16</span>)==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">else</span>:<br>            form = <span class="hljs-string">&#x27;%%0%dx&#x27;</span> % m_len <span class="hljs-comment">#两个百分号代表%</span><br>            C2 = form % (<span class="hljs-built_in">int</span>(msg, <span class="hljs-number">16</span>) ^ <span class="hljs-built_in">int</span>(t, <span class="hljs-number">16</span>)) <span class="hljs-comment">#6.计算C2 = M 异或 t，C2的长度理应为消息M的长度</span><br>            C3 = sm3.sm3_hash([<br>                i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&#x27;%s%s%s&#x27;</span>% (x2,msg,y2))<span class="hljs-comment">#7.计算哈希函数C3 = Hash(x2 || M || y2)</span><br>            ])<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&#x27;%s%s%s&#x27;</span> % (C1,C3,C2))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self, data</span>):<br>            <span class="hljs-comment"># 解密函数，data密文（bytes）</span><br>            data = data.<span class="hljs-built_in">hex</span>()<br>            len_2 = <span class="hljs-number">2</span> * self.para_len<br>            len_3 = len_2 + <span class="hljs-number">64</span> <br>            C1 = self.Str_coordinate_to_jacobian(data[<span class="hljs-number">0</span>:len_2]) <span class="hljs-comment">#1.提取出C1,并转化为坐标点</span><br>            C3 = data[len_2:len_3]<br>            C2 = data[len_3:]<br>            xyz = self.kp(<span class="hljs-built_in">int</span>(self.private_key,<span class="hljs-number">16</span>),C1)<span class="hljs-comment">#3.计算[sk]C1 = (x2,y2)</span><br>            xy = self._convert_jacb_to_nor(xyz)<br>            <span class="hljs-comment"># print(&#x27;xy = %s&#x27; % xy)</span><br>            x2 = xy[<span class="hljs-number">0</span>]<br>            y2 = xy[<span class="hljs-number">1</span>]<br>            cl = <span class="hljs-built_in">len</span>(C2)<br>            t = sm3.sm3_kdf((x2+y2).encode(<span class="hljs-string">&#x27;utf8&#x27;</span>), cl/<span class="hljs-number">2</span>)<span class="hljs-comment">#4.计算t = KDF(x2||y2,klen)</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(t, <span class="hljs-number">16</span>) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">else</span>:<br>                form = <span class="hljs-string">&#x27;%%0%dx&#x27;</span> % cl<br>                M = form % (<span class="hljs-built_in">int</span>(C2,<span class="hljs-number">16</span>) ^ <span class="hljs-built_in">int</span>(t,<span class="hljs-number">16</span>))<span class="hljs-comment">#5.恢复明文M = C2 异或 t</span><br>                u = sm3.sm3_hash([<br>                    i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&#x27;%s%s%s&#x27;</span>% (x2,M,y2))<br>                ])<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>.fromhex(M)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Str_coordinate_to_jacobian</span>(<span class="hljs-params">self,Point_str</span>):<br>        Point = Point_str<br>        x = Point[<span class="hljs-number">0</span>:self.para_len]<br>        y = Point[self.para_len:<span class="hljs-number">2</span>*self.para_len]<br>        z = <span class="hljs-string">&quot;1&quot;</span><br>        <span class="hljs-keyword">return</span> (x,y,z)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># sm2的公私钥</span><br>    SM2_PRIVATE_KEY = <span class="hljs-string">&#x27;00B9AB0B828FF68872F21A837FC303668428DEA11DCD1B24429D0C99E24EED83D5&#x27;</span><br>    SM2_PUBLIC_KEY = <span class="hljs-string">&#x27;B9C9A6E04E9C91F7BA880429273747D7EF5DDEB0BB2FF6317EB00BEF331A83081A6994B8993F3F5D6EADDDB81872266C87C018FB4162F5AF347B483E24620207&#x27;</span><br>    operator = CryptSM2(SM2_PRIVATE_KEY,SM2_PUBLIC_KEY)<br>    c = operator.encrypt(<span class="hljs-string">&quot;网络空间安全&quot;</span>)<br>    <span class="hljs-built_in">print</span>(base64.b64encode(c))<br>    result = operator.decrypt(c).decode(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-built_in">print</span>(result)<br><br>    <span class="hljs-comment"># n = int(default_ecc_table[&#x27;n&#x27;],16)</span><br>    <span class="hljs-comment"># G = operator.Str_coordinate_to_jacobian(SM2_PRIVATE_KEY)</span><br>    <span class="hljs-comment"># print(operator.kp(n,G))</span><br>    <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>椭圆曲线加密算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python常用库(密码学)</title>
    <link href="/2022/11/19/python%E5%B8%B8%E7%94%A8%E5%BA%93-%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    <url>/2022/11/19/python%E5%B8%B8%E7%94%A8%E5%BA%93-%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>EIGamal加密算法</title>
    <link href="/2022/11/18/EIGamal%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <url>/2022/11/18/EIGamal%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="EIGamal加密算法"><a href="#EIGamal加密算法" class="headerlink" title="EIGamal加密算法"></a>EIGamal加密算法</h1><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><h3 id="DH-Diffie-Hellman-算法"><a href="#DH-Diffie-Hellman-算法" class="headerlink" title="DH(Diffie-Hellman)算法"></a>DH(Diffie-Hellman)算法</h3><p>DH算法用于在不安全的公共通道中协商密钥，安全性体现在：在有限域上计算离散代数非常困难。上两位大牛Whitfield Diffie 和 Martin Hellman的照片：</p><img src="/2022/11/18/EIGamal%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/DH_master.jpg" class="" title="大师"><p>算法描述：</p><blockquote><p>假定Alice和Bob期望在一个不安全的网络中协商一个共同的密钥，那么进行如下步骤：</p><ul><li>两人先说好大素数（质数）p和它的原始根g。</li><li>Alice随机产生一个数a，并计算$y_A = g^a \mod p$, 发送给Bob。</li><li>Bob随机产生一个数b，并计算$y_B= g^b \mod p$，发送给Alice。</li></ul><p>此时， Alice手握Bob发过来的$y_B$，结合自己产生的a，开始这样计算：</p><p>$y_B^a \mod p = (g^b \mod p)^a \mod p = g^{ab} \mod p$。</p><p>Bob也拿到了Alice发来的$y_A$，同时结合自己的b，也开始计算：</p><p>$y_A^b \mod p = (g^a \mod p)^b \mod p = g^{ab} \mod g$。</p><p>这样Alice和Bob都得到了相同的密钥。</p></blockquote><img src="/2022/11/18/EIGamal%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/DH.png" class="" title="DH密钥交换图解"><h3 id="EIGamal诞生"><a href="#EIGamal诞生" class="headerlink" title="EIGamal诞生"></a>EIGamal诞生</h3><p>ElGamal算法是由Tather ElGamal在1985年提出的，它是一种基于<a href="https://so.csdn.net/so/search?q=离散&amp;spm=1001.2101.3001.7020">离散</a>对数难题的加密体系，与RAS算法一样，既能用于数据加密，也能用于数字签名。ElGamal算法是基于因数分解，而ElGamal算法是基于离散对数问题。与RSA算法相比，ElGamal算法哪怕是使用相同的私钥，对相同的明文进行加密，每次加密后得到的签名也各不相同，有效的防止了网络中可能出现的重放攻击。</p><ul><li>原文的链接：<a href="https://link.springer.com/content/pdf/10.1007/3-540-39568-7_2.pdf"><a href="https://ieeexplore.ieee.org/abstract/document/1057074/">A public key cryptosystem and a signature scheme based on discrete logarithms</a></a></li></ul><p>这篇论文在谷歌学术上被引用了将近10000次，可以说有想当广泛的影响力，大家如果有时间可以欣赏一下作者是怎么行文的，EIGamal加密算法十分的简单，看看作者是如何将其扩充到9页，也是一种锻炼自己的方式嘿嘿。</p><h2 id="基于离散对数的数学难题"><a href="#基于离散对数的数学难题" class="headerlink" title="基于离散对数的数学难题"></a>基于离散对数的数学难题</h2><h3 id="基本描述"><a href="#基本描述" class="headerlink" title="基本描述"></a>基本描述</h3><p><strong>如果对于一个整数y和质数p的一个原根g，可以找到一个唯一的指数x，使得：</strong></p><p>$y=g^x\pmod{p} $<strong>其中</strong> $0≤x≤p−2$<strong>成立，那么指数x称为y的以g为基数的模p的离散对数。</strong></p><p>离散对数难题是指：当已知一个大质数p和它的一个原根g，如果给定一个y，要计算x的值是相当困难的。</p><h3 id="针对不合理参数的破解方法"><a href="#针对不合理参数的破解方法" class="headerlink" title="针对不合理参数的破解方法"></a>针对不合理参数的破解方法</h3><h4 id="当质数满足-p-2-n-1"><a href="#当质数满足-p-2-n-1" class="headerlink" title="当质数满足$p = 2^n+1$"></a>当质数满足$p = 2^n+1$</h4><p>当$p = 2^n+1$,x可以被转化成二进制序列$\{b_0,\dots,b_{n-1}\}$,其中$b_i\in \{0,1\}$,有如下等式</p><script type="math/tex; mode=display">x = \sum_{i=0}^{n-1}{b_i*2^i}</script><p>注意到，因为g是模数p的一个原根，所以集合$\{g^i|i\in[0,p-2]\}=\{1,\dots,p-1\}$,两个集合即两个集合应该相等，由Euler小定理:</p><script type="math/tex; mode=display">g^{p-1} \equiv 1 \pmod{p}</script><p>那么对方程开方:</p><script type="math/tex; mode=display">g^{(p-1)/2} \equiv -1 \pmod{p}</script><p>为什么不是等于1呢，因为已经有$g^0=1$了，$g^{(p-1)/2}$不能和$g^0$相等（集合$\{g^i|i\in[0,p-2]\}$等于素数p的既约剩余系），所以只能等于-1</p><p>有了上面的基础，我们可以简单推导出下面的公式</p><script type="math/tex; mode=display">y^{(p-1)/2} \equiv (g^x)^{(p-1)/2} \equiv (-1)^x \pmod{p}</script><p>根据x的二进制序列，当x的最低位</p><ul><li>$b_0=0$时，$y^{(p-1)/2} \equiv 1 \pmod{p}$</li><li>$b_0=1$时，$y^{(p-1)/2} \equiv -1 \pmod{p}$</li></ul><p>由此我们可以确定第一位$b_0$的值，我们继续令$z \equiv y*g^{(-b_0)}\equiv g^{x_1} \pmod{p}$,这里</p><script type="math/tex; mode=display">x_1 = \sum_{i=1}^{n-1}b_i*2^i</script><p>如果$b_1=0$那么$x_1$是4的倍数而不是2的倍数，有下面的等式</p><script type="math/tex; mode=display">z^{(p-1)/4} \pmod{p} \equiv\begin{equation}    \begin{cases}        +1,b_1=0\\        -1,b_0=1     \end{cases}\end{equation}</script><p>由此我们有可以判断一位$b_1$，以此类推，我们可以完全复原密文x</p><h4 id="当p没有大素数因子"><a href="#当p没有大素数因子" class="headerlink" title="当p没有大素数因子"></a>当p没有大素数因子</h4><h2 id="EIGamal流程介绍"><a href="#EIGamal流程介绍" class="headerlink" title="EIGamal流程介绍"></a>EIGamal流程介绍</h2><h3 id="密钥产生"><a href="#密钥产生" class="headerlink" title="密钥产生"></a>密钥产生</h3><ul><li>选取一个强素数$p$，而且满足$p-1$至少有一个很大的质因数（如果因子很小那么计算离散对数很简单）</li><li>素数$p$的一个本原根$g$</li><li>随机选取整数$a$</li></ul><p>产生一个公钥$pk = (p,g,g^a)$，私钥是随机选取的整数a</p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>假设Alice想发送一个密文m给Bob</p><ul><li>随机选取一个数$k\in[1,p-2]$</li><li>计算$c_1 = g^k \mod p$</li><li>再计算$c_2 = (g^a)^k*m \mod p$</li></ul><p>如此就计算出了密文，这是一对数$(c_1,c_2)$，并将其发送给Bob</p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>Bob讲密文恢复成明文m</p><ul><li>计算$v \equiv c_1^a \pmod{p}$</li><li>计算$m \equiv c_2*v^{-1} \pmod{p}$</li></ul><blockquote><p>证明：</p><p>$m \equiv c_2<em>v^{-1} \pmod{p} \equiv m</em>g^{ak}*(g^{ak})^{-1} \pmod{p} \equiv m \pmod{p}$</p></blockquote><h2 id="python程序实现"><a href="#python程序实现" class="headerlink" title="python程序实现"></a>python程序实现</h2><h3 id="参数生成"><a href="#参数生成" class="headerlink" title="参数生成"></a>参数生成</h3><p>强素数满足p-1至少有一个大因子，可以用Crypto.Util.number里的函数<code>getStrongPrime()</code>，这样可以直接产生一个非常强的素数。但是这样有几个问题：</p><ul><li>这个函数随机生成的强素数的bit位数必须是128的倍数而且大于512。一方面导致了计算时间的增大，令一方面如果p太大可能导致不安全（比如$g^a \mod p$可能在数值上就等于$g^a$，而有些同学喜欢默认为原根就是2,3,5中的几个，如果a取的不是很大，我们可以直接开方，如果是整数那么这个就是我们要的a）</li><li>这个素数因为有大因子，在验证g是原根的时候，这几个大因子寻找十分困难，以至于时间很长很长</li></ul><p>下面给出一个解决方案：</p><blockquote><p>我们只需要p-1有一个大因子就行了，我们默认大因子为素数q和数字2，这样就有关系p = 2*q+1,如此一来，我们只需要验证p-1的两个因子即可判断是不是原根</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Gen_primitive_root</span>(<span class="hljs-params">p,q</span>):<br>    <span class="hljs-comment">#产生一个本原根，产生方法，从2，3，... ，p-1逐个选取</span><br>    <span class="hljs-comment">#选到2的时候，选取phi(p)的几个非1因子，比如phi(11)=10,10有因子2，5</span><br>    <span class="hljs-comment">#如果2的2次方和5次方都不等于1，那么一定2的10次方等于1，这时候2为本原根</span><br>    <span class="hljs-comment">#但，这样真的很慢很慢</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        candidate_root = random.randint(<span class="hljs-number">2</span>,p-<span class="hljs-number">2</span>)<br>        <span class="hljs-comment">#按照Gen_para生成的素数p只有两个素因子2和q</span><br>        <span class="hljs-keyword">if</span> gmpy2.powmod(candidate_root,<span class="hljs-number">2</span>,p)!=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span>  gmpy2.powmod(candidate_root,q,p)!=<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> candidate_root     <br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Gen_para</span>(<span class="hljs-params">m</span>):<br>    digit = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(m))<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment">#这里是一个坑，尽量吧q的范围扩大一点，这样有更大的几率让2*q+1是一个素数</span><br>        q = sympy.randprime(<span class="hljs-number">10</span>**digit, <span class="hljs-number">10</span>**(digit+<span class="hljs-number">1</span>))<br>        p = <span class="hljs-number">2</span> * q + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> sympy.isprime(q):<br>            <span class="hljs-keyword">if</span>  gmpy2.is_prime(p):<br>                <span class="hljs-keyword">break</span><br>    g = Gen_primitive_root(p,q)<br>    a = random.randint(<span class="hljs-number">2</span> , p-<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> [p,g,<span class="hljs-built_in">pow</span>(g,a,p)],a<br></code></pre></td></tr></table></figure><h3 id="加解密实现"><a href="#加解密实现" class="headerlink" title="加解密实现"></a>加解密实现</h3><p>参数生成了之后加解密就没什么好说的了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m,pk</span>):<br>    k = random.randint(<span class="hljs-number">1</span>,p-<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;参数k的值为:%d&quot;</span>%k)<br>    c1 = <span class="hljs-built_in">pow</span>(g,k,p)<br>    c2 = (<span class="hljs-built_in">pow</span>(g_a,k,p) * m)%p<br>    <span class="hljs-keyword">return</span>  c1,c2 <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">c1,c2,sk</span>):<br>    v = <span class="hljs-built_in">pow</span>(c1,sk,p)<br>    m = c2*sympy.invert(v,p) % p<br>    <span class="hljs-keyword">return</span> m<br></code></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> sympy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Gen_primitive_root</span>(<span class="hljs-params">p,q</span>):<br>    <span class="hljs-comment">#产生一个本原根，产生方法，从2，3，... ，p-1逐个选取</span><br>    <span class="hljs-comment">#选到2的时候，选取phi(p)的几个非1因子，比如phi(11)=10,10有因子2，5</span><br>    <span class="hljs-comment">#如果2的2次方和5次方都不等于1，那么一定2的10次方等于1，这时候2为本原根</span><br>    <span class="hljs-comment">#但，这样真的很慢很慢</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        candidate_root = random.randint(<span class="hljs-number">2</span>,p-<span class="hljs-number">2</span>)<br>        <span class="hljs-comment">#按照Gen_para生成的素数p只有两个素因子2和q</span><br>        <span class="hljs-keyword">if</span> gmpy2.powmod(candidate_root,<span class="hljs-number">2</span>,p)!=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span>  gmpy2.powmod(candidate_root,q,p)!=<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> candidate_root          <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Gen_para</span>(<span class="hljs-params">m</span>):<br>    digit = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(m))<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment">#这里是一个坑，尽量吧q的范围扩大一点，这样有更大的几率让2*q+1是一个素数</span><br>        q = sympy.randprime(<span class="hljs-number">10</span>**digit, <span class="hljs-number">10</span>**(digit+<span class="hljs-number">1</span>))<br>        p = <span class="hljs-number">2</span> * q + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> sympy.isprime(q):<br>            <span class="hljs-keyword">if</span>  gmpy2.is_prime(p):<br>                <span class="hljs-keyword">break</span><br>    g = Gen_primitive_root(p,q)<br>    a = random.randint(<span class="hljs-number">2</span> , p-<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> [p,g,<span class="hljs-built_in">pow</span>(g,a,p)],a<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m,pk</span>):<br>    k = random.randint(<span class="hljs-number">1</span>,p-<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;参数k的值为:%d&quot;</span>%k)<br>    c1 = <span class="hljs-built_in">pow</span>(g,k,p)<br>    c2 = (<span class="hljs-built_in">pow</span>(g_a,k,p) * m)%p<br>    <span class="hljs-keyword">return</span>  c1,c2 <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">c1,c2,sk</span>):<br>    v = <span class="hljs-built_in">pow</span>(c1,sk,p)<br>    m = c2*sympy.invert(v,p) % p<br>    <span class="hljs-keyword">return</span> m<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    file_name = <span class="hljs-string">&quot;secret0.txt&quot;</span><br>    f = <span class="hljs-built_in">open</span>(file_name)<br>    m = <span class="hljs-built_in">int</span>(f.readline())<br>    pk , sk = Gen_para(m)<br>    p,g,g_a = pk<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;素数p为%d&quot;</span>%p)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原根g为%d&quot;</span>%g)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;参数g^a为%d&quot;</span>%g_a)<br>    c1 , c2 = encrypt(m,pk)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密文c1为%d&quot;</span>%c1)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密文c2为%d&quot;</span>%c2)<br>    m_d = decrypt(c1,c2,sk)<br>    <span class="hljs-keyword">if</span> m == m_d:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密正确&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>离散对数困难问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中国剩余定理</title>
    <link href="/2022/11/04/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    <url>/2022/11/04/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="c7c92666d24c77eea7d8a062018cd8e91bc852e09b5f8bb737e48bc2cbbc078c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RSA加密系统的20年</title>
    <link href="/2022/10/29/RSA%E5%8A%A0%E5%AF%86%E7%B3%BB%E7%BB%9F%E7%9A%8420%E5%B9%B4/"/>
    <url>/2022/10/29/RSA%E5%8A%A0%E5%AF%86%E7%B3%BB%E7%BB%9F%E7%9A%8420%E5%B9%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="RSA加密系统的20年"><a href="#RSA加密系统的20年" class="headerlink" title="RSA加密系统的20年"></a>RSA加密系统的20年</h1><p><strong>原文：<a href="https://www.ams.org/notices/199902/boneh.pdf">Twenty Years of Attacks on the RSA Cryptosystem</a></strong></p><p><strong>作者：Dan Boneh@Stanford University(<a href="mailto:dabo@cs.stanford.edu">dabo@cs.stanford.edu</a>)</strong></p><p><strong>译者：Harper</strong></p><p>参考链接：</p><ul><li><a href="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_coppersmith_attack/#boneh-and-durfee-attack">Coppersmith 相关攻击 - CTF Wiki</a></li><li><a href="https://paper.seebug.org/727/">二十年以来对 RSA 密码系统攻击综述</a></li></ul><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>RSA密码系统由Ron Rivest, Adi Shamir和Len Adleman发明，在1977年8月的《科学美国人》杂志上首次公布。密码系统最常用于提供隐私和确保数字数据的真实性。目前，RSA被部署在许多商业系统中。它被网络服务器和浏览器用来保护网络传输，它被用来确保电子邮件的私密性和真实性，它被用来保护远程登录会话，它是电子信用卡支付系统的核心。简而言之，RSA常用于需要考虑数字数据安全性的应用程序中。</p><img src="/2022/10/29/RSA%E5%8A%A0%E5%AF%86%E7%B3%BB%E7%BB%9F%E7%9A%8420%E5%B9%B4/RSA%E4%BD%9C%E8%80%85.png" class="RSA是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的"><h2 id="RSA加密算法"><a href="#RSA加密算法" class="headerlink" title="RSA加密算法"></a>RSA加密算法</h2><p>我们遵循标准命名约定，使用Alice和Bob表示希望相互通信的两个通用方。我们使用Marvin来表示恶意的攻击者，希望窃听或篡改Alice和Bob之间的通信。</p><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><ul><li>两个质数$p和q$，再计算得到$N = p*q$</li><li>一个随机整数$e\in (1, φ(N))$,再计算$d \equiv e^{-1} \pmod{\varphi(N)}$</li><li>公钥pk = <N,e></li><li>私钥sk = <N,d></li></ul><h4 id="参数生成方法"><a href="#参数生成方法" class="headerlink" title="参数生成方法"></a>参数生成方法</h4><p><strong>第一步，随机选择两个不相等的质数p和q。</strong></p><blockquote><p><strong>Alice</strong>选择了61和53。（实际应用中，这两个质数越大，就越难破解。）</p></blockquote><p><strong>第二步，计算p和q的乘积N。</strong></p><blockquote><p>Alice就把61和53相乘。</p><p>N = 61×53 = 3233</p></blockquote><p>N的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位。</p><p><strong>第三步，计算N的欧拉函数φ(N)。</strong></p><blockquote><p>N是质数，则 φ(N)=N-1<br>N = p1 × p2<br>φ(N) = φ(p1p2) = φ(p1)φ(p2)<br>=&gt; φ(N) = (p-1)(q-1)</p></blockquote><p>Alice算出φ(3233)等于60×52，即3120。</p><p><strong>第四步，随机选择一个整数e，条件是1&lt; e &lt; φ(N)，且e与φ(N) 互质。</strong></p><p>Alice就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</p><p><strong>第五步，计算e对于φ(N)的模反元素d。</strong></p><p>所谓”模反元素”就是指有一个整数d，可以使得ed被φ(N)除的余数为1,故$d \equiv e^{-1} \pmod{\varphi(N)}$</p><blockquote><p>ed ≡ 1 (mod φ(N))</p></blockquote><p>这个式子等价于</p><blockquote><p>ed - 1 = kφ(N)</p></blockquote><p>于是，找到模反元素d，实质上就是对下面这个二元一次方程求解，使用拓展欧几里得算法即可</p><blockquote><p>ex + φ(N)y = 1</p></blockquote><p><strong>第六步，将N和e封装成公钥，N和d封装成私钥。</strong></p><p>在Alice的例子中，N=3233，e=17，d=2753，所以公钥就是 (3233,17)，私钥就是（3233, 2753）。</p><p>实际应用中，公钥和私钥的数据都采用<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/zh-cn/ASN.1">ASN.1</a>格式表达。</p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>密文是一个整数m属于乘法群$\mathbb{Z^<em>_{N}}$，即$m \in \mathbb{Z^</em>_{N}}$</p><p>计算密文ciphertext简称c，需要用到公钥pk=<N,e></p><blockquote><p>$c \equiv m*e \pmod{N}$</p></blockquote><p>Alice的公钥是 (3233, 17)，Bob的m假设是65，那么可以算出下面的等式：</p><blockquote><p>65^17 ≡ 2790 (mod 3233)</p></blockquote><p>于是，c等于2790，Bob就把2790发给了Alice。</p><h4 id="参数生成的效率"><a href="#参数生成的效率" class="headerlink" title="参数生成的效率"></a>参数生成的效率</h4><p>RSA密钥对的生成方法是随机选取两个$\cfrac{n}{2}$位素数并将其相乘得到N。然后，对于给定的加密$ e &lt; \varphi(N)$，使用扩展欧氏算法计算$d \equiv e^{-1} \pmod{N}$。</p><p>由于素数集非常密集，因此可以快速生成一个随机的$\cfrac{n}{2}$位素数，方法是选取随机的$\cfrac{n}{2}$位整数并用<strong>概率素数检验(如Fermat素性检验法)</strong>来检验每个整数的素数。</p><p>总体来说，生成素数还是比较快的，openssl生成一个1024位的素数在毫秒级即可实现。</p><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>Alice拿到Bob发来的2790以后，就用自己的私钥(3233, 2753) 进行解密。可以证明，下面的等式一定成立：</p><blockquote><p>$m \equiv c^d \pmod{N}$</p></blockquote><p>也就是说，c的d次方除以N的余数为m。现在，c等于2790，私钥是(3233, 2753)，那么，Alice算出</p><blockquote><p>2790^2753 ≡ 65 (mod 3233)</p></blockquote><p>因此，Alice知道了Bob加密前的原文就是65。</p><h3 id="解密正确性的证明"><a href="#解密正确性的证明" class="headerlink" title="解密正确性的证明"></a>解密正确性的证明</h3><p>这里需要使用<a href="https://zhuanlan.zhihu.com/p/35060143">Euler定理</a>,即</p><blockquote><p>如果正整数 n 和整数 a 互质，那么就有<br>$a^{\varphi(n)}≡1\pmod{n})$<br>其中<strong>欧拉函数</strong> φ(n) 是「小于 n 的正整数中和 n 互质的数」的个数</p></blockquote><p>下面进入正式的证明过程</p><blockquote><script type="math/tex; mode=display">c^d \equiv (m^e)^d \equiv m^{ed} \\\because e*d \equiv 1 \pmod{\varphi(N)} \\\therefore e*d=k*\varphi(N)+1 \; where \; k \in \mathbf{Z} \\\therefore m^{ed} \equiv m^{k*\varphi(N)+1} \equiv m^{k*\varphi(N)} *m \pmod{N} \\with\;the \; help \; of \; Euler \;theorem:m^{\varphi(N)} \equiv1 \pmod{N}\\so: \; m^{ed} \equiv m^{k*\varphi(N)+1} \equiv m^{k*\varphi(N)} *m \equiv  1*m\equiv m \pmod{N}</script></blockquote><h3 id="安全性分析"><a href="#安全性分析" class="headerlink" title="安全性分析"></a>安全性分析</h3><h4 id="数学难题-大整数的素数分解"><a href="#数学难题-大整数的素数分解" class="headerlink" title="数学难题-大整数的素数分解"></a>数学难题-大整数的素数分解</h4><p>我们可以看到，如果不知道d，就没有办法从c求出m。而前面已经说过，要知道d就必须分解N，这是极难做到的，因为至今为止大整数的素数分解依然是一个难题，所以RSA算法保证了通信安全</p><h4 id="语义安全-semantic-security"><a href="#语义安全-semantic-security" class="headerlink" title="语义安全-semantic security"></a>语义安全-semantic security</h4><p>RSA不是一个语义安全的加密算法，所谓语义安全，我们不能从密文中获得任何关于明文的信息，比如一段话的第一个字母，一段话中某个数字出现的次数等等。</p><p>拿RSA举例，我们可以很简单的获得m在N上的雅各比符号</p><h2 id="基本攻击"><a href="#基本攻击" class="headerlink" title="基本攻击"></a>基本攻击</h2><p>我们首先描述一些老的基本攻击，这些攻击说明了RSA的公然滥用情况。虽然存在许多这样的攻击，但我们仅举两个例子。</p><h3 id="Common-modulus-共模"><a href="#Common-modulus-共模" class="headerlink" title="Common modulus-共模"></a>Common modulus-共模</h3><p>为了避免为每个用户生成不同的模数$N=p*q$，人们可能希望一劳永逸地固定使用一个$N$，所有用户都使用相同的$N$。可信的中央机构可以向用户提供唯一的一对参数$<e_i,d_i>$，用户从其中生成公钥$<N,e_i>$和私钥$<N,d_i>$。</p><p>乍一看，这似乎行得通：为Alice准备的密文$c = m^{e_a} \pmod{N}$无法由Bob解密，因为Bob不知道$d_a$。但是，这是不正确的，由此产生的系统是不安全的。事实上，Bob可以使用他自己的指数$<e_b,d_b>$来分解模数$N$。一旦被分解，Bob就可以从她的公钥中计算出Alice的私钥。Simmons的这一观察结果表明，RSA模不应被一个以上的实体使用。</p><h3 id="Blinding-盲化"><a href="#Blinding-盲化" class="headerlink" title="Blinding-盲化"></a>Blinding-盲化</h3><p>设$<N,d>$是Bob的私钥，而$<N,e>$是相应的公钥。假设攻击者Marvin想要Bob的签名$m^d_{Bob} \pmod{N} \in \mathbb{Z^{\ast}_N}$。当然Bob不傻，他拒绝签署。但是Marvin可以尝试以下方法：他随机选择一个$r \in \mathbb{Z^{\ast}_N}$并设$m’ = r^e*m_{Bob}$。然后他让Bob在随机消息$m’$上签名。Bob可能愿意在看上去没什么问题的上签名，但是回想一下$S’=(m’)^d \mod{N}$，Marvin现在简单地计算$S = S’/r$就得到Bob在初始上的签名$S$。</p><p>事实上：</p><script type="math/tex; mode=display">S^e = (S')^e/(r^e)=(M')^{ed}/r^e \equiv M'/r^e = M \pmod{N}</script><p>这种称为盲化的技术使Marvin能够在他选择的消息上获得有效的签名，方法是让Bob在随机的”盲化”消息上签名。Bob不知道他实际在签名的是什么消息。由于大多数签名方案在签名之前对消息应用”单向散列”算法，因此此种攻击倒不是一个严重的问题。尽管我们将盲化描述为一种攻击，但它实际上是实现匿名数字现金所需的一个有用属性(可以用来购买商品的现金，但不会透露购买者的身份）</p><h2 id="Low-Private-Exponent-低解密指数攻击"><a href="#Low-Private-Exponent-低解密指数攻击" class="headerlink" title="Low Private Exponent-低解密指数攻击"></a>Low Private Exponent-低解密指数攻击</h2><h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h3><p>解密使用参数d，如果d非常小，那么可以用此方法进行解密。</p><p><strong>Theorem 2 (M. Wiener)</strong> 令 $N = pq$ ，这里 $q &lt; p &lt; 2q$ . 如果$ d &lt; 1/3  N^{1/4}$ 。 给定私钥对$<N,e>$ ，这里$e*d = 1 \mod{\varphi(N)}$ , Marvin 可以快速的复原参数 $d$.</p><blockquote><p>证明详见论文《<strong>TWENTY YEARS OF ATTACKS ON THE RSA CRYPTOSYSTEM</strong>》</p><p>最后给出结论：</p><script type="math/tex; mode=display">\left| \cfrac{e} {N} - \cfrac{k} {d} \right| \le \cfrac{1} {dN^{1/4} } < \cfrac{1}  {2d^2} \\这里k满足：k\varphi(N)-ed=1</script></blockquote><p>这是一个经典的逼近关系，两个分数在约束内非常逼近。首先$k\varphi(N)-ed=1$,所以$gcd(k,d)=1$，即k和d互素，分数$\cfrac{k} {d}$是一个最简分数。虽然d很小，但也只是相对于N（1024bits）比较小，实际上d也有上百比特的长度，所以$\cfrac{1} {2d^2}$是一个很小的数，由上面的不等式得到$\cfrac{e} {N}$是很接近于$\cfrac{k} {d}$的。大致的思路就是在$\cfrac{e}{N}$附近寻找一个小数，把小数按照分数的形式展开，分母就是我们想要找的参数$d$，但实际上并没有这么简单(论文中使用连分数展开)。</p><p>由于通常都是1024位，因此$d$必须至少256位长才能避免这种攻击。这对于诸如”智能卡”之类的低功耗设备来说是不幸的，因为小就能节省大量能耗。 然而，并不是毫无办法。Wiener提出了许多能够实现快速解密并且不易受其攻击影响的技术</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>使用python库owiener实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> owiener<br>e = <span class="hljs-number">3047442173541658754667464233797118324917469250436575767227172319344577259865313428705759330024959317716760816959590728238918140105663188172228696589411452947738069773833351725455888549656717874059636289036277785342126992626060696063089487811946920569580454880169977542532087635095357205433679009382368108273</span><br><br>n = <span class="hljs-number">135568509670260054049994954417860747085442883428459182441559553532993752593294067458983143521109377661295622146963670193783017382697726454953197805014428888491744355387957923382241961401063461549210355871385000347645387907568135032087942016502668629010859519249039662555733548461551175133582871220209515648241</span><br><br>d = owiener.attack(e, n)<br><br>m=<span class="hljs-number">123123123123123123123123123123123113212312312312</span><br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br>m_decrypted = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(m_decrypted)<br></code></pre></td></tr></table></figure><p>计算得到d的值为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">22299128035876669298809061693021648003426573977341841609779417036458441464337</span><br></code></pre></td></tr></table></figure><p>计算d的位数大概是<strong>254位</strong>,符合上面的分析，运算时间也是很快，用python基本秒出答案。</p><h2 id="Low-Private-Exponent-低加密指数攻击"><a href="#Low-Private-Exponent-低加密指数攻击" class="headerlink" title="Low Private Exponent-低加密指数攻击"></a>Low Private Exponent-低加密指数攻击</h2><p>为了减少加密或签名验证时间，习惯上使用一个小的公共指数。 e 的最小可能值为3，但为了击败某些攻击，建议使用$e = 2^{16} + 1 = 65537$。当使用65537时，签名验证需要 17 次乘法，而使用随机 $e &lt; \varphi(N)$ 时大约需要 1000 次乘法。所以对使用小e的攻击连绵不绝。</p><h3 id="Coppersmith理论"><a href="#Coppersmith理论" class="headerlink" title="Coppersmith理论"></a>Coppersmith理论</h3><p>对低公共指数 RSA 最有效的攻击是基于 Coppersmith的一个定理。 Coppersmith 定理有很多应用，这里只介绍其中的一部分。想要破解RSA，实际上可以看成一个解决函数零点的问题：</p><script type="math/tex; mode=display">x^e \equiv c \pmod{N}</script><p>解出这个函数，就是我们想要做的事情，后面关于多项式环的论述也都是基于这个思想。</p><h4 id="前置定理"><a href="#前置定理" class="headerlink" title="前置定理"></a>前置定理</h4><p>首先介绍一个理论：</p><p><strong>Theorem 3 (Coppersmith)</strong>  Let N be an integer and $f \in \mathbb{Z}[x]$ be a monic polynomial of degree d. Set $X = N ^{\frac{1} {d}- \epsilon } $ for some  $\epsilon \ge 0$. Then, given $ &lt; N , f &gt; $  Marvin can effciently find all integers  $\left| x_0 \right| &lt; X $  satisfying $f (x_0 ) = 0 \mod{N} $. The running time is dominated by the time it takes to run the LLL algorithm on a lattice of dimension O (w ) with $w = min(\frac{1} {\epsilon},log_2N )$.</p><font color="red">该定理提供了一种算法，可以有效地找方程$f(x) \equiv 0 \pmod{N}$ 的所有小于 $X = N^{\frac{1}{d}} $的根</font><p>再给出一个引理：</p><p>首先我们定义范数的概念，给出多项式$h(x)=\sum{a_ix^i} \in \mathbb{Z}$,定义范数$|h|^2 = \sum{|a_i|^2}$</p><p><strong><em>Lemma 4</em></strong> <em>Let $h(x) \in \mathbb{Z}$ be a polynomial of degree d and let X be a positive integer. Suppose $|h(xX )| &lt; \cfrac{N}{d^{1/2}} $ . If $|x_0| &lt; X$ satisfies $h(x_0) = 0 \mod{N}$ , then $h(x_0) = 0$ holds over the integers.</em></p><p>这个引理告诉我们：<font color="red">如果满足前置条件，$f(x) \equiv 0 \pmod{N}$的根，也是$f(x)=0$在整数域上的根</font>，但实际上函数$f(x)$一般都没有这么小的范数能满足前置条件。我们可以构造一个函数$h(x)=g(x)*f(x)$，这个函数$h(x)$应该有比较小的范数来满足前置条件。这相当于一个问题，找到$f(x),xf(x),x^2f(x),\dots,x^rf(x)$的一个线性组合，这个线性组合就是函数$h(x)$，且有较低的范数。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>前面我们介绍过，想要找到函数$h(x)$，实际上就是找一个线性组合，Dan Boneh在论文中叙述了一个基于格中LLL算法的解决方案。大家可以细看论文(作者关于格的理论已经忘得差不多了)，以后咱再补充。</p><h3 id="Hastad广播攻击"><a href="#Hastad广播攻击" class="headerlink" title="Hastad广播攻击"></a>Hastad广播攻击</h3><p>所谓广播，就是一个人把消息发给很多人，这里我们假设假设 Bob 希望将加密消息 M 发送给多个参与方 $P_1, P_2, \dots ,P_K $。每一方都有自己的 RSA 密钥 $pk=<N_i,e_i>$ 。我们假设 M 小于所有的$N_i$ ，即$M&lt;min(N_1,N2, \dots , N_K)$。为了发送 M，天真的Bob 使用每个公钥对其进行加密，并将第 i 个密文发送给 第i个参与方$P_i$。攻击者 Marvin 可以在 Bob 视线之外窃听连接并收集 k 个被传输的密文。</p><p>为了便于大家理解，我们举一个例子来说明：</p><p>我们假定所有公共指数$e_i=3$，如果参与方的个数$K \ge 3$那么marvin可以破解出明文M，事实上破解只需解下面一个方程即可：</p><script type="math/tex; mode=display">\begin{equation}    \begin{cases}    C_1 \equiv M^3 \mod{N_1}\\    C_2 \equiv M^3 \mod{N_2}\\    C_3 \equiv M^3 \mod{N_3}    \end{cases}\end{equation}</script><p>这里假定$gcd(N_i,N_j)=1$，即任意两个N之间互素，否则我们可以用$N_i/N_j$很简单的求出他们的公因子，从而复原出$p和q$，这个假定是有意义的。对于上面的方程，我们使用中国剩余定理(CRT)解出结果即为明文。</p>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fermat素性检验</title>
    <link href="/2022/10/29/Fermat%E7%B4%A0%E6%80%A7%E6%A3%80%E9%AA%8C/"/>
    <url>/2022/10/29/Fermat%E7%B4%A0%E6%80%A7%E6%A3%80%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="Fermat素性检验"><a href="#Fermat素性检验" class="headerlink" title="Fermat素性检验"></a>Fermat素性检验</h1><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><blockquote><ul><li>电脑：联想拯救者R9000p</li><li>cpu：AMD Ryzen 7 5800H</li><li>内存：16GB</li><li>操作系统：windows11</li><li>python版本：3.10</li></ul></blockquote><p>目标：</p><ul><li>掌握python基本函数库的使用</li><li>熟悉抽象代数的基本定理如Fermat小定理的使用</li><li>理解Fermat素性检验的原理，并编程实现</li><li>测试一些大数，以一定概率检验其素性</li></ul><h2 id="Fermat素性检验介绍"><a href="#Fermat素性检验介绍" class="headerlink" title="Fermat素性检验介绍"></a>Fermat素性检验介绍</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p><strong>费马素性检验</strong>是一种素数判定法则，利用<a href="https://baike.baidu.com/item/随机化算法/6233182?fromModule=lemma_inlink">随机化算法</a>判断一个数是<a href="https://baike.baidu.com/item/合数/49186?fromModule=lemma_inlink">合数</a>还是<em>可能是</em>素数。</p><h3 id="Fermat小定理"><a href="#Fermat小定理" class="headerlink" title="Fermat小定理"></a>Fermat小定理</h3><script type="math/tex; mode=display">对\forall(a,p)=1,p为质数\\\exists a^{p-1} \equiv 1 \pmod{p}</script><blockquote><p>证明：</p><p>$\{1,2,3,4…p-1\}$是p的既约剩余系</p><p>$\because a,p$互质</p><p>$\therefore \{a<em>1 , a</em>2 , a<em>3 , a</em>4 ,\dots,a*(p-1)\}$也为p的既约剩余系</p><p>$\therefore 1<em>2</em>3 \dots <em>(p-1)≡a</em>2<em>a</em>3<em>a……(p-1)</em>a  \pmod{p}$</p><p>化简得$a^{p-1} \equiv 1 \pmod{p}$</p></blockquote><h3 id="Fermat素性检验基本原理"><a href="#Fermat素性检验基本原理" class="headerlink" title="Fermat素性检验基本原理"></a>Fermat素性检验基本原理</h3><p>根据<a href="https://baike.baidu.com/item/费马小定理/4776158?fromModule=lemma_inlink">费马小定理</a>：如果<em>p</em>是素数，$1\leq a \leq p-1$</p><p>那么</p><script type="math/tex; mode=display">a^{p-1} \equiv 1 \pmod{p}</script><p>如果我们想知道<em>n</em>是否是素数，我们在中间选取<em>a</em>，看看上面等式是否成立。</p><ul><li>如果对于数值<em>a</em>等式不成立，那么<em>n</em>是合数。</li><li>如果有很多的<em>a</em>能够使等式成立，那么我们可以说<em>n</em>可能是素数，或者<a href="https://baike.baidu.com/item/伪素数/9262664?fromModule=lemma_inlink">伪素数</a>。</li></ul><p>在我们检验过程中，有可能我们选取的<em>a</em>都能让等式成立，然而n却是合数，所以最终得到的结果是，<font color = "red">我们以一定概率确定p是否为素数</font></p><h3 id="Fermat素性检验流程"><a href="#Fermat素性检验流程" class="headerlink" title="Fermat素性检验流程"></a>Fermat素性检验流程</h3><p>给定奇整数 $m\geq3$ 和安全参数 $k=5$<br>（1） 随机选取整数$a$,令$2\leq a \leq m-2$<br>（2） 计算$g=(a, m)$，如果$g =1$，转（3）；否则，跳出，m为合数<br>（3） 计算$r =a^{m-1}\pmod{m}$，如果r=1,m可能是素数，转（1）；否则，跳出，m为合数<br>（4） 重复上述过程k次，如果每次得到m可能为素数，则m为素数的概率为$1- \frac1{2^k}$ 。</p><img src="/2022/10/29/Fermat%E7%B4%A0%E6%80%A7%E6%A3%80%E9%AA%8C/%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class="流程图"><h2 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h2><p>需要导入math模块求最大公因数</p><p>需要导入random模块来产生随机数</p><p>求$r =a^{m-1}\pmod{m}$必须使用pow(a,num-1,num)函数一边乘法一边取模运算速度较快，不能先算$a^{m-1}$再取模，否则时间太长算不出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">num, k=<span class="hljs-number">7</span></span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>        a=random.randrange(<span class="hljs-number">2</span>,num-<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span> math.gcd(a, num)!=<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-number">1</span>-(<span class="hljs-number">0.2</span>)**k<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(a,num-<span class="hljs-number">1</span>,num)!=<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span> , <span class="hljs-number">1</span>-(<span class="hljs-number">0.2</span>)**k<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> , <span class="hljs-number">1</span>-(<span class="hljs-number">0.2</span>)**k<br>m1 = <span class="hljs-number">743476040059754298379331647007684224429004972336533937786799284757790400765316630522369642718204165253922832684184615021404737105614714107158733905598636152327037707290538422718453498125366750918857659068838460954633737911274770976191590193809661578032117496009853673140977556559136466107768672598883924301125589893895001253674886100289402530711221893</span><br>m2 = <span class="hljs-number">5434520625653357625890820149570485819447986258433769976634917091398967074086679540928507095017715540385352266035820823142060119390272763774034231321959236056764511968630360067353876686142517564224926196131349204754111599877101485686283117193149781387816214484583521923017500621725053392290279263586984207169423800476914654441473576611460323772832328657</span><br>m3 = <span class="hljs-number">876147742992673125957404768949712978720573116974723188491435550196169965040848206868200084918233743662847668000971402407461887306389122707315529364807593342507936022301657320206278702095378618110195051280478534126716517153056984269659532882692418682262081495725304483536777013188527470348249542840277926802938912332306310470632601156641005608958891</span><br>m4 = <span class="hljs-number">9876147742992673125957404768949712978720573116974723188491435550196169965040848206868200084918233743662847668000971402407461887306389122707315529364807593342507936022301657320206278702095378618110195051280478534126716517153056984269659532882692418682262081495725304483536777013188527470348249542840277926802938912332306310470632601156641005608958891</span><br><br>result , pr = is_prime(m4)<br><span class="hljs-keyword">if</span> result:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数以&quot;</span>,pr*<span class="hljs-number">100</span>,<span class="hljs-string">&quot;%的概率判定为素数&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数不是素数&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>latex常用数学公式</title>
    <link href="/2022/10/25/latex%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <url>/2022/10/25/latex%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="latex常用数学公式"><a href="#latex常用数学公式" class="headerlink" title="latex常用数学公式"></a>latex常用数学公式</h1><p>最近需要写一些文档，里面会有大量的公式，写出好看的公式的过程真的很治愈:cat:,这一期博客主要来介绍一些常用的latex公式，内容很干。<font color = "red">自己用markdown写的公式，渲染出来都是对的，但是放到博客上不知道怎么回事有一些奇奇怪怪的错误</font>，大家直接粘贴代码就行。</p><p>参考：<br><a href="https://artofproblemsolving.com/wiki/index.php/LaTeX:Symbols">https://artofproblemsolving.com/wiki/index.php/LaTeX:Symbols</a><br><a href="https://artofproblemsolving.com/wiki/index.php/LaTeX:Commands">https://artofproblemsolving.com/wiki/index.php/LaTeX:Commands</a></p><h2 id="各种类型的符号表"><a href="#各种类型的符号表" class="headerlink" title="各种类型的符号表"></a>各种类型的符号表</h2><h3 id="数集符号"><a href="#数集符号" class="headerlink" title="数集符号"></a>数集符号</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\mathbb{R}$</td><td style="text-align:center">\mathbb{R}</td><td style="text-align:center">$\mathbf{R}$</td><td style="text-align:center">\mathbf{R}</td><td style="text-align:center">$\mathcal{R}$</td><td style="text-align:center">\mathcal{R}</td><td style="text-align:center">$\mathfrak{R}$</td><td style="text-align:center">\mathfrak{R}</td></tr><tr><td style="text-align:center">$\mathbb{Z}$</td><td style="text-align:center">\mathbb{Z}</td><td style="text-align:center">$\mathbf{Z}$</td><td style="text-align:center">\mathbf{Z}</td><td style="text-align:center">$\mathcal{Z}$</td><td style="text-align:center">\mathcal{Z}</td><td style="text-align:center">$\mathfrak{Z}$</td><td style="text-align:center">\mathfrak{Z}</td></tr><tr><td style="text-align:center">$\mathbb{Q}$</td><td style="text-align:center">\mathbb{Q}</td><td style="text-align:center">$\mathbf{Q}$</td><td style="text-align:center">\mathbf{Q}</td><td style="text-align:center">$\mathcal{Q}$</td><td style="text-align:center">\mathcal{Q}</td><td style="text-align:center">$\mathfrak{Q}$</td><td style="text-align:center">\mathfrak{Q}</td></tr></tbody></table></div><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center"><script type="math/tex">\pm</script></td><td style="text-align:center">\pm</td><td style="text-align:center">$\mp$</td><td style="text-align:center">\mp</td><td style="text-align:center">$\times$</td><td style="text-align:center">\times</td></tr><tr><td style="text-align:center"><script type="math/tex">\div</script></td><td style="text-align:center">\div</td><td style="text-align:center">$\cdot$</td><td style="text-align:center">\cdot</td><td style="text-align:center">$\ast$</td><td style="text-align:center">\ast</td></tr><tr><td style="text-align:center"><script type="math/tex">\star</script></td><td style="text-align:center">\star</td><td style="text-align:center">$\dagger$</td><td style="text-align:center">\dagger</td><td style="text-align:center">$\ddagger$</td><td style="text-align:center">\ddagger</td></tr><tr><td style="text-align:center"><script type="math/tex">\amalg</script></td><td style="text-align:center">\amalg</td><td style="text-align:center">$\cap$</td><td style="text-align:center">\cap</td><td style="text-align:center">$\cup$</td><td style="text-align:center">\cup</td></tr><tr><td style="text-align:center">$\uplus$</td><td style="text-align:center">\uplus</td><td style="text-align:center">$\sqcap$</td><td style="text-align:center">\sqcap</td><td style="text-align:center">$\sqcup$</td><td style="text-align:center">\sqcup</td></tr><tr><td style="text-align:center">$\vee$</td><td style="text-align:center">\vee</td><td style="text-align:center">$\wedge$</td><td style="text-align:center">\wedge</td><td style="text-align:center">$\oplus$</td><td style="text-align:center">\oplus</td></tr><tr><td style="text-align:center">$\ominus$</td><td style="text-align:center">\ominus</td><td style="text-align:center">$\otimes$</td><td style="text-align:center">\otimes</td><td style="text-align:center">$\circ$</td><td style="text-align:center">\circ</td></tr><tr><td style="text-align:center">$\bullet$</td><td style="text-align:center">\bullet</td><td style="text-align:center">$\diamond$</td><td style="text-align:center">\diamond</td><td style="text-align:center">$\lhd$</td><td style="text-align:center">\lhd</td></tr><tr><td style="text-align:center">$\rhd$</td><td style="text-align:center">\rhd</td><td style="text-align:center">$\unlhd$</td><td style="text-align:center">\unlhd</td><td style="text-align:center">$\unrhd$</td><td style="text-align:center">\unrhd</td></tr><tr><td style="text-align:center">$\oslash$</td><td style="text-align:center">\oslash</td><td style="text-align:center">$\odot$</td><td style="text-align:center">\odot</td><td style="text-align:center">$\bigcirc$</td><td style="text-align:center">\bigcirc</td></tr><tr><td style="text-align:center">$\triangleleft$</td><td style="text-align:center">\triangleleft</td><td style="text-align:center">$\Diamond$</td><td style="text-align:center">\Diamond</td><td style="text-align:center">$\bigtriangleup$</td><td style="text-align:center">\bigtriangleup</td></tr><tr><td style="text-align:center">$\bigtriangledown$</td><td style="text-align:center">\bigtriangledown</td><td style="text-align:center">$\Box$</td><td style="text-align:center">\Box</td><td style="text-align:center">$\triangleright$</td><td style="text-align:center">\triangleright</td></tr><tr><td style="text-align:center">$\setminus$</td><td style="text-align:center">\setminus</td><td style="text-align:center">$\wr$</td><td style="text-align:center">\wr</td><td style="text-align:center">$\sqrt{x}$</td><td style="text-align:center">\sqrt{x}</td></tr><tr><td style="text-align:center">$x^{\circ}$</td><td style="text-align:center">x^{\circ}</td><td style="text-align:center">$\triangledown$</td><td style="text-align:center">\triangledown</td><td style="text-align:center">$\sqrt[n]{x}$</td><td style="text-align:center">\sqrt[n]{x}</td></tr><tr><td style="text-align:center">$a^x$</td><td style="text-align:center">a^x</td><td style="text-align:center">$a^{xyz}$</td><td style="text-align:center">a^{xyz}</td><td style="text-align:center">$a_x$</td><td style="text-align:center">a_x</td></tr></tbody></table></div><h3 id="关系符号"><a href="#关系符号" class="headerlink" title="关系符号"></a>关系符号</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\le$</td><td style="text-align:center">\le</td><td style="text-align:center">$\ge$</td><td style="text-align:center">\ge</td><td style="text-align:center">$\neq$</td><td style="text-align:center">\neq</td></tr><tr><td style="text-align:center">$\sim$</td><td style="text-align:center">\sim</td><td style="text-align:center">$\ll$</td><td style="text-align:center">\ll</td><td style="text-align:center">$\gg$</td><td style="text-align:center">\gg</td></tr><tr><td style="text-align:center">$\doteq$</td><td style="text-align:center">\doteq</td><td style="text-align:center">$\simeq$</td><td style="text-align:center">\simeq</td><td style="text-align:center">$\subset$</td><td style="text-align:center">\subset</td></tr><tr><td style="text-align:center">$\supset$</td><td style="text-align:center">\supset</td><td style="text-align:center">$\approx$</td><td style="text-align:center">\approx</td><td style="text-align:center">$\asymp$</td><td style="text-align:center">\asymp</td></tr><tr><td style="text-align:center">$\subseteq$</td><td style="text-align:center">\subseteq</td><td style="text-align:center">$\supseteq$</td><td style="text-align:center">\supseteq</td><td style="text-align:center">$\cong$</td><td style="text-align:center">\cong</td></tr><tr><td style="text-align:center">$\smile$</td><td style="text-align:center">\smile</td><td style="text-align:center">$\sqsubset$</td><td style="text-align:center">\sqsubset</td><td style="text-align:center">$\sqsupset$</td><td style="text-align:center">\sqsupset</td></tr><tr><td style="text-align:center">$\equiv$</td><td style="text-align:center">\equiv</td><td style="text-align:center">$\frown$</td><td style="text-align:center">\frown</td><td style="text-align:center">$\sqsubseteq$</td><td style="text-align:center">\sqsubseteq</td></tr><tr><td style="text-align:center">$\sqsupseteq$</td><td style="text-align:center">\sqsupseteq</td><td style="text-align:center">$\propto$</td><td style="text-align:center">\propto</td><td style="text-align:center">$\bowtie$</td><td style="text-align:center">\bowtie</td></tr><tr><td style="text-align:center">$\in$</td><td style="text-align:center">\in</td><td style="text-align:center">$\ni$</td><td style="text-align:center">\ni</td><td style="text-align:center">$\prec$</td><td style="text-align:center">\prec</td></tr><tr><td style="text-align:center">$\succ$</td><td style="text-align:center">\succ</td><td style="text-align:center">$\vdash$</td><td style="text-align:center">\vdash</td><td style="text-align:center">$\dashv$</td><td style="text-align:center">\dashv</td></tr><tr><td style="text-align:center">$\preceq$</td><td style="text-align:center">\preceq</td><td style="text-align:center">$\succeq$</td><td style="text-align:center">\succeq</td><td style="text-align:center">$\models$</td><td style="text-align:center">\models</td></tr><tr><td style="text-align:center">$\perp$</td><td style="text-align:center">\perp</td><td style="text-align:center">$\parallel$</td><td style="text-align:center">\parallel</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\mid$</td><td style="text-align:center">\mid</td><td style="text-align:center">$\bumpeq$</td><td style="text-align:center">\bumpeq</td><td style="text-align:center"></td></tr></tbody></table></div><p>关系符号前面加一个n，就可以变成这些关系符号的反义</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\nmid$</td><td style="text-align:center">\nmid</td><td style="text-align:center">$\nleq$</td><td style="text-align:center">\nleq</td><td style="text-align:center">$\ngeq$</td><td style="text-align:center">\ngeq</td></tr><tr><td style="text-align:center">$\nsim$</td><td style="text-align:center">\nsim</td><td style="text-align:center">$\ncong$</td><td style="text-align:center">\ncong</td><td style="text-align:center">$\nparallel$</td><td style="text-align:center">\nparallel</td></tr><tr><td style="text-align:center">$\not&lt;$</td><td style="text-align:center">\not&lt;</td><td style="text-align:center">$\not&gt;$</td><td style="text-align:center">\not&gt;</td><td style="text-align:center">$\not=$</td><td style="text-align:center">\not= or \neq or \ne</td></tr><tr><td style="text-align:center">$\not\le$</td><td style="text-align:center">\not\le</td><td style="text-align:center">$\not\ge$</td><td style="text-align:center">\not\ge</td><td style="text-align:center">$\not\sim$</td><td style="text-align:center">\not\sim</td></tr><tr><td style="text-align:center">$\not \approx$</td><td style="text-align:center">\not\approx</td><td style="text-align:center">$\not\cong$</td><td style="text-align:center">\not\cong</td><td style="text-align:center">$\not\equiv$</td><td style="text-align:center">\not\equiv</td></tr><tr><td style="text-align:center">$\not\parallel$</td><td style="text-align:center">\not\parallel</td><td style="text-align:center">$\nless$</td><td style="text-align:center">\nless</td><td style="text-align:center">$\ngtr$</td><td style="text-align:center">\ngtr</td></tr><tr><td style="text-align:center">$\lneq$</td><td style="text-align:center">\lneq</td><td style="text-align:center">$\gneq$</td><td style="text-align:center">\gneq</td><td style="text-align:center">$\lnsim$</td><td style="text-align:center">\lnsim</td></tr><tr><td style="text-align:center">$\lneqq$</td><td style="text-align:center">\lneqq</td><td style="text-align:center">$\gneqq$</td><td style="text-align:center">\gneqq</td><td style="text-align:center"></td></tr></tbody></table></div><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\alpha$</td><td style="text-align:center">\alpha</td><td style="text-align:center">$\beta$</td><td style="text-align:center">\beta</td><td style="text-align:center">$\gamma$</td><td style="text-align:center">\gamma</td><td style="text-align:center">$\delta$</td><td style="text-align:center">\delta</td></tr><tr><td style="text-align:center">$\epsilon$</td><td style="text-align:center">\epsilon</td><td style="text-align:center">$\varepsilon$</td><td style="text-align:center">\varepsilon</td><td style="text-align:center">$\zeta$</td><td style="text-align:center">\zeta</td><td style="text-align:center">$\eta$</td><td style="text-align:center">\eta</td></tr><tr><td style="text-align:center">$\theta$</td><td style="text-align:center">\theta</td><td style="text-align:center">$\vartheta$</td><td style="text-align:center">\vartheta</td><td style="text-align:center">$\iota$</td><td style="text-align:center">\iota</td><td style="text-align:center">$\kappa$</td><td style="text-align:center">\kappa</td></tr><tr><td style="text-align:center">$\lambda$</td><td style="text-align:center">\lambda</td><td style="text-align:center">$\mu$</td><td style="text-align:center">\mu</td><td style="text-align:center">$\nu$</td><td style="text-align:center">\nu</td><td style="text-align:center">$\xi$</td><td style="text-align:center">\xi</td></tr><tr><td style="text-align:center">$\pi$</td><td style="text-align:center">\pi</td><td style="text-align:center">$\varpi$</td><td style="text-align:center">\varpi</td><td style="text-align:center">$\rho$</td><td style="text-align:center">\rho</td><td style="text-align:center">$\varrho$</td><td style="text-align:center">\varrho</td></tr><tr><td style="text-align:center">$\sigma$</td><td style="text-align:center">\sigma</td><td style="text-align:center">$\varsigma$</td><td style="text-align:center">\varsigma</td><td style="text-align:center">$\tau$</td><td style="text-align:center">\tau</td><td style="text-align:center">$\upsilon$</td><td style="text-align:center">\upsilon</td></tr><tr><td style="text-align:center">$\phi$</td><td style="text-align:center">\phi</td><td style="text-align:center">$\varphi$</td><td style="text-align:center">\varphi</td><td style="text-align:center">$\chi$</td><td style="text-align:center">\chi</td><td style="text-align:center">$\psi$</td><td style="text-align:center">\psi</td></tr><tr><td style="text-align:center">$\omega$</td><td style="text-align:center">\omega</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><p>一些大写的希腊字母</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\Gamma$</td><td style="text-align:center">\Gamma</td><td style="text-align:center">$\Delta$</td><td style="text-align:center">\Delta</td><td style="text-align:center">$\Theta$</td><td style="text-align:center">\Theta</td><td style="text-align:center">$\Lambda$</td><td style="text-align:center">\Lambda</td></tr><tr><td style="text-align:center">$\Xi$</td><td style="text-align:center">\Xi</td><td style="text-align:center">$\Pi$</td><td style="text-align:center">\Pi</td><td style="text-align:center">$\Sigma$</td><td style="text-align:center">\Sigma</td><td style="text-align:center">$\Upsilon$</td><td style="text-align:center">\Upsilon</td></tr><tr><td style="text-align:center">$\Phi$</td><td style="text-align:center">\Phi</td><td style="text-align:center">$\Psi$</td><td style="text-align:center">\Psi</td><td style="text-align:center">$\Omega$</td><td style="text-align:center">\Omega</td><td style="text-align:center"></td></tr></tbody></table></div><h3 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\gets$</td><td style="text-align:center">\gets</td><td style="text-align:center">$\to$</td><td style="text-align:center">\to</td></tr><tr><td style="text-align:center">$\leftarrow$</td><td style="text-align:center">\leftarrow</td><td style="text-align:center">$\Leftarrow$</td><td style="text-align:center">\Leftarrow</td></tr><tr><td style="text-align:center">$\rightarrow$</td><td style="text-align:center">\rightarrow</td><td style="text-align:center">$\Rightarrow$</td><td style="text-align:center">\Rightarrow</td></tr><tr><td style="text-align:center">$\leftrightarrow$</td><td style="text-align:center">\leftrightarrow</td><td style="text-align:center">$\Leftrightarrow$</td><td style="text-align:center">\Leftrightarrow</td></tr><tr><td style="text-align:center">$\mapsto$</td><td style="text-align:center">\mapsto</td><td style="text-align:center">$\hookleftarrow$</td><td style="text-align:center">\hookleftarrow</td></tr><tr><td style="text-align:center">$\leftharpoonup$</td><td style="text-align:center">\leftharpoonup</td><td style="text-align:center">$\leftharpoondown$</td><td style="text-align:center">\leftharpoondown</td></tr><tr><td style="text-align:center">$\rightleftharpoons$</td><td style="text-align:center">\rightleftharpoons</td><td style="text-align:center">$\longleftarrow$</td><td style="text-align:center">\longleftarrow</td></tr><tr><td style="text-align:center">$\Longleftarrow$</td><td style="text-align:center">\Longleftarrow</td><td style="text-align:center">$\longrightarrow$</td><td style="text-align:center">\longrightarrow</td></tr><tr><td style="text-align:center">$\Longrightarrow$</td><td style="text-align:center">\Longrightarrow</td><td style="text-align:center">$\longleftrightarrow$</td><td style="text-align:center">\longleftrightarrow</td></tr><tr><td style="text-align:center">$\Longleftrightarrow$</td><td style="text-align:center">\Longleftrightarrow</td><td style="text-align:center">$\longmapsto$</td><td style="text-align:center">\longmapsto</td></tr><tr><td style="text-align:center">$\hookrightarrow$</td><td style="text-align:center">\hookrightarrow</td><td style="text-align:center">$\rightharpoonup$</td><td style="text-align:center">\rightharpoonup</td></tr><tr><td style="text-align:center">$\rightharpoondown$</td><td style="text-align:center">\rightharpoondown</td><td style="text-align:center">$\leadsto$</td><td style="text-align:center">\leadsto</td></tr><tr><td style="text-align:center">$\uparrow$</td><td style="text-align:center">\uparrow</td><td style="text-align:center">$\Uparrow$</td><td style="text-align:center">\Uparrow</td></tr><tr><td style="text-align:center">$\downarrow$</td><td style="text-align:center">\downarrow</td><td style="text-align:center">$\Downarrow$</td><td style="text-align:center">\Downarrow</td></tr><tr><td style="text-align:center">$\updownarrow$</td><td style="text-align:center">\updownarrow</td><td style="text-align:center">$\Updownarrow$</td><td style="text-align:center">\Updownarrow</td></tr><tr><td style="text-align:center">$\nearrow$</td><td style="text-align:center">\nearrow</td><td style="text-align:center">$\searrow$</td><td style="text-align:center">\searrow</td></tr><tr><td style="text-align:center">$\swarrow$</td><td style="text-align:center">\swarrow</td><td style="text-align:center">$\nwarrow$</td><td style="text-align:center">\nwarrow</td></tr><tr><td style="text-align:center">$\overrightarrow{AB}$</td><td style="text-align:center">\overrightarrow{AB}</td><td style="text-align:center">$\overleftarrow{AB}$</td><td style="text-align:center">\overleftarrow{AB}</td></tr><tr><td style="text-align:center">$\overleftrightarrow{AB}$</td><td style="text-align:center">\overleftrightarrow{AB}</td><td style="text-align:center"></td></tr></tbody></table></div><h3 id="一些奇奇怪怪的点"><a href="#一些奇奇怪怪的点" class="headerlink" title="一些奇奇怪怪的点"></a>一些奇奇怪怪的点</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\cdot$</td><td style="text-align:center">\cdot</td><td style="text-align:center">$\vdots$</td><td style="text-align:center">\vdots</td></tr><tr><td style="text-align:center">$\dots$</td><td style="text-align:center">\dots</td><td style="text-align:center">$\ddots$</td><td style="text-align:center">\ddots</td></tr><tr><td style="text-align:center">$\cdots$</td><td style="text-align:center">\cdots</td><td style="text-align:center"></td></tr></tbody></table></div><h3 id="字母上的强调符号"><a href="#字母上的强调符号" class="headerlink" title="字母上的强调符号"></a>字母上的强调符号</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\hat{x}$</td><td style="text-align:center">\hat{x}</td><td style="text-align:center">$\check{x}$</td><td style="text-align:center">\check{x}</td><td style="text-align:center">$\dot{x}$</td><td style="text-align:center">\dot{x}</td></tr><tr><td style="text-align:center">$\breve{x}$</td><td style="text-align:center">\breve{x}</td><td style="text-align:center">$\acute{x}$</td><td style="text-align:center">\acute{x}</td><td style="text-align:center">$\ddot{x}$</td><td style="text-align:center">\ddot{x}</td></tr><tr><td style="text-align:center">$\grave{x}$</td><td style="text-align:center">\grave{x}</td><td style="text-align:center">$\tilde{x}$</td><td style="text-align:center">\tilde{x}</td><td style="text-align:center">$\mathring{x}$</td><td style="text-align:center">\mathring{x}</td></tr><tr><td style="text-align:center">$\bar{x}$</td><td style="text-align:center">\bar{x}</td><td style="text-align:center">$\vec{x}$</td><td style="text-align:center">\vec{x}</td><td style="text-align:center"></td></tr></tbody></table></div><p>当对 $i$和$j$应用强调符号时，可以使用\imath和\jmath来防止点与重音发生干扰：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\vec{\jmath}$</td><td style="text-align:center">\vec{\jmath}</td><td style="text-align:center">$\tilde{\imath}$</td><td style="text-align:center">\tilde{\imath}</td></tr></tbody></table></div><p>\tilde 和 \hat 有一个更宽的版本，$\hat{7+x}$和$\widehat{7+x}$两种箭头是有区别的：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\widehat{7+x}$</td><td style="text-align:center">\widehat{7+x}</td><td style="text-align:center">$\widetilde{abc}$</td><td style="text-align:center">\widetilde{abc}</td></tr></tbody></table></div><h3 id="其他一些奇怪的符号"><a href="#其他一些奇怪的符号" class="headerlink" title="其他一些奇怪的符号"></a>其他一些奇怪的符号</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\infty$</td><td style="text-align:center">\infty</td><td style="text-align:center">$\triangle$</td><td style="text-align:center">\triangle</td><td style="text-align:center">$\angle$</td><td style="text-align:center">\angle</td></tr><tr><td style="text-align:center">$\aleph$</td><td style="text-align:center">\aleph</td><td style="text-align:center">$\hbar$</td><td style="text-align:center">\hbar</td><td style="text-align:center">$\imath$</td><td style="text-align:center">\imath</td></tr><tr><td style="text-align:center">$\jmath$</td><td style="text-align:center">\jmath</td><td style="text-align:center">$\ell$</td><td style="text-align:center">\ell</td><td style="text-align:center">$\wp$</td><td style="text-align:center">\wp</td></tr><tr><td style="text-align:center">$\Re$</td><td style="text-align:center">\Re</td><td style="text-align:center">$\Im$</td><td style="text-align:center">\Im</td><td style="text-align:center">$\mho$</td><td style="text-align:center">\mho</td></tr><tr><td style="text-align:center">$\prime$</td><td style="text-align:center">\prime</td><td style="text-align:center">$\emptyset$</td><td style="text-align:center">\emptyset</td><td style="text-align:center">$\nabla$</td><td style="text-align:center">\nabla</td></tr><tr><td style="text-align:center">$\surd$</td><td style="text-align:center">\surd</td><td style="text-align:center">$\partial$</td><td style="text-align:center">\partial</td><td style="text-align:center">$\top$</td><td style="text-align:center">\top</td></tr><tr><td style="text-align:center">$\bot$</td><td style="text-align:center">\bot</td><td style="text-align:center">$\vdash$</td><td style="text-align:center">\vdash</td><td style="text-align:center">$\dashv$</td><td style="text-align:center">\dashv</td></tr><tr><td style="text-align:center">$\forall$</td><td style="text-align:center">\forall</td><td style="text-align:center">$\exists$</td><td style="text-align:center">\exists</td><td style="text-align:center">$\neg$</td><td style="text-align:center">\neg</td></tr><tr><td style="text-align:center">$\flat$</td><td style="text-align:center">\flat</td><td style="text-align:center">$\natural$</td><td style="text-align:center">\natural</td><td style="text-align:center">$\sharp$</td><td style="text-align:center">\sharp</td></tr><tr><td style="text-align:center">$\backslash$</td><td style="text-align:center">\backslash</td><td style="text-align:center">$\Box$</td><td style="text-align:center">\Box</td><td style="text-align:center">$\Diamond$</td><td style="text-align:center">\Diamond</td></tr><tr><td style="text-align:center">$\clubsuit$</td><td style="text-align:center">\clubsuit</td><td style="text-align:center">$\diamondsuit$</td><td style="text-align:center">\diamondsuit</td><td style="text-align:center">$\heartsuit$</td><td style="text-align:center">\heartsuit</td></tr><tr><td style="text-align:center">$\spadesuit$</td><td style="text-align:center">\spadesuit</td><td style="text-align:center">$\Join$</td><td style="text-align:center">\Join</td><td style="text-align:center">$\blacksquare$</td><td style="text-align:center">\blacksquare</td></tr><tr><td style="text-align:center">$\diamondsuit$</td><td style="text-align:center">\diamondsuit</td><td style="text-align:center">$\mathbb{R}$</td><td style="text-align:center">\mathbb{R} (represents all real numbers)</td><td style="text-align:center">$\checkmark$</td><td style="text-align:center">\checkmark</td></tr><tr><td style="text-align:center">$\heartsuit$</td><td style="text-align:center">\heartsuit</td><td style="text-align:center">$\in$</td><td style="text-align:center">\in</td><td style="text-align:center">$\cup$</td><td style="text-align:center">\cup</td></tr><tr><td style="text-align:center">$\S$</td><td style="text-align:center">\S</td><td style="text-align:center">$\P$</td><td style="text-align:center">\P</td><td style="text-align:center">$\Vdash$</td><td style="text-align:center">\Vdash</td></tr><tr><td style="text-align:center">$\vDash$</td><td style="text-align:center">\vDash</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h3><p>In mathematics, sometimes we need to enclose expressions in brackets, braces or parentheses. Some of these work just as you’d imagine in LaTeX; type ( and ) for parentheses, [ and ] for brackets, and | and | for absolute value. However, other symbols have special commands:</p><div class="table-container"><table><thead><tr><th style="text-align:left">Symbol</th><th style="text-align:left">Command</th><th style="text-align:left">Symbol</th><th style="text-align:left">Command</th><th style="text-align:left">Symbol</th><th style="text-align:left">Command</th></tr></thead><tbody><tr><td style="text-align:left"><script type="math/tex">\{</script></td><td style="text-align:left">\{</td><td style="text-align:left"><script type="math/tex">\}</script></td><td style="text-align:left">\}</td><td style="text-align:left">$\</td><td style="text-align:left">$</td><td>\</td><td></td></tr><tr><td style="text-align:left">$\backslash$</td><td style="text-align:left">\backslash</td><td style="text-align:left">$\lfloor$</td><td style="text-align:left">\lfloor</td><td style="text-align:left">$\rfloor$</td><td style="text-align:left">\rfloor</td></tr><tr><td style="text-align:left">$\lceil$</td><td style="text-align:left">\lceil</td><td style="text-align:left">$\rceil$</td><td style="text-align:left">\rceil</td><td style="text-align:left">$\langle$</td><td style="text-align:left">\langle</td></tr><tr><td style="text-align:left">$\rangle$</td><td style="text-align:left">\rangle</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table></div><h2 id="编写数学公式"><a href="#编写数学公式" class="headerlink" title="编写数学公式"></a>编写数学公式</h2><h3 id="下标和上标"><a href="#下标和上标" class="headerlink" title="下标和上标"></a>下标和上标</h3><p>下标和上标（例如指数）可以分别使用下划线_和箭头^符号。</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$2^{2}$</td><td style="text-align:center">2^2</td><td style="text-align:center">$\textstyle a_i$</td><td style="text-align:center">a_i</td></tr><tr><td style="text-align:center">$\textstyle 2^{23}$</td><td style="text-align:center">2^{23}</td><td style="text-align:center">$\textstyle n_{i-1}$</td><td style="text-align:center">n_{i-1}</td></tr><tr><td style="text-align:center">$a^{i+1}_3$</td><td style="text-align:center">a^{i+1}_3</td><td style="text-align:center">$x^{3^2}$</td><td style="text-align:center">x\^{3^2}</td></tr><tr><td style="text-align:center">$2^{a_i}$</td><td style="text-align:center">2^{a_i}</td><td style="text-align:center">$2^a_i$</td><td style="text-align:center">2^a_i</td></tr></tbody></table></div><h3 id="分式"><a href="#分式" class="headerlink" title="分式"></a>分式</h3><p>使用\frac{分子}{分母}来进行渲染</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\frac {1}{2}$</td><td style="text-align:center">\frac{1}{2} or \frac12</td></tr><tr><td style="text-align:center">$\frac{2}{x+2}$</td><td style="text-align:center">\frac{2}{x+2}</td></tr><tr><td style="text-align:center">$\frac{1+\frac{1}{x}}{3x + 2}$</td><td style="text-align:center">\frac{1+\frac{1}{x}}{3x + 2}</td></tr></tbody></table></div><p>如果分号比较多，建议用\cfrac代替\frac，看起来更大也舒服很多</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\cfrac{2}{1+\cfrac{2}{1+\cfrac{2}{1+\cfrac{2}{1}}}}$</td><td style="text-align:center">\cfrac{2}{1+\cfrac{2}{1+\cfrac{2}{1+\cfrac{2}{1}}}}</td></tr><tr><td style="text-align:center">$\frac{2}{1+\frac{2}{1+\frac{2}{1+\frac{2}{1}}}}$</td><td style="text-align:center">\frac{2}{1+\frac{2}{1+\frac{2}{1+\frac{2}{1}}}}</td></tr></tbody></table></div><h3 id="累加，累乘，求极限，求对数一类的符号"><a href="#累加，累乘，求极限，求对数一类的符号" class="headerlink" title="累加，累乘，求极限，求对数一类的符号"></a>累加，累乘，求极限，求对数一类的符号</h3><p>分别使用命令\sum、\prod、\lim和\log。要表示下限和上限，或对数的底，使用_和^的方式与下标和上标相同。</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\textstyle \sum_{i=1}^{\infty}\frac{1}{i}$</td><td style="text-align:center">\sum_{i=1}^{\infty}\frac{1}{i}</td></tr><tr><td style="text-align:center">$\textstyle \prod_{n=1}^5\frac{n}{n-1}$</td><td style="text-align:center">\prod_{n=1}^5\frac{n}{n-1}</td></tr><tr><td style="text-align:center">$\textstyle \lim_{x\to\infty}\frac{1}{x}$</td><td style="text-align:center">\lim_{x\to\infty}\frac{1}{x}</td></tr><tr><td style="text-align:center">$\textstyle \lim\limits_{x\to\infty}\frac{1}{x}$</td><td style="text-align:center">\lim\limits_{x\to\infty}\frac{1}{x}</td></tr><tr><td style="text-align:center">$\textstyle \log_n n^2$</td><td style="text-align:center">\log_n n^2</td></tr></tbody></table></div><p>其中一些符号在latex的显示模式下更漂亮：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://latex.artofproblemsolving.com/3/6/6/3668f57e794d7f20c001ff9776563d1b5e03dfaa.png" alt="$\sum_{i=1}^{\infty}\frac{1}{i}$"></td><td style="text-align:center">\sum_{i=1}^{\infty}\frac{1}{i}</td></tr><tr><td style="text-align:center"><img src="https://latex.artofproblemsolving.com/3/8/6/38620f28e72b9e630220f8b9c5d90a077e9f140c.png" alt="$\prod_{n=1}^5\frac{n}{n-1}$"></td><td style="text-align:center">\prod_{n=1}^5\frac{n}{n-1}</td></tr><tr><td style="text-align:center"><img src="https://latex.artofproblemsolving.com/2/d/b/2db126637f5c59d21b8686443b38eb82bfee3935.png" alt="$\lim_{x\to\infty}\frac{1}{x}$"></td><td style="text-align:center">\lim_{x\to\infty}\frac{1}{x}</td></tr></tbody></table></div><h3 id="模运算符号"><a href="#模运算符号" class="headerlink" title="模运算符号"></a>模运算符号</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$9\equiv 3 \bmod{6}$</td><td style="text-align:center">9\equiv 3 \bmod{6}</td></tr><tr><td style="text-align:center">$9\equiv 3 \pmod{6}$</td><td style="text-align:center">9\equiv 3 \pmod{6}</td></tr><tr><td style="text-align:center">$9\equiv 3 \mod{6}$</td><td style="text-align:center">9\equiv 3 \mod{6}</td></tr><tr><td style="text-align:center">$9\equiv 3\pod{6}$</td><td style="text-align:center">9\equiv 3 \pod{6}</td></tr></tbody></table></div><h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\textstyle \cos$</td><td style="text-align:center">\cos</td><td style="text-align:center">$\textstyle \sin$</td><td style="text-align:center">\sin</td><td style="text-align:center">$\textstyle \tan$</td><td style="text-align:center">\tan</td></tr><tr><td style="text-align:center">$\sec$</td><td style="text-align:center">\sec</td><td style="text-align:center">$\textstyle \textstyle \csc$</td><td style="text-align:center">\csc</td><td style="text-align:center">$\textstyle \cot$</td><td style="text-align:center">\cot</td></tr><tr><td style="text-align:center">$\textstyle \arccos$</td><td style="text-align:center">\arccos</td><td style="text-align:center">$\textstyle \arcsin$</td><td style="text-align:center">\arcsin</td><td style="text-align:center">$\textstyle \arctan$</td><td style="text-align:center">\arctan</td></tr><tr><td style="text-align:center">$\textstyle \cosh$</td><td style="text-align:center">\cosh</td><td style="text-align:center">$\textstyle \sinh$</td><td style="text-align:center">\sinh</td><td style="text-align:center">$\textstyle \tanh$</td><td style="text-align:center">\tanh</td></tr><tr><td style="text-align:center">$\textstyle \coth$</td><td style="text-align:center">\coth</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p>我们可以使用\begin｛array｝…\end｛array｝命令构建数组或矩阵，并使用\left和\right来适当调整矩阵周围的分隔符大小</p><h3 id="其他符号"><a href="#其他符号" class="headerlink" title="其他符号"></a>其他符号</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\arg$</td><td style="text-align:center">\arg</td><td style="text-align:center">$\textstyle\deg$</td><td style="text-align:center">\deg</td><td style="text-align:center">$\textstyle\det$</td><td style="text-align:center">\det</td></tr><tr><td style="text-align:center">$\dim$</td><td style="text-align:center">\dim</td><td style="text-align:center">$\textstyle\exp$</td><td style="text-align:center">\exp</td><td style="text-align:center">$\textstyle\gcd$</td><td style="text-align:center">\gcd</td></tr><tr><td style="text-align:center">$\hom$</td><td style="text-align:center">\hom</td><td style="text-align:center">$\inf$</td><td style="text-align:center">\inf</td><td style="text-align:center">$\ker$</td><td style="text-align:center">\ker</td></tr><tr><td style="text-align:center">$\textstyle\lg$</td><td style="text-align:center">\lg</td><td style="text-align:center">$\liminf$</td><td style="text-align:center">\liminf</td><td style="text-align:center">$\limsup$</td><td style="text-align:center">\limsup</td></tr><tr><td style="text-align:center">$\textstyle\max$</td><td style="text-align:center">\max</td><td style="text-align:center">$\textstyle\min$</td><td style="text-align:center">\min</td><td style="text-align:center">$\Pr$</td><td style="text-align:center">\Pr</td></tr><tr><td style="text-align:center">$\sup$</td><td style="text-align:center">\sup</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><p>其中一些命令的下标方式与求和、乘积和对数相同。有些渲染在显示模式和常规数学模式下不同。</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\dim_x$</td><td style="text-align:center">\dim_x</td><td style="text-align:center">$\textstyle\gcd_x$</td><td style="text-align:center">\gcd_x</td><td style="text-align:center">$\inf_x$</td><td style="text-align:center">\inf_x</td></tr><tr><td style="text-align:center">$\liminf_x$</td><td style="text-align:center">\liminf_x</td><td style="text-align:center">$\limsup_x$</td><td style="text-align:center">\limsup_x</td><td style="text-align:center">$\textstyle\max_x$</td><td style="text-align:center">\max_x</td></tr><tr><td style="text-align:center">$\textstyle\min_x$</td><td style="text-align:center">\min_x</td><td style="text-align:center">$\Pr_x$</td><td style="text-align:center">\Pr_x</td><td style="text-align:center">$\sup_x$</td><td style="text-align:center">\sup_x</td></tr></tbody></table></div><h2 id="矩阵-1"><a href="#矩阵-1" class="headerlink" title="矩阵"></a>矩阵</h2><p>把矩阵单独放在一个板块是因为矩阵有很多花招，很多很多不同的表示</p><h3 id="1-数字周围无符号"><a href="#1-数字周围无符号" class="headerlink" title="1. 数字周围无符号"></a>1. 数字周围无符号</h3><h4 id="数字周围无符号"><a href="#数字周围无符号" class="headerlink" title="数字周围无符号"></a>数字周围无符号</h4><script type="math/tex; mode=display">\begin{matrix}    1&0\\    0&1\end{matrix}</script><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;matrix&#125;<br>    1<span class="hljs-built_in">&amp;</span>0<span class="hljs-keyword">\\</span><br>    0<span class="hljs-built_in">&amp;</span>1<br><span class="hljs-keyword">\end</span>&#123;matrix&#125;<br></code></pre></td></tr></table></figure><h4 id="小括号-p"><a href="#小括号-p" class="headerlink" title="小括号+p"></a>小括号+p</h4><script type="math/tex; mode=display">\begin{pmatrix}    1&0\\    0&1\end{pmatrix}</script><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;pmatrix&#125;<br>    1<span class="hljs-built_in">&amp;</span>0<span class="hljs-keyword">\\</span><br>    0<span class="hljs-built_in">&amp;</span>1<br><span class="hljs-keyword">\end</span>&#123;pmatrix&#125;<br></code></pre></td></tr></table></figure><h4 id="中括号-b"><a href="#中括号-b" class="headerlink" title="中括号+b"></a>中括号+b</h4><script type="math/tex; mode=display">\begin{bmatrix}    1&0\\    0&1\end{bmatrix}</script><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;bmatrix&#125;<br>    1<span class="hljs-built_in">&amp;</span>0<span class="hljs-keyword">\\</span><br>    0<span class="hljs-built_in">&amp;</span>1<br><span class="hljs-keyword">\end</span>&#123;bmatrix&#125;<br></code></pre></td></tr></table></figure><h4 id="大括号-B"><a href="#大括号-B" class="headerlink" title="大括号+B"></a>大括号+B</h4><script type="math/tex; mode=display">\begin{Bmatrix}    1&0\\    0&1\end{Bmatrix}</script><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;Bmatrix&#125;<br>    1<span class="hljs-built_in">&amp;</span>0<span class="hljs-keyword">\\</span><br>    0<span class="hljs-built_in">&amp;</span>1<br><span class="hljs-keyword">\end</span>&#123;Bmatrix&#125;<br></code></pre></td></tr></table></figure><h4 id="单竖线-v"><a href="#单竖线-v" class="headerlink" title="单竖线+v"></a>单竖线+v</h4><script type="math/tex; mode=display">\begin{vmatrix}    1&0\\    0&1\end{vmatrix}</script><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">\<span class="hljs-keyword">begin</span>&#123;vmatrix&#125;<br>    <span class="hljs-number">1</span>&amp;<span class="hljs-number">0</span>\\<br>    <span class="hljs-number">0</span>&amp;<span class="hljs-number">1</span><br>\<span class="hljs-keyword">end</span>&#123;vmatrix&#125;<br></code></pre></td></tr></table></figure><h4 id="双竖线-V"><a href="#双竖线-V" class="headerlink" title="双竖线+V"></a>双竖线+V</h4><script type="math/tex; mode=display">\begin{Vmatrix}    1&0\\    0&1\end{Vmatrix}</script><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;Vmatrix&#125;<br>    1<span class="hljs-built_in">&amp;</span>0<span class="hljs-keyword">\\</span><br>    0<span class="hljs-built_in">&amp;</span>1<br><span class="hljs-keyword">\end</span>&#123;Vmatrix&#125;<br></code></pre></td></tr></table></figure><h3 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h3><p>使用<br><code>\dots</code>水平<br><code>\vdots</code> 竖直<br><code>\ddots</code>倾斜<br><code>\hdotsfor&#123;&#125;</code>跨列省略号。大括号中填共几列<br>如：</p><script type="math/tex; mode=display">\begin{bmatrix}a_{11} & \dots & a_{1n}\\&\ddots & \vdots \\a_{n1}& & a_{nn}\end{bmatrix}</script><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;bmatrix&#125;<br>a<span class="hljs-built_in">_</span>&#123;11&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\dots</span> <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>&#123;1n&#125;<span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span><span class="hljs-keyword">\ddots</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\vdots</span> <span class="hljs-keyword">\\</span><br>a<span class="hljs-built_in">_</span>&#123;n1&#125;<span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>&#123;nn&#125;<br><span class="hljs-keyword">\end</span>&#123;bmatrix&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><h3 id="分块矩阵"><a href="#分块矩阵" class="headerlink" title="分块矩阵"></a>分块矩阵</h3><script type="math/tex; mode=display">\begin{bmatrix}\begin{matrix}1&0\\0&1\end{matrix}& \text{\Large 0}\\\text{\Large 0}&\begin{matrix}1&0\\0&1\end{matrix}\end{bmatrix}</script><blockquote><p><code>\Large 0</code>是比普通的零要大一些的</p></blockquote><p>上面矩阵的代码为：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;bmatrix&#125;<br><span class="hljs-keyword">\begin</span>&#123;matrix&#125;1<span class="hljs-built_in">&amp;</span>0<span class="hljs-keyword">\\</span>0<span class="hljs-built_in">&amp;</span>1<span class="hljs-keyword">\end</span>&#123;matrix&#125;<span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\text</span>&#123;<span class="hljs-keyword">\Large</span> 0&#125;<span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\text</span>&#123;<span class="hljs-keyword">\Large</span> 0&#125;<span class="hljs-built_in">&amp;</span><span class="hljs-keyword">\begin</span>&#123;matrix&#125;1<span class="hljs-built_in">&amp;</span>0<span class="hljs-keyword">\\</span>0<span class="hljs-built_in">&amp;</span>1<span class="hljs-keyword">\end</span>&#123;matrix&#125;<br><span class="hljs-keyword">\end</span>&#123;bmatrix&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><blockquote><p><code>\text</code>是在数学编辑模式下临时使用文本编辑，在公式中输入汉字都要使用此标签。分块矩阵就是矩阵的嵌套，仔细阅读代码就能理解 。</p></blockquote><h3 id="三角矩阵"><a href="#三角矩阵" class="headerlink" title="三角矩阵"></a>三角矩阵</h3><script type="math/tex; mode=display">\begin{bmatrix}a_{11}&a_{12} & \dots & a_{1n}\\&a_{22}&\dots&a_{2n}\\&&\ddots&\vdots\\&{\huge 0}&&a_{nn}\end{bmatrix}</script><p>具体代码如下</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;bmatrix&#125;<br>a<span class="hljs-built_in">_</span>&#123;11&#125;<span class="hljs-built_in">&amp;</span>a<span class="hljs-built_in">_</span>&#123;12&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\dots</span> <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>&#123;1n&#125;<span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span>a<span class="hljs-built_in">_</span>&#123;22&#125;<span class="hljs-built_in">&amp;</span><span class="hljs-keyword">\dots</span><span class="hljs-built_in">&amp;</span>a<span class="hljs-built_in">_</span>&#123;2n&#125;<span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span><span class="hljs-built_in">&amp;</span><span class="hljs-keyword">\ddots</span><span class="hljs-built_in">&amp;</span><span class="hljs-keyword">\vdots</span><span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span>&#123;<span class="hljs-keyword">\huge</span> 0&#125;<span class="hljs-built_in">&amp;</span><span class="hljs-built_in">&amp;</span>a<span class="hljs-built_in">_</span>&#123;nn&#125;<br><span class="hljs-keyword">\end</span>&#123;bmatrix&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><h3 id="方程组"><a href="#方程组" class="headerlink" title="方程组"></a>方程组</h3><p>方程组四舍五入也算半个矩阵吧</p><script type="math/tex; mode=display">\begin{equation}    \begin{cases}        l_{11}y_{1} = 1 \\        l_{21}y_{1} + l_{22}y_{2} = 0 \\         l_{31}y_{1} + l_{32}y_{2} + l_{33}y_{3} = 0 \\        l_{41}y_{1} + l_ {42}y_{2} + l_{43}y_{3} + l_{44}y_{4} = 0     \end{cases}\end{equation}</script><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;equation&#125;<br>    <span class="hljs-keyword">\begin</span>&#123;cases&#125;<br>        l<span class="hljs-built_in">_</span>&#123;11&#125;y<span class="hljs-built_in">_</span>&#123;1&#125; = 1 <span class="hljs-keyword">\\</span><br>        l<span class="hljs-built_in">_</span>&#123;21&#125;y<span class="hljs-built_in">_</span>&#123;1&#125; + l<span class="hljs-built_in">_</span>&#123;22&#125;y<span class="hljs-built_in">_</span>&#123;2&#125; = 0 <span class="hljs-keyword">\\</span> <br>        l<span class="hljs-built_in">_</span>&#123;31&#125;y<span class="hljs-built_in">_</span>&#123;1&#125; + l<span class="hljs-built_in">_</span>&#123;32&#125;y<span class="hljs-built_in">_</span>&#123;2&#125; + l<span class="hljs-built_in">_</span>&#123;33&#125;y<span class="hljs-built_in">_</span>&#123;3&#125; = 0 <span class="hljs-keyword">\\</span><br>        l<span class="hljs-built_in">_</span>&#123;41&#125;y<span class="hljs-built_in">_</span>&#123;1&#125; + l<span class="hljs-built_in">_</span> &#123;42&#125;y<span class="hljs-built_in">_</span>&#123;2&#125; + l<span class="hljs-built_in">_</span>&#123;43&#125;y<span class="hljs-built_in">_</span>&#123;3&#125; + l<span class="hljs-built_in">_</span>&#123;44&#125;y<span class="hljs-built_in">_</span>&#123;4&#125; = 0<br>     <span class="hljs-keyword">\end</span>&#123;cases&#125;<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>latex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu安装openssl库</title>
    <link href="/2022/10/21/ubuntu%E5%AE%89%E8%A3%85openssl%E5%BA%93/"/>
    <url>/2022/10/21/ubuntu%E5%AE%89%E8%A3%85openssl%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu18-04安装openssl库"><a href="#ubuntu18-04安装openssl库" class="headerlink" title="ubuntu18.04安装openssl库"></a>ubuntu18.04安装openssl库</h1><p>opensssl库是常用的加密函数库，主要有以下加密算法</p><blockquote><p>加密算法</p><ul><li>对称加密：指加密和解密使用相同密钥的加密算法。对称加密算法的优点在于加解密的高速度和使用长密钥时的难破解性。<br>常见的对称加密算法：DES、3DES、DESX、AES、RC4、RC5、RC6等 </li><li>非对称加密：指加密和解密使用不同密钥的加密算法，也称为公私钥加密。<br>常见的非对称加密算法：RSA、DSA（数字签名用）等</li><li>Hash算法：Hash算法它是一种单向算法，用户可以通过Hash算法对目标信息生成一段特定长度的唯一的Hash值，却不能通过这个Hash值逆向获得目标信息。<br>常见的Hash算法：MD2、MD4、MD5、SHA、SHA-1等</li></ul></blockquote><p>下面介绍openssl库的安装</p><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><h3 id="打开命令行终端"><a href="#打开命令行终端" class="headerlink" title="打开命令行终端"></a>打开命令行终端</h3><p>新手的话按ctrl+alt+t即可</p><h3 id="更新-下载编译器-make-和-gcc"><a href="#更新-下载编译器-make-和-gcc" class="headerlink" title="更新/下载编译器 make 和 gcc"></a>更新/下载编译器 make 和 gcc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install make gcc<br>sudo apt update<br>sudo apt upgrade<br></code></pre></td></tr></table></figure><h3 id="下载OpenSSL安装包"><a href="#下载OpenSSL安装包" class="headerlink" title="下载OpenSSL安装包"></a>下载OpenSSL安装包</h3><p>以版本openssl-1.1.1q版本为例，想要其他版本请到官网下载指定版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo wget https://www.openssl.org/source/openssl-1.1.1b.tar.gz<br></code></pre></td></tr></table></figure><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo tar -zxf openssl-1.1.1b.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> openssl-1.1.1b<br></code></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./config shared<br>sudo make<br>sudo make install<br></code></pre></td></tr></table></figure><h3 id="修改默认路径"><a href="#修改默认路径" class="headerlink" title="修改默认路径"></a>修改默认路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">ln</span> -s /usr/local/bin/openssl /usr/bin/openssl<br>sudo ldconfig<br></code></pre></td></tr></table></figure><h3 id="检查版本"><a href="#检查版本" class="headerlink" title="检查版本"></a>检查版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl version<br></code></pre></td></tr></table></figure><p>如果到这一步能输出版本信息</p><img src="/2022/10/21/ubuntu%E5%AE%89%E8%A3%85openssl%E5%BA%93/%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA.png" class="" title="版本信息"><h2 id="结果测试"><a href="#结果测试" class="headerlink" title="结果测试"></a>结果测试</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;openssl/bn.h&gt;</span></span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">timeval</span> timestart, timeend ;<br><span class="hljs-type">float</span> timeuse_encrypt = <span class="hljs-number">0</span> , timeuse_decrypt = <span class="hljs-number">0</span>, timeuse_add = <span class="hljs-number">0</span> , timeuse_mul = <span class="hljs-number">0</span> , timeuse = <span class="hljs-number">0</span> ;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;   BN_CTX *ctx = <span class="hljs-built_in">BN_CTX_new</span>();<br>    <span class="hljs-built_in">BN_CTX_start</span>(ctx);<br>    BIGNUM *r1 = <span class="hljs-built_in">BN_CTX_get</span>(ctx);<br>    BIGNUM *r2 = <span class="hljs-built_in">BN_CTX_get</span>(ctx);<br>    BIGNUM *n = <span class="hljs-built_in">BN_CTX_get</span>(ctx);<br>    BIGNUM *tmp = <span class="hljs-built_in">BN_CTX_get</span>(ctx);<br>    BIGNUM *dv = <span class="hljs-built_in">BN_CTX_get</span>(ctx);<br>    BIGNUM *rem = <span class="hljs-built_in">BN_CTX_get</span>(ctx);<br>    <span class="hljs-built_in">BN_rand</span>(r1, <span class="hljs-number">236896</span> , <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">BN_rand</span>(r2, <span class="hljs-number">236896</span> , <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">BN_rand</span>(n, <span class="hljs-number">236896</span> , <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timestart, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">//160*236896</span><br>    <span class="hljs-built_in">BN_mod_mul</span>(tmp , r1 , r2 , n  , ctx);<span class="hljs-comment">//a mod q = a/q*q</span><br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timeend, <span class="hljs-literal">NULL</span>);<br>    timeuse = <span class="hljs-number">1000000</span> * (timeend.tv_sec - timestart.tv_sec) + timeend.tv_usec - timestart.tv_usec;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nmod mul time:%f ms\n&quot;</span>, timeuse / <span class="hljs-number">1000</span>);<br>    <br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timestart, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">//160*236896</span><br>    <span class="hljs-built_in">BN_mul</span>(tmp , r1 , r2  , ctx);<span class="hljs-comment">//a mod q = a/q*q</span><br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timeend, <span class="hljs-literal">NULL</span>);<br>    timeuse = <span class="hljs-number">1000000</span> * (timeend.tv_sec - timestart.tv_sec) + timeend.tv_usec - timestart.tv_usec;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nmul time:%f ms\n&quot;</span>, timeuse / <span class="hljs-number">1000</span>);<br><br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timestart, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">//160*236896</span><br>    <span class="hljs-built_in">BN_div</span>(dv , rem , tmp ,n , ctx);<span class="hljs-comment">//r1*r2/n</span><br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timeend, <span class="hljs-literal">NULL</span>);<br>    timeuse = <span class="hljs-number">1000000</span> * (timeend.tv_sec - timestart.tv_sec) + timeend.tv_usec - timestart.tv_usec;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\ndiv time:%f ms\n&quot;</span>, timeuse / <span class="hljs-number">1000</span>);<br>    <br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timestart, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">//160*236896</span><br>    <span class="hljs-built_in">BN_mod</span>(tmp , tmp , n  , ctx);<span class="hljs-comment">//r1*r2/n mod q = a/q*q</span><br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timeend, <span class="hljs-literal">NULL</span>);<br>    timeuse = <span class="hljs-number">1000000</span> * (timeend.tv_sec - timestart.tv_sec) + timeend.tv_usec - timestart.tv_usec;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nmod time:%f ms\n&quot;</span>, timeuse / <span class="hljs-number">1000</span>);<br>    <span class="hljs-built_in">BN_CTX_end</span>(ctx);<br>    <span class="hljs-built_in">BN_CTX_free</span>(ctx);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h3><p>输入如下指令可以编译运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc test.c -lcrypto<br>./a.out<br></code></pre></td></tr></table></figure><p>可以看到如下输出结果</p><img src="/2022/10/21/ubuntu%E5%AE%89%E8%A3%85openssl%E5%BA%93/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" class="" title="测试结果">]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux操作系统</tag>
      
      <tag>环境配置</tag>
      
      <tag>c++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分组密码小笔记</title>
    <link href="/2022/10/18/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/10/18/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B0%8F%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="分组密码"><a href="#分组密码" class="headerlink" title="分组密码"></a>分组密码</h1><p>这学期学习现代密码学，密码的各种加密方式有很多细节，还有大体的框架，浅浅做个笔记记录一下，以后可以随时回顾。</p><p>参考博客：</p><ul><li><a href="https://blog.csdn.net/qq_28205153/article/details/55798628#commentBox">AES加密算法的详细介绍与实现</a></li><li><a href="https://www.cnblogs.com/starwolf/p/3365834.html">AES五种加密模式（CBC、ECB、CTR、OCF、CFB)</a></li></ul><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><h3 id="AES简介"><a href="#AES简介" class="headerlink" title="AES简介"></a>AES简介</h3><p>高级加密标准(AES,Advanced Encryption Standard)为最常见的对称<a href="https://so.csdn.net/so/search?q=加密算法&amp;spm=1001.2101.3001.7020">加密算法</a>(微信小程序加密传输就是用这个加密算法的)。对称加密算法也就是加密和解密用相同的密钥，具体的加密流程如下图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MDgyOTA5Njg4?x-oss-process=image/format,png" alt="加密流程图"><br>下面简单介绍下各个部分的作用与意义：</p><ul><li>明文P</li></ul><blockquote><p>没有经过加密的数据。</p></blockquote><ul><li>密钥K</li></ul><blockquote><p>用来加密明文的密码，在对称加密算法中，加密与解密的<a href="https://so.csdn.net/so/search?q=密钥&amp;spm=1001.2101.3001.7020">密钥</a>是相同的。密钥为接收方与发送方协商产生，但不可以直接在网络上传输，否则会导致密钥泄漏，通常是通过非对称加密算法加密密钥，然后再通过网络传输给对方，或者直接面对面商量密钥。密钥是绝对不可以泄漏的，否则会被攻击者还原密文，窃取机密数据。</p></blockquote><ul><li>AES加密函数</li></ul><blockquote><p>设<a href="https://so.csdn.net/so/search?q=AES加密&amp;spm=1001.2101.3001.7020">AES加密</a>函数为E，则 C = E(K, P),其中P为明文，K为密钥，C为密文。也就是说，把明文P和密钥K作为加密函数的参数输入，则加密函数E会输出密文C。</p></blockquote><ul><li>密文C</li></ul><blockquote><p>经加密函数处理后的数据</p></blockquote><ul><li>AES解密函数</li></ul><blockquote><p>设AES解密函数为D，则 P = D(K, C),其中C为密文，K为密钥，P为明文。也就是说，把密文C和密钥K作为解密函数的参数输入，则解密函数会输出明文P。</p></blockquote><p>在这里简单介绍下对称加密算法与非对称加密算法的区别。</p><ul><li>对称加密算法</li></ul><blockquote><p>加密和解密用到的密钥是相同的，这种加密方式加密速度非常快，适合经常发送数据的场合。缺点是密钥的传输比较麻烦。</p></blockquote><ul><li>非对称加密算法</li></ul><blockquote><p>加密和解密用的密钥是不同的，这种加密方式是用数学上的难解问题构造的，通常加密解密的速度比较慢，适合偶尔发送数据的场合。优点是密钥传输方便。常见的非对称加密算法为RSA、ECC和EIGamal。</p></blockquote><p>实际中，一般是通过RSA<a href="https://so.csdn.net/so/search?q=加密&amp;spm=1001.2101.3001.7020">加密</a>AES的密钥，传输到接收方，接收方解密得到AES密钥，然后发送方和接收方用AES密钥来通信。</p><p>本文下面AES原理的介绍参考自《现代密码学教程》，AES的实现在介绍完原理后开始。</p><h3 id="AES的基本结构"><a href="#AES的基本结构" class="headerlink" title="AES的基本结构"></a>AES的基本结构</h3><p>AES为分组密码，分组密码也就是把明文分成一组一组的，每组长度相等，每次加密一组数据，直到加密完整个明文。在AES标准规范中，分组长度只能是128位，也就是说，每个分组为16个字节（每个字节8位）。密钥的长度可以使用128位、192位或256位。密钥的长度不同，推荐加密轮数也不同，如下表所示：</p><div class="table-container"><table><thead><tr><th style="text-align:center">AES</th><th style="text-align:center">密钥长度（单位byte)</th><th style="text-align:center">分组长度(单位byte)</th><th style="text-align:center">加密轮数</th></tr></thead><tbody><tr><td style="text-align:center">AES-128</td><td style="text-align:center">16</td><td style="text-align:center">16</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">AES-192</td><td style="text-align:center">24</td><td style="text-align:center">16</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">AES-256</td><td style="text-align:center">32</td><td style="text-align:center">16</td><td style="text-align:center">14</td></tr></tbody></table></div><p>轮数在下面介绍，这里实现的是AES-128，也就是密钥的长度为128位，加密轮数为10轮。<br>上面说到，AES的加密公式为C = E(K,P)，在加密函数E中，会执行一个轮函数，并且执行10次这个轮函数，这个轮函数的前9次执行的操作是一样的，只有第10次有所不同。也就是说，一个明文分组会被加密10轮。AES的核心就是实现一轮中的所有操作。</p><p>AES的处理单位是字节，128位的输入明文分组P和输入密钥K都被分成16个字节，分别记为：</p><p>$P = P0\;P1 \dots P15$ </p><p>$K = K0\;K1 \dots K15$</p><p>如，明文分组为P = abcdefghijklmnop,其中的字符a对应P0，p对应P15。一般地，明文分组用字节为单位的正方形矩阵描述，称为状态矩阵。在算法的每一轮中，状态矩阵的内容不断发生变化，最后的结果作为密文输出。该矩阵中字节的排列顺序为从上到下、从左至右依次排列，如下图所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MTMyNTQ4OTA2?x-oss-process=image/format,png" alt="state"></p><p>现在假设明文分组P为”abcdefghijklmnop”，则对应上面生成的状态矩阵图如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MTM0NzIyODEy?x-oss-process=image/format,png" alt="state2"><br>上图中，0x61为字符a的十六进制表示。可以看到，明文经过AES加密后，已经面目全非。</p><ul><li>128位密钥也是用字节为单位的矩阵表示，矩阵的每一列被称为1个32位比特字。</li><li>通过密钥编排函数该密钥矩阵被扩展成一个44个字组成的序列$W[0],W[1], … ,W[43]$,序列中每个元素的大小为32bit</li><li>该序列的前4个元素$W[0],W[1],W[2],W[3]$是原始密钥，用于加密运算中的初始密钥加（下面介绍）</li><li>后面40个字分为10组，每组4个字（128比特）分别用于10轮加密运算中的轮密钥加，如下图所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MTUyNjM4MzI0?x-oss-process=image/format,png" alt="keystate"><br>上图中，设K = “abcdefghijklmnop”，则$K0 = a, K15 = p, W[0] = K0 |K1| K2 |K3 = “abcd”$。</li></ul><p>AES的整体结构如下图所示，其中的W[0,3]是指W[0]、W[1]、W[2]和W[3]串联组成的128位密钥。加密的第1轮到第9轮的轮函数一样，包括<font color="red">4个操作：字节代换、行位移、列混合和轮密钥加</font>。最后一轮迭代不执行列混合。另外，在第一轮迭代之前，先将明文和原始密钥进行一次异或加密操作。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MTYxMjAyNDg1?x-oss-process=image/format,png" alt="aes_struct"><br>上图也展示了AES解密过程，解密过程仍为10轮，每一轮的操作是加密操作的逆操作。由于AES的4个轮操作都是可逆的，因此，解密操作的一轮就是顺序执行逆行移位、逆字节代换、轮密钥加和逆列混合。同加密操作类似，最后一轮不执行逆列混合，在第1轮解密之前，要执行1次密钥加操作。</p><p>下面分别介绍AES中一轮的4个操作阶段，这4分操作阶段使输入位得到充分的混淆。</p><h3 id="AES加解密具体流程"><a href="#AES加解密具体流程" class="headerlink" title="AES加解密具体流程"></a>AES加解密具体流程</h3><h4 id="字节代换"><a href="#字节代换" class="headerlink" title="字节代换"></a>字节代换</h4><p>把该字节的高4位作为行值，低4位作为列值，取出S盒中对应的元素作为输出</p><h5 id="字节代换操作"><a href="#字节代换操作" class="headerlink" title="字节代换操作"></a>字节代换操作</h5><p>AES的字节代换其实就是一个简单的查表操作。AES定义了一个S盒和一个逆S盒。<br>AES的S盒：</p><div class="table-container"><table><thead><tr><th>行/列</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>0x63</td><td>0x7c</td><td>0x77</td><td>0x7b</td><td>0xf2</td><td>0x6b</td><td>0x6f</td><td>0xc5</td><td>0x30</td><td>0x01</td><td>0x67</td><td>0x2b</td><td>0xfe</td><td>0xd7</td><td>0xab</td><td>0x76</td></tr><tr><td>1</td><td>0xca</td><td>0x82</td><td>0xc9</td><td>0x7d</td><td>0xfa</td><td>0x59</td><td>0x47</td><td>0xf0</td><td>0xad</td><td>0xd4</td><td>0xa2</td><td>0xaf</td><td>0x9c</td><td>0xa4</td><td>0x72</td><td>0xc0</td></tr><tr><td>2</td><td>0xb7</td><td>0xfd</td><td>0x93</td><td>0x26</td><td>0x36</td><td>0x3f</td><td>0xf7</td><td>0xcc</td><td>0x34</td><td>0xa5</td><td>0xe5</td><td>0xf1</td><td>0x71</td><td>0xd8</td><td>0x31</td><td>0x15</td></tr><tr><td>3</td><td>0x04</td><td>0xc7</td><td>0x23</td><td>0xc3</td><td>0x18</td><td>0x96</td><td>0x05</td><td>0x9a</td><td>0x07</td><td>0x12</td><td>0x80</td><td>0xe2</td><td>0xeb</td><td>0x27</td><td>0xb2</td><td>0x75</td></tr><tr><td>4</td><td>0x09</td><td>0x83</td><td>0x2c</td><td>0x1a</td><td>0x1b</td><td>0x6e</td><td>0x5a</td><td>0xa0</td><td>0x52</td><td>0x3b</td><td>0xd6</td><td>0xb3</td><td>0x29</td><td>0xe3</td><td>0x2f</td><td>0x84</td></tr><tr><td>5</td><td>0x53</td><td>0xd1</td><td>0x00</td><td>0xed</td><td>0x20</td><td>0xfc</td><td>0xb1</td><td>0x5b</td><td>0x6a</td><td>0xcb</td><td>0xbe</td><td>0x39</td><td>0x4a</td><td>0x4c</td><td>0x58</td><td>0xcf</td></tr><tr><td>6</td><td>0xd0</td><td>0xef</td><td>0xaa</td><td>0xfb</td><td>0x43</td><td>0x4d</td><td>0x33</td><td>0x85</td><td>0x45</td><td>0xf9</td><td>0x02</td><td>0x7f</td><td>0x50</td><td>0x3c</td><td>0x9f</td><td>0xa8</td></tr><tr><td>7</td><td>0x51</td><td>0xa3</td><td>0x40</td><td>0x8f</td><td>0x92</td><td>0x9d</td><td>0x38</td><td>0xf5</td><td>0xbc</td><td>0xb6</td><td>0xda</td><td>0x21</td><td>0x10</td><td>0xff</td><td>0xf3</td><td>0xd2</td></tr><tr><td>8</td><td>0xcd</td><td>0x0c</td><td>0x13</td><td>0xec</td><td>0x5f</td><td>0x97</td><td>0x44</td><td>0x17</td><td>0xc4</td><td>0xa7</td><td>0x7e</td><td>0x3d</td><td>0x64</td><td>0x5d</td><td>0x19</td><td>0x73</td></tr><tr><td>9</td><td>0x60</td><td>0x81</td><td>0x4f</td><td>0xdc</td><td>0x22</td><td>0x2a</td><td>0x90</td><td>0x88</td><td>0x46</td><td>0xee</td><td>0xb8</td><td>0x14</td><td>0xde</td><td>0x5e</td><td>0x0b</td><td>0xdb</td></tr><tr><td>A</td><td>0xe0</td><td>0x32</td><td>0x3a</td><td>0x0a</td><td>0x49</td><td>0x06</td><td>0x24</td><td>0x5c</td><td>0xc2</td><td>0xd3</td><td>0xac</td><td>0x62</td><td>0x91</td><td>0x95</td><td>0xe4</td><td>0x79</td></tr><tr><td>B</td><td>0xe7</td><td>0xc8</td><td>0x37</td><td>0x6d</td><td>0x8d</td><td>0xd5</td><td>0x4e</td><td>0xa9</td><td>0x6c</td><td>0x56</td><td>0xf4</td><td>0xea</td><td>0x65</td><td>0x7a</td><td>0xae</td><td>0x08</td></tr><tr><td>C</td><td>0xba</td><td>0x78</td><td>0x25</td><td>0x2e</td><td>0x1c</td><td>0xa6</td><td>0xb4</td><td>0xc6</td><td>0xe8</td><td>0xdd</td><td>0x74</td><td>0x1f</td><td>0x4b</td><td>0xbd</td><td>0x8b</td><td>0x8a</td></tr><tr><td>D</td><td>0x70</td><td>0x3e</td><td>0xb5</td><td>0x66</td><td>0x48</td><td>0x03</td><td>0xf6</td><td>0x0e</td><td>0x61</td><td>0x35</td><td>0x57</td><td>0xb9</td><td>0x86</td><td>0xc1</td><td>0x1d</td><td>0x9e</td></tr><tr><td>E</td><td>0xe1</td><td>0xf8</td><td>0x98</td><td>0x11</td><td>0x69</td><td>0xd9</td><td>0x8e</td><td>0x94</td><td>0x9b</td><td>0x1e</td><td>0x87</td><td>0xe9</td><td>0xce</td><td>0x55</td><td>0x28</td><td>0xdf</td></tr><tr><td>F</td><td>0x8c</td><td>0xa1</td><td>0x89</td><td>0x0d</td><td>0xbf</td><td>0xe6</td><td>0x42</td><td>0x68</td><td>0x41</td><td>0x99</td><td>0x2d</td><td>0x0f</td><td>0xb0</td><td>0x54</td><td>0xbb</td><td>0x16</td></tr></tbody></table></div><p>状态矩阵中的元素按照下面的方式映射为一个新的字节：把该字节的高4位作为行值，低4位作为列值，取出S盒或者逆S盒中对应的行的元素作为输出。例如，加密时，输出的字节S1为0x12,则查S盒的第0x01行和0x02列，得到值0xc9,然后替换S1原有的0x12为0xc9。状态矩阵经字节代换后的图如下：<br><img src="https://img-blog.csdnimg.cn/20181213112210707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4MjA1MTUz,size_16,color_FFFFFF,t_70" alt="字节变换"></p><h5 id="字节代换逆操作"><a href="#字节代换逆操作" class="headerlink" title="字节代换逆操作"></a>字节代换逆操作</h5><p>逆字节代换也就是查逆S盒来变换，逆S盒如下：</p><div class="table-container"><table><thead><tr><th>列 行</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>0x52</td><td>0x09</td><td>0x6a</td><td>0xd5</td><td>0x30</td><td>0x36</td><td>0xa5</td><td>0x38</td><td>0xbf</td><td>0x40</td><td>0xa3</td><td>0x9e</td><td>0x81</td><td>0xf3</td><td>0xd7</td><td>0xfb</td></tr><tr><td>1</td><td>0x7c</td><td>0xe3</td><td>0x39</td><td>0x82</td><td>0x9b</td><td>0x2f</td><td>0xff</td><td>0x87</td><td>0x34</td><td>0x8e</td><td>0x43</td><td>0x44</td><td>0xc4</td><td>0xde</td><td>0xe9</td><td>0xcb</td></tr><tr><td>2</td><td>0x54</td><td>0x7b</td><td>0x94</td><td>0x32</td><td>0xa6</td><td>0xc2</td><td>0x23</td><td>0x3d</td><td>0xee</td><td>0x4c</td><td>0x95</td><td>0x0b</td><td>0x42</td><td>0xfa</td><td>0xc3</td><td>0x4e</td></tr><tr><td>3</td><td>0x08</td><td>0x2e</td><td>0xa1</td><td>0x66</td><td>0x28</td><td>0xd9</td><td>0x24</td><td>0xb2</td><td>0x76</td><td>0x5b</td><td>0xa2</td><td>0x49</td><td>0x6d</td><td>0x8b</td><td>0xd1</td><td>0x25</td></tr><tr><td>4</td><td>0x72</td><td>0xf8</td><td>0xf6</td><td>0x64</td><td>0x86</td><td>0x68</td><td>0x98</td><td>0x16</td><td>0xd4</td><td>0xa4</td><td>0x5c</td><td>0xcc</td><td>0x5d</td><td>0x65</td><td>0xb6</td><td>0x92</td></tr><tr><td>5</td><td>0x6c</td><td>0x70</td><td>0x48</td><td>0x50</td><td>0xfd</td><td>0xed</td><td>0xb9</td><td>0xda</td><td>0x5e</td><td>0x15</td><td>0x46</td><td>0x57</td><td>0xa7</td><td>0x8d</td><td>0x9d</td><td>0x84</td></tr><tr><td>6</td><td>0x90</td><td>0xd8</td><td>0xab</td><td>0x00</td><td>0x8c</td><td>0xbc</td><td>0xd3</td><td>0x0a</td><td>0xf7</td><td>0xe4</td><td>0x58</td><td>0x05</td><td>0xb8</td><td>0xb3</td><td>0x45</td><td>0x06</td></tr><tr><td>7</td><td>0xd0</td><td>0x2c</td><td>0x1e</td><td>0x8f</td><td>0xca</td><td>0x3f</td><td>0x0f</td><td>0x02</td><td>0xc1</td><td>0xaf</td><td>0xbd</td><td>0x03</td><td>0x01</td><td>0x13</td><td>0x8a</td><td>0x6b</td></tr><tr><td>8</td><td>0x3a</td><td>0x91</td><td>0x11</td><td>0x41</td><td>0x4f</td><td>0x67</td><td>0xdc</td><td>0xea</td><td>0x97</td><td>0xf2</td><td>0xcf</td><td>0xce</td><td>0xf0</td><td>0xb4</td><td>0xe6</td><td>0x73</td></tr><tr><td>9</td><td>0x96</td><td>0xac</td><td>0x74</td><td>0x22</td><td>0xe7</td><td>0xad</td><td>0x35</td><td>0x85</td><td>0xe2</td><td>0xf9</td><td>0x37</td><td>0xe8</td><td>0x1c</td><td>0x75</td><td>0xdf</td><td>0x6e</td></tr><tr><td>A</td><td>0x47</td><td>0xf1</td><td>0x1a</td><td>0x71</td><td>0x1d</td><td>0x29</td><td>0xc5</td><td>0x89</td><td>0x6f</td><td>0xb7</td><td>0x62</td><td>0x0e</td><td>0xaa</td><td>0x18</td><td>0xbe</td><td>0x1b</td></tr><tr><td>B</td><td>0xfc</td><td>0x56</td><td>0x3e</td><td>0x4b</td><td>0xc6</td><td>0xd2</td><td>0x79</td><td>0x20</td><td>0x9a</td><td>0xdb</td><td>0xc0</td><td>0xfe</td><td>0x78</td><td>0xcd</td><td>0x5a</td><td>0xf4</td></tr><tr><td>C</td><td>0x1f</td><td>0xdd</td><td>0xa8</td><td>0x33</td><td>0x88</td><td>0x07</td><td>0xc7</td><td>0x31</td><td>0xb1</td><td>0x12</td><td>0x10</td><td>0x59</td><td>0x27</td><td>0x80</td><td>0xec</td><td>0x5f</td></tr><tr><td>D</td><td>0x60</td><td>0x51</td><td>0x7f</td><td>0xa9</td><td>0x19</td><td>0xb5</td><td>0x4a</td><td>0x0d</td><td>0x2d</td><td>0xe5</td><td>0x7a</td><td>0x9f</td><td>0x93</td><td>0xc9</td><td>0x9c</td><td>0xef</td></tr><tr><td>E</td><td>0xa0</td><td>0xe0</td><td>0x3b</td><td>0x4d</td><td>0xae</td><td>0x2a</td><td>0xf5</td><td>0xb0</td><td>0xc8</td><td>0xeb</td><td>0xbb</td><td>0x3c</td><td>0x83</td><td>0x53</td><td>0x99</td><td>0x61</td></tr><tr><td>F</td><td>0x17</td><td>0x2b</td><td>0x04</td><td>0x7e</td><td>0xba</td><td>0x77</td><td>0xd6</td><td>0x26</td><td>0xe1</td><td>0x69</td><td>0x14</td><td>0x63</td><td>0x55</td><td>0x21</td><td>0x0c</td><td>0x7d</td></tr></tbody></table></div><h4 id="行移位"><a href="#行移位" class="headerlink" title="行移位"></a>行移位</h4><h5 id="行移位操作"><a href="#行移位操作" class="headerlink" title="行移位操作"></a>行移位操作</h5><p>行移位是一个简单的左循环移位操作。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节，如下图所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MTc0MDE1MTY3?x-oss-process=image/format,png" alt="shiftRows"></p><h5 id="行移位的逆变换"><a href="#行移位的逆变换" class="headerlink" title="行移位的逆变换"></a>行移位的逆变换</h5><p>行移位的逆变换是将状态矩阵中的每一行执行相反的移位操作，例如AES-128中，状态矩阵的第0行右移0字节，第1行右移1字节，第2行右移2字节，第3行右移3字节。</p><h4 id="列混合"><a href="#列混合" class="headerlink" title="列混合"></a>列混合</h4><h5 id="列混合操作"><a href="#列混合操作" class="headerlink" title="列混合操作"></a>列混合操作</h5><p>列混合变换是通过矩阵相乘来实现的，经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵，如下图的公式所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MjAzMzQ2NDM2?x-oss-process=image/format,png" alt="col"></p><p>状态矩阵中的第j列(0 ≤j≤3)的列混合可以表示为下图所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MjAzNzQyNTE2?x-oss-process=image/format,png" alt="col2"></p><p>其中，矩阵元素的乘法和加法都是定义在基于$GF(2^8)$上的二元运算,并不是通常意义上的乘法和加法。这里涉及到一些信息安全上的数学知识，不过不懂这些知识也行。其实这种二元运算的加法等价于两个字节的异或，乘法则复杂一点。对于一个8位的二进制数来说，使用域上的乘法乘以(00000010)等价于左移1位(低位补0)后，再根据情况同(00011011)进行异或运算，设$S1 = (a7 ,a6, a5, a4, a3, a2 ,a1,a0)$，刚$0x02 * S1$如下图所示：</p><script type="math/tex; mode=display">(00000010)* (a7 ,a6, a5, a4, a3, a2 ,a1,a0)=\begin{equation}    \begin{cases}       (a6, a5, a4, a3, a2 ,a1,a0) ,a_7 = 0\\       (a6, a5, a4, a3, a2 ,a1,a0) \oplus (00011011),a_7 = 1\\     \end{cases}\end{equation}</script><p>也就是说，如果a7为1，则进行异或运算，否则不进行。<br>类似地，乘以(00000100)可以拆分成两次乘以(00000010)的运算：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MjA1NjAxNjgz?x-oss-process=image/format,png" alt="col4"><br>乘以(0000 0011)可以拆分成先分别乘以(0000 0001)和(0000 0010)，再将两个乘积异或：<br><img src="https://img-blog.csdnimg.cn/20210216120331436.png#pic_center" alt=" "></p><p>因此，我们只需要实现乘以2的函数，其他数值的乘法都可以通过组合来实现。<br>下面举个具体的例子,输入的状态矩阵如下：</p><div class="table-container"><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>C9</td><td>E5</td><td>FD</td><td>2B</td></tr><tr><td>7A</td><td>F2</td><td>78</td><td>6E</td></tr><tr><td>63</td><td>9C</td><td>26</td><td>67</td></tr><tr><td>B0</td><td>A7</td><td>82</td><td>E5</td></tr></tbody></table></div><p>下面，进行列混合运算：<br>以第一列的运算为例：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MjEzNzQ3OTY1?x-oss-process=image/format,png" alt="col7"><br>其它列的计算就不列举了，列混合后生成的新状态矩阵如下：</p><div class="table-container"><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>D4</td><td>E7</td><td>CD</td><td>66</td></tr><tr><td>28</td><td>02</td><td>E5</td><td>BB</td></tr><tr><td>BE</td><td>C6</td><td>D6</td><td>BF</td></tr><tr><td>22</td><td>0F</td><td>DF</td><td>A5</td></tr></tbody></table></div><h5 id="列混合逆运算"><a href="#列混合逆运算" class="headerlink" title="列混合逆运算"></a>列混合逆运算</h5><p>逆向列混合变换可由下图的矩阵乘法定义：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MjExMTM5NzUy?x-oss-process=image/format,png" alt="col6"><br>可以验证，逆变换矩阵同正变换矩阵的乘积恰好为单位矩阵。</p><h4 id="轮密钥加"><a href="#轮密钥加" class="headerlink" title="轮密钥加"></a>轮密钥加</h4><p>轮密钥加是将128位轮密钥Ki同状态矩阵中的数据进行逐位异或操作，如下图所示。其中，密钥Ki中每个字W[4i],W[4i+1],W[4i+2],W[4i+3]为32位比特字，包含4个字节，他们的生成算法下面在下面介绍。轮密钥加过程可以看成是字逐位异或的结果，也可以看成字节级别或者位级别的操作。也就是说，可以看成S0 S1 S2 S3 组成的32位字与W[4i]的异或运算。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjIwMDgwNTEyMDg2?x-oss-process=image/format,png" alt="roundadd"><br>轮密钥加的逆运算同正向的轮密钥加运算完全一致，这是因为异或的逆操作是其自身。轮密钥加非常简单，但却能够影响S数组中的每一位。</p><h4 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h4><p>AES首先将初始密钥输入到一个4*4的状态矩阵中，如下图所示。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjIwMDgyMzE2NzM2?x-oss-process=image/format,png" alt="keyextends"></p><ul><li><p>这个4*4矩阵的每一列的4个字节组成一个字，矩阵4列的4个字依次命名为W[0]、W[1]、W[2]和W[3]，它们构成一个以字为单位的数组W。例如，设密钥K为”abcdefghijklmnop”,则K0 = ‘a’,K1 = ‘b’, K2 = ‘c’,K3 = ‘d’,W[0] = “abcd”。</p></li><li><p>接着，对W数组扩充40个新列，构成总共44列的扩展密钥数组。新列以如下的递归方式产生：</p><ul><li><p>1.如果i不是4的倍数，那么第i列由如下等式确定：<br>$W[i]=W[i-4]⨁W[i-1]$</p></li><li><p>2.如果i是4的倍数，那么第i列由如下等式确定：<br>$W[i]=W[i-4]⨁T(W[i-1])$<br>其中，T是一个有点复杂的函数。<br>函数T由3部分组成：字循环、字节代换和轮常量异或，这3部分的作用分别如下。</p><ul><li>a.字循环：将1个字中的4个字节循环左移1个字节。即将输入字[b0, b1, b2, b3]变换成[b1,b2,b3,b0]。</li><li>b.字节代换：对字循环的结果使用S盒进行字节代换。</li><li>c.轮常量异或：将前两步的结果同轮常量$Rcon[j]$进行异或，其中$j$表示轮数。轮常量$Rcon[j]$是一个字，其值见下表。</li></ul></li></ul></li></ul><div class="table-container"><table><thead><tr><th>j</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>Rcon[j]</td><td>01 00 00 00</td><td>02 00 00 00</td><td>04 00 00 00</td><td>08 00 00 00</td><td>10 00 00 00</td></tr><tr><td>j</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td></tr><tr><td>Rcon[j]</td><td>20 00 00 00</td><td>40 00 00 00</td><td>80 00 00 00</td><td>1B 00 00 00</td><td>36 00 00 00</td></tr></tbody></table></div><p>下面举个例子：</p><blockquote><p>设初始的128位密钥为：<br>3C A1 0B 21 57 F0 19 16 90 2E 13 80 AC C1 07 BD<br>那么4个初始值为：<br>W[0] = 3C A1 0B 21<br>W[1] = 57 F0 19 16<br>W[2] = 90 2E 13 80<br>W[3] = AC C1 07 BD</p><p>下面求扩展的第1轮的子密钥(W[4],W[5],W[6],W[7])。<br>由于4是4的倍数，所以：<br>W[4] = W[0] ⨁ T(W[3])</p><p>T(W[3])的计算步骤如下：</p><ul><li>循环地将W[3]的元素移位：AC C1 07 BD变成C1 07 BD AC;</li><li>将 C1 07 BD AC 作为S盒的输入，输出为78 C5 7A 91;</li><li>将78 C5 7A 91与第一轮轮常量Rcon[1]进行异或运算，将得到79 C5 7A 91，因此，T(W[3])=79 C5 7A 91，故<br>W[4] = 3C A1 0B 21 ⨁ 79 C5 7A 91 = 45 64 71 B0<br>其余的3个子密钥段的计算如下：<br>W[5] = W[1] ⨁ W[4] = 57 F0 19 16 ⨁ 45 64 71 B0 = 12 94 68 A6<br>W[6] = W[2] ⨁ W[5] =90 2E 13 80 ⨁ 12 94 68 A6 = 82 BA 7B 26<br>W[7] = W[3] ⨁ W[6] = AC C1 07 BD ⨁ 82 BA 7B 26 = 2E 7B 7C 9B<br>所以，第一轮的密钥为 45 64 71 B0 12 94 68 A6 82 BA 7B 26 2E 7B 7C 9B。</li></ul></blockquote><h3 id="AES解密"><a href="#AES解密" class="headerlink" title="AES解密"></a>AES解密</h3><p>在文章开始的图中，有AES解密的流程图，可以对应那个流程图来进行解密。下面介绍的是另一种等价的解密模式，流程图如下图所示。这种等价的解密模式使得解密过程各个变换的使用顺序同加密过程的顺序一致，只是用逆变换取代原来的变换。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjIwMDk0ODUzNjIw?x-oss-process=image/format,png" alt="deaes"></p><h3 id="AES四种加密模式"><a href="#AES四种加密模式" class="headerlink" title="AES四种加密模式"></a>AES四种加密模式</h3><p>分组密码有五种工作体制：1.电码本模式（Electronic Codebook Book (ECB)）；2.密码分组链接模式（Cipher Block Chaining (CBC)）；3.计算器模式（Counter (CTR)）；4.输出反馈模式（Output FeedBack (OFB)）。</p><h4 id="电码本模式（ECB）"><a href="#电码本模式（ECB）" class="headerlink" title="电码本模式（ECB）"></a><strong>电码本模式</strong>（ECB）</h4><p>将整个明文分成若干段相同的小段，然后对每一小段进行加密</p><p>优点：</p><ul><li>操作简单，易于实现；分组独立，易于并行；误差不会被传送。——简单，可并行，不传送误差。</li></ul><p>缺点：</p><ul><li>掩盖不了明文结构信息，难以抵抗统计分析攻击。——可对明文进行主动攻击。</li></ul><p><img src="https://images0.cnblogs.com/blog/480062/201310/12232452-d3e3ba87a6b24b49b6f57d41b341ea96.png" alt="img"></p><p><img src="https://blog.mimvp.com/wp-content/uploads/2018/06/aes-jia-mi-suan-fa-de-wu-zhong-jia-mi-mo-shi-011-700x418.jpg" alt="img"></p><h4 id="密码分组链模式（CBC）"><a href="#密码分组链模式（CBC）" class="headerlink" title="密码分组链模式（CBC）"></a><strong>密码分组链模式</strong>（CBC）</h4><p>先将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密</p><p><strong>优点</strong>：</p><ul><li>能掩盖明文结构信息，保证相同密文可得不同明文，所以不容易主动攻击，安全性好于ECB，适合传输长度长的报文，是SSL和IPSec的标准。</li></ul><p><strong>缺点</strong>：</p><ul><li>不利于并行计算；</li><li>传递误差——前一个出错则后续全错；</li><li>第一个明文块需要与一个初始化向量IV进行抑或，初始化向量IV的选取比较复杂。</li></ul><p><strong>初始化IV的选取方式</strong>：固定IV，计数器IV，随机IV（只能得到伪随机数，用的最多），瞬时IV（难以得到瞬时值）</p><p><img src="https://blog.mimvp.com/wp-content/uploads/2018/06/aes-jia-mi-suan-fa-de-wu-zhong-jia-mi-mo-shi-02.png" alt="img"></p><p><strong>IV是做什么用的呢？</strong></p><p>初始向量IV（Initialization Vector）它的作用和MD5的“加盐”有些类似，目的是防止同样的明文块始终加密成同样的密文块。</p><h4 id="输出反馈模式（OFB）"><a href="#输出反馈模式（OFB）" class="headerlink" title="输出反馈模式（OFB）"></a><strong>输出反馈模式</strong>（OFB）</h4><p>密码算法的输出（指密码key而不是密文）会反馈到密码算法的输入中，OFB模式并不是通过密码算法对明文直接加密，而是通过将明文分组和密码算法的输出进行XOR来产生密文分组。</p><p><strong>优点</strong>：</p><ul><li>隐藏了明文模式；结合了分组加密和流密码（分组密码转化为流模式）；可以及时加密传送小于分组的数据。</li></ul><p><strong>缺点</strong>：</p><ul><li>不利于并行计算；需要生成秘钥流；对明文的主动攻击是可能的。</li></ul><p><img src="https://blog.mimvp.com/wp-content/uploads/2018/06/aes-jia-mi-suan-fa-de-wu-zhong-jia-mi-mo-shi-03.png" alt="img"></p><h4 id="计数器模式（CTR）"><a href="#计数器模式（CTR）" class="headerlink" title="计数器模式（CTR）"></a>计数器模式（CTR）</h4><p>完全的流模式，将瞬时值与计数器连接起来，然后对此进行加密产生密钥流的一个密钥块，再进行XOR操作 </p><p>优点：</p><ul><li>不泄露明文；仅需实现加密函数；无需填充；可并行计算。</li></ul><p>缺点：</p><ul><li>需要瞬时值IV，难以保证IV的唯一性。</li></ul><p><img src="https://blog.mimvp.com/wp-content/uploads/2018/06/aes-jia-mi-suan-fa-de-wu-zhong-jia-mi-mo-shi-04.jpg" alt="img"></p><p><strong>对比CBC和CTR</strong></p><p>1）CBC需要填充；CTR不用填充。</p><p>2）CBC不可并行；CTR可并行速度快。</p><p>3）CBC需要实现加密和解密函数；CTR实现简单，仅需实现加密函数。</p><p>4）鲁棒性：CBC强于CTR——使用重复瞬时值，CBC会泄露初始明文块，CTR会泄露所有信息。</p><p>如果有好的瞬时值选择策略，采用CTR，否则采用CBC。</p><p>如加密成绩单，可选用CTR，因为学号唯一，可作为瞬时值。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分组密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译配置SGX-SSL</title>
    <link href="/2022/10/11/Ubuntu18.04%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AESGX-SSL%EF%BC%88SGX%E6%94%AF%E6%8C%81%E7%9A%84openssl%E5%87%BD%E6%95%B0%E5%BA%93%EF%BC%89/"/>
    <url>/2022/10/11/Ubuntu18.04%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AESGX-SSL%EF%BC%88SGX%E6%94%AF%E6%8C%81%E7%9A%84openssl%E5%87%BD%E6%95%B0%E5%BA%93%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="编译配置SGX-SSL（SGX支持的openssl函数库）"><a href="#编译配置SGX-SSL（SGX支持的openssl函数库）" class="headerlink" title="编译配置SGX-SSL（SGX支持的openssl函数库）"></a>编译配置SGX-SSL（SGX支持的openssl函数库）</h1><p>由于在sgx中需要对超级大的整数进行操作，于是引入openssl库，下面是一些安装步骤，主要参考的了官方github给出的教程：</p><ul><li><a href="https://github.com/intel/intel-sgx-ssl">intel/intel-sgx-ssl: Intel® Software Guard Extensions SSL (github.com)</a></li></ul><h2 id="所用的电脑配置"><a href="#所用的电脑配置" class="headerlink" title="所用的电脑配置"></a>所用的电脑配置</h2><blockquote><ul><li><p>电脑：联想Thinkpad E14</p></li><li><p>操作系统：ubuntu18.04</p></li><li><p>处理器：i5-10210U</p></li><li><p>内存：8G</p></li><li><p>硬盘：1TB</p></li><li><p>在电脑BIOS中<strong>启用</strong>Intel SGX。重装系统不会更改BIOS中的设置，所以即使重装系统，Intel SGX也会一直保持启用状态。</p></li><li><p>安装如下工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install gcc git cpuid<br></code></pre></td></tr></table></figure></li></ul></blockquote><h2 id="正式开始配置"><a href="#正式开始配置" class="headerlink" title="正式开始配置"></a>正式开始配置</h2><h3 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h3><ul><li>Perl</li><li>Toolchain（需要的工具，参照我的上一个博客<a href="https://harper.city/2022/10/04/intel-sgx%E9%85%8D%E7%BD%AE/">安装sgxsdk</a>，执行下面的指令之后可以看到这些工具的路径）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> external/toolset/&#123;current_distr&#125;/&#123;as,ld,ld.gold,objdump&#125; /usr/local/bin<br><span class="hljs-built_in">which</span> as ld ld.gold objdump<br></code></pre></td></tr></table></figure><ul><li>Intel SGX driver、SDK和PSW</li><li>准备好OpenSSL源码压缩包openssl-${version}.tar.gz。本博客使用的是openssl-1.1.1q版本，之前计划使用openssl-1.1.1p版本，<font color = "red">但是编译的时候报错让我使用openssl-1.1.1q版本</font>，随着时间的推移官方的更新可能之后还需要其他版本，大家自行辨别。</li></ul><h3 id="下载sgx-ssl项目"><a href="#下载sgx-ssl项目" class="headerlink" title="下载sgx-ssl项目"></a>下载sgx-ssl项目</h3><p>从GitHub拉取intel-sgx-ssl项目，这个网站也是可以访问的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/intel/intel-sgx-ssl<br></code></pre></td></tr></table></figure><h3 id="下载openssl压缩包"><a href="#下载openssl压缩包" class="headerlink" title="下载openssl压缩包"></a>下载openssl压缩包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> intel-sgx-ssl/openssl_source<br>wget https://openssl.org/source/openssl-1.1.1q.tar.gz<br></code></pre></td></tr></table></figure><p>这样openssl-1.1.1q.tar.gz压缩包就到了/intel-sgx-ssl/openssl_source/目录下</p><h3 id="编译并安装"><a href="#编译并安装" class="headerlink" title="编译并安装"></a>编译并安装</h3><p>我们现在在openssl_source目录，下面进入linux目录Linux/directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ../Linux<br><span class="hljs-built_in">source</span> /opt/intel/sgxsdk/environment  //这里应填写sgx的安装路径，我的是/opt/intel/sgxsdk/<br></code></pre></td></tr></table></figure><p>使得sgx开发环境生效。<br>无脑编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make all <span class="hljs-built_in">test</span><br>sudo make install<br></code></pre></td></tr></table></figure><p>安装完毕，可以在/opt/intel/sgxssl/找到编译好的库函数。</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sgx</tag>
      
      <tag>linux操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo配置博客心路历程</title>
    <link href="/2022/10/07/trash/hexo%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
    <url>/2022/10/07/trash/hexo%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p><a href="https://linzeen.me/2022/07/24/mac样式代码块教程/">Hexo-Fluid实现mac-panel风格代码块 - LINZEEN’s Gossip Blog</a></p><p><a href="https://forsure.live/customize-some-effects-for-hexofluid/#Mac风格代码块4">为Hexo-Fluid自定义一些效果 - ForSure’s Blog</a></p><p><a href="https://blog.yleao.com/2018/0902/hexo上的aplayer应用.html">hexo上的aplayer应用 | Y’s BLOG (yleao.com)</a></p><p><a href="https://blog.csdn.net/qq_41380292/article/details/121886741">(25条消息) hexo博客fluid主题添加aplayer组件_ccjoffrey的博客-CSDN博客_fluid主题</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>现代密码学作业10.7</title>
    <link href="/2022/10/06/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E4%BD%9C%E4%B8%9A10-7/"/>
    <url>/2022/10/06/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E4%BD%9C%E4%B8%9A10-7/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7fab5c59003370bb1b5baa1ee7310f91cf26b994dffccadd891d20d7794dfe05"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>作业</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>intel sgx开发环境配置</title>
    <link href="/2022/10/04/intel-sgx%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/10/04/intel-sgx%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="sgx的开发环境配置"><a href="#sgx的开发环境配置" class="headerlink" title="sgx的开发环境配置"></a>sgx的开发环境配置</h1><h2 id="参考的文献-amp-博客"><a href="#参考的文献-amp-博客" class="headerlink" title="参考的文献&amp;博客"></a>参考的文献&amp;博客</h2><ul><li><p><a href="https://flxdu.cn/2022/04/08/Intel-R-SGX环境在Ubuntu-18-04的安装/">Intel(R) SGX环境在Ubuntu 18.04的安装 | 小木槌 (flxdu.cn)</a></p></li><li><p><a href="https://blog.csdn.net/cyLee_/article/details/90245344">Ubuntu 18.04安装Intel SGX 2.3.1</a></p></li><li><p><a href="https://blog.csdn.net/cyLee_/article/details/90200470">Ubuntu 16.04下Intel SGX SDK环境搭建（硬件不支持情况）</a></p></li><li><p><a href="https://github.com/intel/linux-sgx">github上非常非常详细的英语教程</a></p></li></ul><p>主要参考了第一个博客，但是最最详细的是第四个github上的教程，只不过是全英文的有很多linux和sgx方面的专业名词对小白不是很友好。本人主要引用了第一个博客的内容，第一个博客的博主写的很详细，但是本人自己配置的时候还是出现了很多很多意想不到的问题，本博客针对可能出现的问题进行补充和说明。</p><h2 id="本人所用的配置"><a href="#本人所用的配置" class="headerlink" title="本人所用的配置"></a>本人所用的配置</h2><h3 id="电脑环境"><a href="#电脑环境" class="headerlink" title="电脑环境"></a>电脑环境</h3><p>由于现在用的电脑是锐龙处理器，而且没有trustzone，所以使用很久没用的、尘封已久的老、但是跟了我一年的老电脑。操作系统用的是ubuntu（鬼知道重装系统用了多久的时间），装完之后开机要很久，也不知道是不是坏了。</p><blockquote><ul><li><p>电脑：联想Thinkpad E14</p></li><li><p>操作系统：ubuntu18.04</p></li><li><p>处理器：i5-10210U</p></li><li><p>内存：8G</p></li><li><p>硬盘：1TB</p></li><li><p>在电脑BIOS中<strong>启用</strong>Intel SGX。重装系统不会更改BIOS中的设置，所以即使重装系统，Intel SGX也会一直保持启用状态。</p></li><li><p>安装如下工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install gcc git cpuid<br></code></pre></td></tr></table></figure></li></ul></blockquote><h3 id="检查硬件情况"><a href="#检查硬件情况" class="headerlink" title="检查硬件情况"></a>检查硬件情况</h3><p>这是Intel官方给出来的方法：<a href="https://www.intel.cn/content/www/cn/zh/support/articles/000057420/software/intel-security-products.html">如何确定英特尔® Software Guard Extensions （英特尔® SGX） 处理器是否支持 DCAP 和 FLC</a></p><p>在终端执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cpuid | grep -i sgx<br></code></pre></td></tr></table></figure><p>如果看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">SGX: Software Guard Extensions supported = <span class="hljs-literal">true</span><br>SGX_LC: SGX launch config supported = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>说明本博客安装方法适合你硬件情况。</p><h2 id="安装Intel-R-SGX环境"><a href="#安装Intel-R-SGX环境" class="headerlink" title="安装Intel(R) SGX环境"></a>安装Intel(R) SGX环境</h2><p>安装共有3大步，分别是：</p><ul><li>安装Intel(R) SGX Driver</li><li>安装Intel(R) SGX SDK</li><li>安装Intel(R) SGX PSW</li></ul><h3 id="安装Intel-R-SGX-Driver"><a href="#安装Intel-R-SGX-Driver" class="headerlink" title="安装Intel(R) SGX Driver"></a>安装Intel(R) SGX Driver</h3><p>安装一些工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install make<br></code></pre></td></tr></table></figure><p>检查系统内核头文件是否与现有内核匹配：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg-query -s linux-headers-$(<span class="hljs-built_in">uname</span> -r)<br></code></pre></td></tr></table></figure><p>如果看到<code>Status: install ok installed</code>说明没有问题</p><p>否则要安装匹配的内核头文件：<code>sudo apt-get install linux-headers-$(uname -r)</code></p><p>克隆仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/intel/linux-sgx-driver.git<br></code></pre></td></tr></table></figure><p>编译Intel(R) SGX Driver</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux-sgx-driver &amp;&amp; make<br></code></pre></td></tr></table></figure><p>编译完后，依次执行如下命令进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;/lib/modules/&quot;</span>`<span class="hljs-built_in">uname</span> -r`<span class="hljs-string">&quot;/kernel/drivers/intel/sgx&quot;</span>    <br>sudo <span class="hljs-built_in">cp</span> isgx.ko <span class="hljs-string">&quot;/lib/modules/&quot;</span>`<span class="hljs-built_in">uname</span> -r`<span class="hljs-string">&quot;/kernel/drivers/intel/sgx&quot;</span>    <br>sudo sh -c <span class="hljs-string">&quot;cat /etc/modules | grep -Fxq isgx || echo isgx &gt;&gt; /etc/modules&quot;</span>    <br>sudo /sbin/depmod<br>sudo /sbin/modprobe isgx<br></code></pre></td></tr></table></figure><p>至此Intel(R) SGX Driver安装完成。</p><h3 id="安装Intel-R-SGX-SDK"><a href="#安装Intel-R-SGX-SDK" class="headerlink" title="安装Intel(R) SGX SDK"></a>安装Intel(R) SGX SDK</h3><p>安装一些工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install build-essential python ocaml ocamlbuild automake autoconf libtool wget python libssl-dev git cmake perl libcurl4-openssl-dev protobuf-compiler libprotobuf-dev debhelper reprepro unzip<br></code></pre></td></tr></table></figure><p>注意这里安装工具可能报错如下</p><img src="/2022/10/04/intel-sgx%E9%85%8D%E7%BD%AE/debhelper%E6%8A%A5%E9%94%99.png" class="" title="安装工具报错"><p><font color="red">这是因为某些软件包需要保持现状，安装可能会破坏原有的软件包依赖关系，所以要安装这个软件包，必须调节软件包之间的相关关系</font>,给个解决的<a href="https://blog.csdn.net/weixin_45348389/article/details/122913923">方法链接</a>,简单来说就是用aptitude来代替apt安装，aptitude能解决软件中的依赖关系。</p><p>克隆仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/intel/linux-sgx.git<br></code></pre></td></tr></table></figure><h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><p>此步会克隆几个GitHub，请走代理（不走代理针的好慢好慢）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux-sgx &amp;&amp; make preparation<br></code></pre></td></tr></table></figure><p>将预编译出的文件拷贝至系统路径下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> ~/linux-sgx/external/toolset/ubuntu18.04/* /usr/local/bin<br></code></pre></td></tr></table></figure><p>执行如下命令检查是否拷贝成功，如果成功会输出路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> ar as ld objcopy objdump ranlib<br></code></pre></td></tr></table></figure><h4 id="编译Intel-R-SGX-SDK"><a href="#编译Intel-R-SGX-SDK" class="headerlink" title="编译Intel(R) SGX SDK"></a>编译Intel(R) SGX SDK</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make sdk<br></code></pre></td></tr></table></figure><p>此步会输出大约五万行内容（真的时间巨长，等吧），请耐心等待。</p><p>最后没有报错，说明编译成功。</p><h4 id="编译Intel-R-SGX-SDK安装器"><a href="#编译Intel-R-SGX-SDK安装器" class="headerlink" title="编译Intel(R) SGX SDK安装器"></a>编译Intel(R) SGX SDK安装器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make sdk_install_pkg<br></code></pre></td></tr></table></figure><p>此步会输出大约五万行内容（这个时间也很长啊，都看了好多视频了），请耐心等待。</p><p>编译完成后会输出<code>Generated sdk installer: ./linux/installer/bin/sgx_linux_x64_sdk_xxx.bin</code>。</p><h4 id="安装Intel-R-SGX-SDK-1"><a href="#安装Intel-R-SGX-SDK-1" class="headerlink" title="安装Intel(R) SGX SDK"></a>安装Intel(R) SGX SDK</h4><p>首先我们先创建一个目录，作为SDK的安装目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/linux-sgx-install-path<br></code></pre></td></tr></table></figure><p>此步xxx要改为编译Intel(R) SGX SDK安装器最后的输出，在目录<code>linux-sgx/linux/installer/bin</code>下可以看到此文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux/installer/bin &amp;&amp; ./sgx_linux_x64_sdk_xxx.bin --prefix ~/linux-sgx-install-path<br></code></pre></td></tr></table></figure><p>根据安装最后的提示输出刷新环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/linux-sgx-install-path/sgxsdk/environment<br></code></pre></td></tr></table></figure><p>SDK安装完成。</p><p>此时进入<code>linux-sgx-install-path/SampleCode</code>下尝试样例代码是不会成功的，需要安装PSW之后才可运行样例。</p><h3 id="安装Intel-R-SGX-PSW"><a href="#安装Intel-R-SGX-PSW" class="headerlink" title="安装Intel(R) SGX PSW"></a>安装Intel(R) SGX PSW</h3><h4 id="编译Intel-R-SGX-PSW"><a href="#编译Intel-R-SGX-PSW" class="headerlink" title="编译Intel(R) SGX PSW"></a>编译Intel(R) SGX PSW</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/linux-sgx &amp;&amp; make psw<br></code></pre></td></tr></table></figure><p>注意把linux-sgx-install-path下的sgxsdk文件夹移动到根目录下的/opt/intel目录里，再执行上面的这一条指令。此步会输出大约一千行内容，请耐心等待。</p><h4 id="编译Intel-R-SGX-SDK安装器-1"><a href="#编译Intel-R-SGX-SDK安装器-1" class="headerlink" title="编译Intel(R) SGX SDK安装器"></a>编译Intel(R) SGX SDK安装器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/linux-sgx &amp;&amp; make deb_psw_pkg<br></code></pre></td></tr></table></figure><p>此步会输出大约八千行内容，请耐心等待。</p><h4 id="添加本地软件源"><a href="#添加本地软件源" class="headerlink" title="添加本地软件源"></a>添加本地软件源</h4><p>按照github上的英文教程，需要先生成sgx_debian_local_repo文件夹，最后在~/linux-sgx/linux/installer/deb目录下可以看见这个文件夹，输入如下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make deb_local_repo<br></code></pre></td></tr></table></figure><p>需要将本地路径追加到软件源文件中，使用<code>sudo vi /etc/apt/sources.list</code>编辑文件，将下面内容添加到文件末尾，<font color = "red">注意：你需要把PATH_TO_LOCAL_REPO替换成<code>~/linux-sgx/linux/installer/deb/sgx_debian_local_repo</code>的绝对路径</font>，注意这里的路径需要自己根据自己的位置设置，建议改成绝对路径，我的添加方式如下，大家自己添加的时候注意改成自己的路径哦！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb [trusted=<span class="hljs-built_in">yes</span> <span class="hljs-built_in">arch</span>=amd64] file:/home/harper/inux-sgx/linux/installer/deb/sgx_debian_local_repo bionic main<br></code></pre></td></tr></table></figure><p>添加完之后，刷新软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br></code></pre></td></tr></table></figure><h4 id="安装Intel-R-SGX-PSW-1"><a href="#安装Intel-R-SGX-PSW-1" class="headerlink" title="安装Intel(R) SGX PSW"></a>安装Intel(R) SGX PSW</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install libsgx-launch libsgx-urts libsgx-epid libsgx-quote-ex libsgx-dcap-ql<br></code></pre></td></tr></table></figure><p>如果现在去测试样例，会报错<code>failed to load enclave</code>，Intel给出<a href="https://www.intel.com/content/www/us/en/support/articles/000057836/software/intel-security-products.html">解决方案</a>，要启动aesmd服务。</p><h3 id="启动aesmd服务"><a href="#启动aesmd服务" class="headerlink" title="启动aesmd服务"></a>启动aesmd服务</h3><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start aesmd<br></code></pre></td></tr></table></figure><p>查看aesmd服务启动状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /var/log/syslog | grep -i aesm<br></code></pre></td></tr></table></figure><p>设置aesmd服务开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> aesmd<br></code></pre></td></tr></table></figure><h2 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h2><h3 id="测试本地认证"><a href="#测试本地认证" class="headerlink" title="测试本地认证"></a>测试本地认证</h3><p>我们使用SDK给出的样例代码<code>LocalAttestation</code>对安装情况进行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/linux-sgx-install-path/sgxsdk/SampleCode/LocalAttestation <br></code></pre></td></tr></table></figure><p>编译样例代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make<br></code></pre></td></tr></table></figure><p>执行样例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/app<br></code></pre></td></tr></table></figure><p>如果看到如下输出，说明安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">succeed to load enclaves.<br>succeed to establish secure channel.<br>Succeed to exchange secure message...<br>Succeed to close Session...<br></code></pre></td></tr></table></figure><p>我自己跑出来是显示没有成功（狗头），应该是aesmd服务出了点问题，大家可以测试下面的enclave样例</p><h3 id="测试enclave样例"><a href="#测试enclave样例" class="headerlink" title="测试enclave样例"></a>测试enclave样例</h3><p>我们运行enclave代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/intel/sgxsdk/SampleCode/SampleEnclave<br></code></pre></td></tr></table></figure><p> 编译代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo make<br></code></pre></td></tr></table></figure><p>执行代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./app<br></code></pre></td></tr></table></figure><p>看到如下输出证明安装成功</p><img src="/2022/10/04/intel-sgx%E9%85%8D%E7%BD%AE/%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F.png" class="" title=".&#x2F;app运行结果">]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sgx</tag>
      
      <tag>linux操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库笔记</title>
    <link href="/2022/10/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/10/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="数据库的安装和使用"><a href="#数据库的安装和使用" class="headerlink" title="数据库的安装和使用"></a>数据库的安装和使用</h2><h3 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/37152572">知乎教程</a></li></ul><h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><ul><li><a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=4&amp;spm_id_from=pageDriver">mysql软件的使用</a></li></ul><h2 id="数据库基本语法"><a href="#数据库基本语法" class="headerlink" title="数据库基本语法"></a>数据库基本语法</h2><h3 id="数据库层次结构"><a href="#数据库层次结构" class="headerlink" title="数据库层次结构"></a>数据库层次结构</h3><img src="/2022/10/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/1.png" class="" title="数据库层次结构"><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p<br></code></pre></td></tr></table></figure><h3 id="数据库的创建"><a href="#数据库的创建" class="headerlink" title="数据库的创建"></a>数据库的创建</h3><p>创建基本的一个学生-课程数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">CREAT DATABASE student_course;<br>USE student_course;<br></code></pre></td></tr></table></figure><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p><strong>数值类型</strong></p><div class="table-container"><table><thead><tr><th>TINYINT</th><th>1 Bytes</th><th>(-128，127)</th><th>(0，255)</th><th>小整数值</th></tr></thead><tbody><tr><td>SMALLINT</td><td>2 Bytes</td><td>(-32 768，32 767)</td><td>(0，65 535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3 Bytes</td><td>(-8 388 608，8 388 607)</td><td>(0，16 777 215)</td><td>大整数值</td></tr><tr><td>INT或INTEGER</td><td>4 Bytes</td><td>(-2 147 483 648，2 147 483 647)</td><td>(0，4 294 967 295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8 Bytes</td><td>(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td>(0，18 446 744 073 709 551 615)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4 Bytes</td><td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td>0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td>单精度 浮点数值</td></tr><tr><td>DOUBLE</td><td>8 Bytes</td><td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>双精度 浮点数值</td></tr><tr><td>DECIMAL</td><td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td>依赖于M和D的值</td><td>依赖于M和D的值</td><td>小数值</td></tr></tbody></table></div><p><strong>日期和时间类型</strong></p><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</p><p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</p><p>TIMESTAMP类型有专有的自动更新特性，将在后面描述。</p><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">大小 ( bytes)</th><th style="text-align:left">范围</th><th style="text-align:left">格式</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">DATE</td><td style="text-align:left">3</td><td style="text-align:left">1000-01-01/9999-12-31</td><td style="text-align:left">YYYY-MM-DD</td><td style="text-align:left">日期值</td></tr><tr><td style="text-align:left">TIME</td><td style="text-align:left">3</td><td style="text-align:left">‘-838:59:59’/‘838:59:59’</td><td style="text-align:left">HH:MM:SS</td><td style="text-align:left">时间值或持续时间</td></tr><tr><td style="text-align:left">YEAR</td><td style="text-align:left">1</td><td style="text-align:left">1901/2155</td><td style="text-align:left">YYYY</td><td style="text-align:left">年份值</td></tr><tr><td style="text-align:left">DATETIME</td><td style="text-align:left">8</td><td style="text-align:left">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td style="text-align:left">YYYY-MM-DD HH:MM:SS</td><td style="text-align:left">混合日期和时间值</td></tr><tr><td style="text-align:left">TIMESTAMP</td><td style="text-align:left">4</td><td style="text-align:left">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td style="text-align:left">YYYYMMDD HHMMSS</td><td style="text-align:left">混合日期和时间值，时间戳</td></tr></tbody></table></div><p><strong>字符串类型</strong></p><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">大小</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">CHAR</td><td style="text-align:left">0-255 bytes</td><td style="text-align:left">定长字符串</td></tr><tr><td style="text-align:left">VARCHAR</td><td style="text-align:left">0-65535 bytes</td><td style="text-align:left">变长字符串</td></tr><tr><td style="text-align:left">TINYBLOB</td><td style="text-align:left">0-255 bytes</td><td style="text-align:left">不超过 255 个字符的二进制字符串</td></tr><tr><td style="text-align:left">TINYTEXT</td><td style="text-align:left">0-255 bytes</td><td style="text-align:left">短文本字符串</td></tr><tr><td style="text-align:left">BLOB</td><td style="text-align:left">0-65 535 bytes</td><td style="text-align:left">二进制形式的长文本数据</td></tr><tr><td style="text-align:left">TEXT</td><td style="text-align:left">0-65 535 bytes</td><td style="text-align:left">长文本数据</td></tr><tr><td style="text-align:left">MEDIUMBLOB</td><td style="text-align:left">0-16 777 215 bytes</td><td style="text-align:left">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:left">MEDIUMTEXT</td><td style="text-align:left">0-16 777 215 bytes</td><td style="text-align:left">中等长度文本数据</td></tr><tr><td style="text-align:left">LONGBLOB</td><td style="text-align:left">0-4 294 967 295 bytes</td><td style="text-align:left">二进制形式的极大文本数据</td></tr><tr><td style="text-align:left">LONGTEXT</td><td style="text-align:left">0-4 294 967 295 bytes</td><td style="text-align:left">极大文本数据</td></tr></tbody></table></div><p> <strong>注意</strong>：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p><p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p><p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p><h4 id="创建一个表和删除一个表"><a href="#创建一个表和删除一个表" class="headerlink" title="创建一个表和删除一个表"></a>创建一个表和删除一个表</h4><p>创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> (Sno <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> Sname <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">UNIQUE</span>,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> Ssex <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>),<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> Sage <span class="hljs-type">SMALLINT</span>,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> Sdept <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>)<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> );<br></code></pre></td></tr></table></figure><p>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> student;<br></code></pre></td></tr></table></figure><p>修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> student RENAME stu;<br></code></pre></td></tr></table></figure><p>修改列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br>CHANGE Crade Grade <span class="hljs-type">SMALLINT</span>;<br></code></pre></td></tr></table></figure><h4 id="表——增删改查"><a href="#表——增删改查" class="headerlink" title="表——增删改查"></a>表——增删改查</h4><h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><p>可以用两种方式编写INSERT INTO语句。</p><p>第一种方法指定列名和要插入的值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name (column1, column2, column3, ...)<br><span class="hljs-keyword">VALUES</span> (value1, value2, value3, ...); <br></code></pre></td></tr></table></figure><p>如果要为表的所有列添加值，则无需在SQL查询中指定列名。但是，请确保值的顺序与表中的列的顺序相同。INSERT INTO语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name<br><span class="hljs-keyword">VALUES</span> (value1, value2, value3, ...); <br></code></pre></td></tr></table></figure><p>代码举例(一定注意：字符型数据需要加引号)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student (Sno,Sname,Ssex,Sage,Sdept)     <span class="hljs-keyword">values</span>     (&quot;201215121&quot;,&quot;李勇&quot;,&quot;男&quot;,<span class="hljs-number">20</span>,&quot;CS&quot;);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student (Sno,Sname,Ssex,Sage,Sdept)     <span class="hljs-keyword">values</span>     (&quot;201215122&quot;,&quot;刘晨&quot;,&quot;女&quot;,<span class="hljs-number">19</span>,&quot;CS&quot;);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student (Sno,Sname,Ssex,Sage,Sdept)     <span class="hljs-keyword">values</span>     (&quot;201215123&quot;,&quot;王敏&quot;,&quot;女&quot;,<span class="hljs-number">18</span>,&quot;MA&quot;);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student (Sno,Sname,Ssex,Sage,Sdept)     <span class="hljs-keyword">values</span>     (&quot;201215125&quot;,&quot;张立&quot;,&quot;男&quot;,<span class="hljs-number">19</span>,&quot;IS&quot;);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC      <span class="hljs-keyword">values</span>     (&quot;201215121&quot;,&quot;1&quot;,<span class="hljs-number">92</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC      <span class="hljs-keyword">values</span>     (&quot;201215121&quot;,&quot;2&quot;,<span class="hljs-number">85</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC      <span class="hljs-keyword">values</span>     (&quot;201215121&quot;,&quot;3&quot;,<span class="hljs-number">88</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC      <span class="hljs-keyword">values</span>     (&quot;201215122&quot;,&quot;2&quot;,<span class="hljs-number">90</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC      <span class="hljs-keyword">values</span>     (&quot;201215122&quot;,&quot;3&quot;,<span class="hljs-number">80</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> course      <span class="hljs-keyword">values</span>     (&quot;1&quot;,&quot;数据库&quot;,&quot;5&quot;,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> course      <span class="hljs-keyword">values</span>     (&quot;2&quot;,&quot;数学&quot;,&quot;NULL&quot;,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> course      <span class="hljs-keyword">values</span>     (&quot;3&quot;,&quot;信息系统&quot;,&quot;1&quot;,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> course      <span class="hljs-keyword">values</span>     (&quot;4&quot;,&quot;操作系统&quot;,&quot;6&quot;,<span class="hljs-number">3</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> course      <span class="hljs-keyword">values</span>     (&quot;5&quot;,&quot;数据结构&quot;,&quot;7&quot;,<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><p>最后得到如下几个表：</p><div align = center>student</div><div class="table-container"><table><thead><tr><th style="text-align:center">Sno</th><th style="text-align:center">Sname</th><th style="text-align:center">Ssex</th><th style="text-align:center">Sage</th><th style="text-align:center">Sdept</th></tr></thead><tbody><tr><td style="text-align:center">201215121</td><td style="text-align:center">李勇</td><td style="text-align:center">男</td><td style="text-align:center">20</td><td style="text-align:center">CS</td></tr><tr><td style="text-align:center">201215122</td><td style="text-align:center">刘晨</td><td style="text-align:center">女</td><td style="text-align:center">19</td><td style="text-align:center">CS</td></tr><tr><td style="text-align:center">201215123</td><td style="text-align:center">王敏</td><td style="text-align:center">女</td><td style="text-align:center">18</td><td style="text-align:center">MA</td></tr><tr><td style="text-align:center">201215125</td><td style="text-align:center">张立</td><td style="text-align:center">男</td><td style="text-align:center">19</td><td style="text-align:center">IS</td></tr></tbody></table></div><div align = center>course</div><div class="table-container"><table><thead><tr><th style="text-align:center">Cno</th><th style="text-align:center">Cname</th><th style="text-align:center">Cpno</th><th style="text-align:center">Ccredit</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">数据库</td><td style="text-align:center">5</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">数学</td><td style="text-align:center">NULL</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">信息系统</td><td style="text-align:center">1</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">操作系统</td><td style="text-align:center">6</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">数据结构</td><td style="text-align:center">7</td><td style="text-align:center">4</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">Sno</th><th style="text-align:center">Cno</th><th style="text-align:center">Grade</th></tr></thead><tbody><tr><td style="text-align:center">201215121</td><td style="text-align:center">1</td><td style="text-align:center">92</td></tr><tr><td style="text-align:center">201215121</td><td style="text-align:center">2</td><td style="text-align:center">85</td></tr><tr><td style="text-align:center">201215121</td><td style="text-align:center">3</td><td style="text-align:center">88</td></tr><tr><td style="text-align:center">201215122</td><td style="text-align:center">2</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center">201215122</td><td style="text-align:center">3</td><td style="text-align:center">80</td></tr></tbody></table></div><p>还有一种插入方式，需要学习select语句，直接把语句放到下面</p><p>对于每一个系，求学生的平均年龄，并把结果放到数据库里</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Dept_age<br>(<br>sdept <span class="hljs-type">char</span>(<span class="hljs-number">15</span>)<br>avg_age <span class="hljs-type">smallint</span><br>);<br><span class="hljs-keyword">insert</span> <br><span class="hljs-keyword">into</span> dept_age(sdept,avg_age)<br><span class="hljs-keyword">select</span> sdept , <span class="hljs-built_in">avg</span>(sage)<br><span class="hljs-keyword">from</span> student <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sdept;<br></code></pre></td></tr></table></figure><h5 id="删"><a href="#删" class="headerlink" title="删"></a>删</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">WHERE</span> Cno <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br></code></pre></td></tr></table></figure><p>这里的where子句可以配合一些列其他句子使用，如exists,in等等</p><h5 id="改"><a href="#改" class="headerlink" title="改"></a>改</h5><p>让我们先想想有什么需要修改？</p><p>对于列来说：</p><ul><li>增加新的一列</li></ul><p>增加入学时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student <span class="hljs-keyword">ADD</span> S_entrance <span class="hljs-type">DATE</span>;<br></code></pre></td></tr></table></figure><ul><li>修改原有列的数据类型(使用MODIFY或者CHANGE)或者增加约束条件</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student MODIFY S_entrance <span class="hljs-type">INT</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student <span class="hljs-keyword">ADD</span>  <span class="hljs-keyword">UNIQUE</span>(S_entrance);<br></code></pre></td></tr></table></figure><ul><li>删除列和<a href="[mysql 删除约束_MySQL中的约束,添加约束,删除约束,以及其他修饰_衣锦夜行的李公子的博客-CSDN博客](https://blog.csdn.net/weixin_35731579/article/details/113116120">删除约束条件</a>)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student <span class="hljs-keyword">DROP</span> INDEX S_entrance;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> S_entrance;<br></code></pre></td></tr></table></figure><p>对于行来说：</p><ul><li>修改一行中已有的数据(使用SET语句)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> course <span class="hljs-keyword">SET</span> Cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;100&#x27;</span> <span class="hljs-keyword">where</span> Cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> course;<br></code></pre></td></tr></table></figure><p>这里的where子句可以配合一些列其他句子使用，如exists,in等等</p><h5 id="查"><a href="#查" class="headerlink" title="查"></a>查</h5><p>使用where子句和列名可以实现查找(查找是一个大块，内容很复杂，后面再介绍)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sno,Ssex <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">SELECT</span> Sno 学号,Ssex 性别 <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>学号</th><th>性别</th></tr></thead><tbody><tr><td>201215122</td><td>女</td></tr><tr><td>201215123</td><td>女</td></tr><tr><td>201215125</td><td>男</td></tr></tbody></table></div><p>如果这样查输出奇怪的东西（sql注入可能用到）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>3</td></tr><tr><td>1</td><td>2</td><td>3</td></tr><tr><td>1</td><td>2</td><td>3</td></tr></tbody></table></div><h4 id="索引的创建"><a href="#索引的创建" class="headerlink" title="索引的创建"></a>索引的创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">use student_course;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX stusno <span class="hljs-keyword">ON</span> student(Sno);<br></code></pre></td></tr></table></figure><h3 id="数据查询-cry"><a href="#数据查询-cry" class="headerlink" title="数据查询:cry:"></a>数据查询:cry:</h3><h4 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h4><p><span id = "jump4"><strong>例1：</strong>查询全体学生的姓名、出生年份和所在院系，要求用小写字母表示系名</span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sname NAME,&quot;Year of Birth:&quot; , <span class="hljs-number">2022</span> <span class="hljs-operator">-</span> Sage BIRTHDAY ,  <span class="hljs-built_in">LOWER</span>(Sdept) <span class="hljs-keyword">FROM</span> student;<br></code></pre></td></tr></table></figure><p>可以看到这里的可以制定别名，同时想要查找的列可以用一个表达式表示 2022 - Sage</p><p><strong>例2：</strong>查询选修了课程的学生学号（去掉重复项）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Sno <span class="hljs-keyword">FROM</span> SC;<br></code></pre></td></tr></table></figure><p>使用distinct子句来保证结果唯一</p><p><strong>例3：</strong>查询计算机系的全体学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Sname <span class="hljs-keyword">FROM</span>  student<br><span class="hljs-keyword">WHERE</span> Sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CS&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这里使用了where子句，这是一个很强大的功能：</p><div align = "center">WHERE子句常用查询条件表</div><div class="table-container"><table><thead><tr><th style="text-align:center">查询条件</th><th style="text-align:center">谓词</th></tr></thead><tbody><tr><td style="text-align:center">比较</td><td style="text-align:center">= , &gt; , &lt; , &gt;= , &lt;= , != , &lt;&gt; , !&gt; , !&lt; , ; NOT + 上述比较符</td></tr><tr><td style="text-align:center">确定范围</td><td style="text-align:center">BETWEEN AND , NOT BETWEEN AND</td></tr><tr><td style="text-align:center">确定集合</td><td style="text-align:center">IN , NOT ,IN</td></tr><tr><td style="text-align:center">字符匹配</td><td style="text-align:center">LIKE , NOT LIKE</td></tr><tr><td style="text-align:center">空值</td><td style="text-align:center">IS NULL , IS NOT NULL</td></tr><tr><td style="text-align:center">多重条件（逻辑运算）</td><td style="text-align:center">AND , OR , NOT</td></tr></tbody></table></div><p><strong>例4：</strong>查询计算机系(CS)和数学(MA)系中年龄在19~20之间的学生姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sname <span class="hljs-keyword">FROM</span> student <br><span class="hljs-keyword">where</span> Sdept <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;CS&#x27;</span>,<span class="hljs-string">&#x27;MA&#x27;</span>) <span class="hljs-keyword">AND</span> Sage <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">19</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><p>这里between and也可以用=<20 AND >=19代替</p><p><strong>例5：</strong>查询名字中课程名中含有下划线的课程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> course      <span class="hljs-keyword">values</span>     (&quot;9&quot;,&quot;DB_course&quot;,&quot;7&quot;,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> course<br><span class="hljs-keyword">where</span> Cname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%\_%&#x27;</span> ;<br></code></pre></td></tr></table></figure><p>这里使用了LIKE进行字符匹配：</p><ul><li>%（百分号）代表任意长度（可以为0）的字符串</li><li>_(下划线)代表任意单个字符</li></ul><font color = red> 注意：字符集为ASCII时，一个汉字需要两个\_；当字符集为GBK时只需要一个\_</font><p><strong>例6：</strong>查询全体学生情况，查询结果按照系号升序，同一系中的学生按照年龄降序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Sdept , Sage <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>用DESC来进行降序</p><p><strong>例7：</strong>查询选修了课程的学生人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> Sno)<br><span class="hljs-keyword">FROM</span> SC;<br></code></pre></td></tr></table></figure><p>返回一个表只有一个值：</p><div class="table-container"><table><thead><tr><th style="text-align:center">COUNT(DISTINCT Sno)</th></tr></thead><tbody><tr><td style="text-align:center">2</td></tr></tbody></table></div><p>注意这里必须使用distinct语句，默认是all即全部行都要统计</p><p><strong>例8：</strong>查询各个课程号及相应的选课人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Cno , <span class="hljs-built_in">COUNT</span>(Sno)<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Cno;<br></code></pre></td></tr></table></figure><p>GROUP把课程号相同的学生分到一组，然后COUNT函数统计每一组的Sno结果，输出如下结果：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Cno</th><th style="text-align:center">COUNT(Sno)</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">2</td></tr></tbody></table></div><p>如果GROUP不配合COUNT,AVG（这些函数对于一个表只返回一个值）使用，那么返回这样的结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Cno;<br></code></pre></td></tr></table></figure><p>输出的结果只有不同Cno的第一个行</p><div class="table-container"><table><thead><tr><th style="text-align:center">Sno</th><th style="text-align:center">Cno</th><th style="text-align:center">Grade</th></tr></thead><tbody><tr><td style="text-align:center">201215121</td><td style="text-align:center">1</td><td style="text-align:center">92</td></tr><tr><td style="text-align:center">201215121</td><td style="text-align:center">2</td><td style="text-align:center">85</td></tr><tr><td style="text-align:center">201215121</td><td style="text-align:center">3</td><td style="text-align:center">88</td></tr></tbody></table></div><p><strong>例9：</strong>查询选修了三门及以上课程的学生学号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sno ,<span class="hljs-built_in">count</span>(Cno) <span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Sno<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(Cno)<span class="hljs-operator">&gt;=</span><span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>注意这里不能用where子句，where子句作用于基本表或者视图；</p><p>而having短语作用于组，从中选择满足条件的组；</p><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><h5 id="等值连接与非等值连接"><a href="#等值连接与非等值连接" class="headerlink" title="等值连接与非等值连接"></a><span id = "jump1">等值连接与非等值连接</span></h5><p><strong>例1：</strong>查询每个学生及其选修课程的情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> student.<span class="hljs-operator">*</span> , sc.<span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span> student,sc<br><span class="hljs-keyword">where</span> student.sno <span class="hljs-operator">=</span> sc.sno;<br></code></pre></td></tr></table></figure><p>这里是一个等值连接，如果建立了索引这里的速度会更快</p><p><strong>例2：</strong>查询选修了2号课程且成绩在90分及以上的所有学生的学号和姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> student.Sno ,student.sname <br><span class="hljs-keyword">from</span> student , sc<br><span class="hljs-keyword">where</span> student.Sno <span class="hljs-operator">=</span> sc.sno <br><span class="hljs-keyword">and</span> sc.cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">and</span> sc.grade<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure><p>为什么要用student.sno而不是直接用sno，因为SELECT student.<em> , sc.</em> 返回的值是两个表的笛卡尔积，包括两个sno分别是student.sno和sc.sno，这里只需要提取student.sno</p><h5 id="自身连接"><a href="#自身连接" class="headerlink" title="自身连接"></a>自身连接</h5><p><strong>例1：</strong>查询每一门课的间接先修课(先修课的先修课)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.cno 课程号, b.cpno 该课程先修课的先修课<br><span class="hljs-keyword">from</span> course a,course b<br><span class="hljs-keyword">where</span> a.cpno <span class="hljs-operator">=</span> b.cno;<br></code></pre></td></tr></table></figure><h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><p><strong>例1：</strong>查询每个学生及其选修课程的情况</p><p>类比<a href="#jump1">2.5.2.1</a>中,会发现返回的结果里面没有学号为201215123的同学，因为他们被开除了没有选课，但是我们又希望显示他们的选课结果，用NULL表示，这里就需要用到外连接，而且是左外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> student <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> sc <span class="hljs-keyword">on</span> (student.sno <span class="hljs-operator">=</span> sc.sno);<br></code></pre></td></tr></table></figure><p>这样就能显示啦！:happy:</p><ul><li>左外连接列出左边关系中的所有元组</li><li>右外连接列出右边关系中的所有元组</li></ul><h5 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h5><p><strong>例1：</strong>查询每个学生的学号，姓名，选修的课程名及名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> student.sno , student.sname , course.cname<br><span class="hljs-keyword">from</span> student , sc, course<br><span class="hljs-keyword">where</span> student.sno <span class="hljs-operator">=</span> sc.sno<br><span class="hljs-keyword">and</span> sc.cno <span class="hljs-operator">=</span> course.cno;<br></code></pre></td></tr></table></figure><p>这样还是显示不了没选课的人，需要用到外连接才能实现，我们暂时先不讨论</p><h4 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h4><p>sql语句中，一个SELECT-FROM-WHERE语句为一个<code>查询块</code>。将一个查询块嵌入到另一个查询块的where子句中或者having短语中的查询成为嵌套</p><h5 id="带有IN谓词子查询"><a href="#带有IN谓词子查询" class="headerlink" title="带有IN谓词子查询"></a>带有IN谓词子查询</h5><p><strong>例1：</strong>查询与“刘晨”在同一个系学习的学生的名字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-keyword">in</span><br>(<span class="hljs-keyword">select</span> sdept <br><span class="hljs-keyword">from</span> student <br><span class="hljs-keyword">where</span> sname <span class="hljs-operator">=</span> &quot;刘晨&quot;);<br></code></pre></td></tr></table></figure><p><strong>例2：</strong>查询选修了课程名为“信息系统”的学生学号和姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname <br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sno <span class="hljs-keyword">in</span><br>(<br><span class="hljs-keyword">select</span> sno<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> cno <span class="hljs-keyword">in</span><br>(<br><span class="hljs-keyword">select</span> cno <br><span class="hljs-keyword">from</span> course<br><span class="hljs-keyword">where</span> cname <span class="hljs-operator">=</span> &quot;信息系统&quot;<br>)<br>    );<br></code></pre></td></tr></table></figure><h5 id="带有比较运算符的子查询"><a href="#带有比较运算符的子查询" class="headerlink" title="带有比较运算符的子查询"></a>带有比较运算符的子查询</h5><p>父子查询之间用比较运算符连接</p><p><span id = "jump3"><strong>例1：</strong>找出每个学生超过他自己选修课程平均成绩的课程号 </span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> cno<br><span class="hljs-keyword">from</span> sc x<br><span class="hljs-keyword">where</span> grade <span class="hljs-operator">&gt;</span><br>(<br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(grade)<br>    <span class="hljs-keyword">from</span> sc y<br><span class="hljs-keyword">where</span> y.sno <span class="hljs-operator">=</span> x.sno<br>);<br></code></pre></td></tr></table></figure><p>可能有点难理解，我们把语句的底层实现过程拆分成下面三个步骤：</p><blockquote><p>1.从外层查询中取出sc的一个元组x，将元组x的Sno值(201215121)传给内层查询</p><p>select avg(grade)</p><p>from sc y</p><p>where y.sno = ‘201215121’;</p><p>2.执行内层查询，得到88(近似值)，用该值代替内层查询，得到外层查询</p><p>3.遍历所有元组，把重复的值去掉</p></blockquote><p>需要注意，这里的子查询为<font color = red><code >相关子查询</code></font>，和之前的例子不一样，内层查询和外层是相关的，所以在实现上内层查询不是一次返回多个值，而是返回一个值（88），这一个值只对应sc的第一行，第二行依旧按照如此进行查询。</p><h5 id="带有ANY-SOME-或者ALL谓词的子查询"><a href="#带有ANY-SOME-或者ALL谓词的子查询" class="headerlink" title="带有ANY(SOME)或者ALL谓词的子查询"></a>带有ANY(SOME)或者ALL谓词的子查询</h5><p>望文生义，如果内层查询返回一组数，那么使用any或者all来修饰，同时配合运算比较符号来查询，例如</p><p>>any 表示大于子查询结果中的某个值</p><p><strong>例1：</strong>查询非计算机科学系中比计算机系<font color = red>任意</font>一个学生年龄小的学生姓名和年龄</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname,sage<br><span class="hljs-keyword">from</span> student <br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">!=</span> &quot;CS&quot;<br><span class="hljs-keyword">and</span> sage<span class="hljs-operator">&lt;</span><span class="hljs-keyword">any</span><br>(<br><span class="hljs-keyword">select</span> sage <br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> &quot;CS&quot;<br>);<br></code></pre></td></tr></table></figure><p><strong>例2：</strong>查询非计算机科学系中比计算机系<font color = red>所有</font>一个学生年龄小的学生姓名和年龄</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname,sage<br><span class="hljs-keyword">from</span> student <br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">!=</span> &quot;CS&quot;<br><span class="hljs-keyword">and</span> sage<span class="hljs-operator">&lt;</span><span class="hljs-keyword">all</span><br>(<br><span class="hljs-keyword">select</span> sage <br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> &quot;CS&quot;<br>);<br></code></pre></td></tr></table></figure><h5 id="带有EXISTS谓词的子查询"><a href="#带有EXISTS谓词的子查询" class="headerlink" title="带有EXISTS谓词的子查询"></a>带有EXISTS谓词的子查询</h5><p>exists代表存在量词<script type="math/tex">\exists</script>。带有exists谓词的子查询不返回任何数据，只产生逻辑值true和false</p><p><strong>例1：</strong>查询选修了1号课程的学生姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span><br>(<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br>    <span class="hljs-keyword">from</span> sc<br>    <span class="hljs-keyword">where</span> sc.sno <span class="hljs-operator">=</span> student.sno<br>    <span class="hljs-keyword">and</span> sc.cno <span class="hljs-operator">=</span> &quot;1&quot;<br>);<br></code></pre></td></tr></table></figure><p>这也是一个相关子查询，第一次只传一个元组进入内层（这时学号为201215121），然后在sc表中找出学号为201215121的人选择的1号课程，返回如果有值，那么返回true，如果是空值，返回false。直至外层元组全部检索完。</p><p><a href="[MySQL中的EXISTS用法 - 知乎 (zhihu.com"><strong>EXISTS执行顺序</strong></a>](<a href="https://zhuanlan.zhihu.com/p/351922940">https://zhuanlan.zhihu.com/p/351922940</a>))</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> A <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> B <span class="hljs-keyword">WHERE</span> B.id <span class="hljs-operator">=</span> A.id); <br></code></pre></td></tr></table></figure><p>1、首先执行一次外部查询，并缓存结果集，如 SELECT * FROM A</p><p>2、遍历外部查询结果集的每一行记录R，代入子查询中作为条件进行查询，如 SELECT 1 FROM B WHERE B.id = A.id</p><p>3、如果子查询有返回结果，则EXISTS子句返回TRUE，这一行R可作为外部查询的结果行，否则不能作为结果</p><p><strong>例2</strong>：<span id = "jump2">查询选修了全部课程的学生姓名</span>&gt;</p><p>注意mysql里面没有全程量词<script type="math/tex">\forall</script>，但是可以用存在量词和非来等价替换</p><p>​                                                                      </p><script type="math/tex; mode=display">(\forall x)P\equiv \neg(\exists x (\neg P))</script><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br><span class="hljs-comment">/*遍历student的每一行，看是否这一行满足下面存在语句，如代入第一行的学生201215121*/</span><br>(<span class="hljs-comment">/*查找学生201215121所有的没有选的课程，从course表中查找*/</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br>    <span class="hljs-keyword">from</span> course<br>    <span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> <br>    <span class="hljs-comment">/*遍历每一个课程，看这个课程是否没有被选，如代入第一行的课程“数据库”，其cno = 1*/</span><br>    (<br>        <span class="hljs-comment">/*现在学生和课程名都确定了，在sc表中看这个课程学生选择了没有*/</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br>        <span class="hljs-keyword">from</span> sc<br>        <span class="hljs-keyword">where</span> student.sno <span class="hljs-operator">=</span> sc.sno<span class="hljs-comment">/*这里的student.sno可以替换为201215121*/</span><br>        <span class="hljs-keyword">and</span> course.cno <span class="hljs-operator">=</span> sc.cno<span class="hljs-comment">/*这里的course.cno可以替换为1*/</span><br>    )<br>);<br></code></pre></td></tr></table></figure><p><strong>例3：</strong>查询至少选修了学生201215122选修的全部课程的学生号码</p><p>本查询可以用逻辑蕴涵来表达:对于学号为x的学生，对于所有的课程y，只要201215122学生选修了课程y，那么就有学生x选修了课程y</p><p>形式化如下：</p><p>用p表示谓词：学生201215122选修了课程y</p><p>用q表示谓词：学生x选修了课程y</p><p>则上述查询为 ：</p><script type="math/tex; mode=display">(\forall y)p \rightarrow q</script><p>SQL语言中没有蕴涵的逻辑运算，但是可以通过$\exists$和$\neg$来等价替换</p><script type="math/tex; mode=display">p \rightarrow q \equiv \neg p \vee q</script><p>加上前置的条件完成的转换为：</p><script type="math/tex; mode=display">(\forall y)p \rightarrow q \equiv \neg (\exists y)(\neg(\neg p \vee q)) \equiv  \neg (\exists y)(p \wedge \neg q)</script><p>表达的意思为：不存在这样的课程y，学生201215122选修了y，而学生x没有选</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> sno<br><span class="hljs-keyword">from</span> sc scx<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br><span class="hljs-comment">/*遍历sc的每一个学生，如代入第一行的学生201215121*/</span><br>(<br><span class="hljs-comment">/*学生已经确定了，看是否存在这样的课程y，学生201215122选修了y，而学生x没有选*/</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> sc scy<br><span class="hljs-keyword">where</span> scy.sno <span class="hljs-operator">=</span> &quot;201215122&quot;<br><span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br><span class="hljs-comment">/*遍历学生201215122的每一个课程，看是否还有学生x没有选的*/</span><br>(<br><span class="hljs-comment">/*学生确定了，课程确定了，看这个学生选了这个课程没有，用not exists实现，不能用!=*/</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> sc scz<br><span class="hljs-keyword">where</span> scz.sno <span class="hljs-operator">=</span> scx.sno<br><span class="hljs-keyword">and</span> scy.cno <span class="hljs-operator">=</span> scz.cno<br>)<br>);<br></code></pre></td></tr></table></figure><p>仿造<a href="#jump2"><strong>例2</strong></a>的另一种解法，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sno<br><span class="hljs-keyword">from</span> student <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br>(<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> sc.sno <span class="hljs-operator">=</span> &quot;201215122&quot;<br><span class="hljs-keyword">and</span> sc.cno <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <br>(<br><span class="hljs-keyword">select</span> cno<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> sc.sno <span class="hljs-operator">=</span> student.sno<br>)<br>);<br></code></pre></td></tr></table></figure><h4 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h4><p>select语句的查询结果是元组的集合，所以多个select语句的结果可以进行结合操作。集合操作主要包括并操作union、交操作intersect和差操作except。</p><font color = red>注意：参加集合操作的各查询结果的列数必须相同；对应的数据类型也必须相同</font><p><strong>例1：</strong>查询计算机科学系的学生及年龄不大于19岁的学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CS&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sage<span class="hljs-operator">&lt;=</span><span class="hljs-number">19</span>;<br></code></pre></td></tr></table></figure><p>实际上使用union将多个查询结果合并起来，系统会自动去掉重复的元组。如果要保留，使用union all操作符。</p><p><strong>例2：</strong>查询选修了课程1或者选修了课程2的学生的姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span><br>(<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> student.sno <span class="hljs-operator">=</span> sc.sno<br><span class="hljs-keyword">and</span> sc.cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> student.sno <span class="hljs-operator">=</span> sc.sno<br><span class="hljs-keyword">and</span> sc.cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>实际上这个union等价于下面的语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span><br>(<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> student.sno <span class="hljs-operator">=</span> sc.sno<br><span class="hljs-keyword">and</span> (sc.cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">or</span> sc.cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p><strong>例3：</strong>查询计算机科学系的学生与年龄不大于19岁的学生的交集</p><p>有些数据库语言是没有intersect交集的操作，可以使用in语句来等价替换，如下面的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CS&#x27;</span><br><span class="hljs-keyword">and</span> sno <span class="hljs-keyword">in</span><br>(<br><span class="hljs-keyword">select</span> sno <br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sage <span class="hljs-operator">&lt;</span> <span class="hljs-number">19</span><br>);<br></code></pre></td></tr></table></figure><p>解释一下这个语句：一个元组即满足属性sdept = ‘cs’又满足in中的条件，年龄不大于19</p><p>如果不能理解，还可以用and语句来实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CS&#x27;</span><br><span class="hljs-keyword">and</span> sage<span class="hljs-operator">&lt;=</span><span class="hljs-number">19</span>;<br></code></pre></td></tr></table></figure><p><strong>例4：</strong>查询计算机科学系的学生与年龄不大于19岁的学生的差集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CS&#x27;</span><br><span class="hljs-keyword">and</span> sno <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span><br>(<br><span class="hljs-keyword">select</span> sno <br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sage <span class="hljs-operator">&lt;</span> <span class="hljs-number">19</span><br>);<br></code></pre></td></tr></table></figure><h4 id="基于派生词的查询"><a href="#基于派生词的查询" class="headerlink" title="基于派生词的查询"></a>基于派生词的查询</h4><p>子查询不仅可以出现在where子句中，<strong>还可以出现在from子句中</strong>，这是子查询生成的临时派生表成为主查询的查询对象。</p><p><strong>例1：</strong><a href="#jump3">找出每个学生超过他自己选修课程平均成绩的课程号</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sno , cno<br><span class="hljs-keyword">from</span> sc , <br>(<br><span class="hljs-keyword">select</span> sno , <span class="hljs-built_in">avg</span>(grade)<br><span class="hljs-keyword">from</span> sc <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno<br>) <br><span class="hljs-keyword">as</span> avg_sc(avg_sno , avg_grade)<br><span class="hljs-keyword">where</span> sc.grade<span class="hljs-operator">&gt;</span>avg_sc.avg_grade<br><span class="hljs-keyword">and</span> sc.sno <span class="hljs-operator">=</span> avg_sc.avg_sno;<br></code></pre></td></tr></table></figure><p>这种派生的方法实际上是把两个表连接了起来，如果原有的两个表的行列数分别为(m1,n1)和(m2,n2),则得到的规模为(m1*m2,n1+n2)</p><h4 id="select语句的一般格式"><a href="#select语句的一般格式" class="headerlink" title="select语句的一般格式"></a>select语句的一般格式</h4><p>select语句是mysql的核心语句，一般有如下格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> [<span class="hljs-keyword">all</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">distinct</span>] <span class="hljs-operator">&lt;</span>目标列表达式<span class="hljs-operator">&gt;</span> [别名] , ……<br><span class="hljs-keyword">from</span> <span class="hljs-operator">&lt;</span>表名或者视图名<span class="hljs-operator">&gt;</span> [别名] , […… <span class="hljs-operator">|</span> (<span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span>派生<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">as</span>] <span class="hljs-operator">&lt;</span>别名<span class="hljs-operator">&gt;</span>)<br>[<span class="hljs-keyword">where</span> <span class="hljs-operator">&lt;</span>条件表达式<span class="hljs-operator">&gt;</span>]<br>[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">having</span> <span class="hljs-operator">&lt;</span>条件表达式<span class="hljs-operator">&gt;</span>]]<br>[<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-operator">&lt;&gt;</span>列名 [<span class="hljs-keyword">ASC</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DESC</span>]]<br></code></pre></td></tr></table></figure><h5 id="目标列表达式的可选格式"><a href="#目标列表达式的可选格式" class="headerlink" title="目标列表达式的可选格式"></a>目标列表达式的可选格式</h5><ul><li>*</li><li>&lt;表名&gt;.*</li><li>count([distinct | all] *)</li><li>[&lt;表名&gt;.]&lt;属性列表达式&gt;</li></ul><p>其中属性列表达式可以由属性列、作用于属性列的聚集函数和常量的任意算数运算(+，-，*，/)组成的运算公式，<a href="#jump4">见例题</a></p><h5 id="聚集函数的一般形式"><a href="#聚集函数的一般形式" class="headerlink" title="聚集函数的一般形式"></a>聚集函数的一般形式</h5><script type="math/tex; mode=display">\begin{Bmatrix} count\\ sum\\ avg\\   max\\ min\end{Bmatrix} =({\,} [{\,}distinct {\,} | {\,} all{\,}] {\,}  *)</script><h5 id="where子句的条件表达式的可选格式"><a href="#where子句的条件表达式的可选格式" class="headerlink" title="where子句的条件表达式的可选格式"></a>where子句的条件表达式的可选格式</h5><p>(1)其中 $\theta$ 为比较符号</p><script type="math/tex; mode=display"><属性列名> \theta \begin{Bmatrix}<属性列名>\\<常量>\\{\,} [{\,}distinct {\,} | {\,} all{\,}] {\,} (select语句)\end{Bmatrix}</script><p>(2)</p><script type="math/tex; mode=display"><属性列名> [NOT]{\,} between\begin{Bmatrix}<属性列名>\\<常量>\\{\,} [{\,}distinct {\,} | {\,} all{\,}] {\,} (select语句)\end{Bmatrix}{\,}and{\,}\begin{Bmatrix}<属性列名>\\<常量>\\{\,} [{\,}distinct {\,} | {\,} all{\,}] {\,} (select语句)\end{Bmatrix}</script><p>(3)</p><script type="math/tex; mode=display"><属性列名> [NOT]{\,} in\begin{Bmatrix}(<值1>[{\,},{\,}[值2]{\,}]\cdots)\\(select语句)\end{Bmatrix}</script><p>(4)</p><script type="math/tex; mode=display"><属性列名> [not] {\,}{\,} like <匹配串></script><p>(5)</p><script type="math/tex; mode=display"><属性列名> is {\,}{\,}[not] {\,}{\,} null</script><p>(6)</p><script type="math/tex; mode=display">not {\quad} exists{\quad} (select语句)</script><p>(7)</p><script type="math/tex; mode=display"><条件表达式>\begin{Bmatrix}AND\\\\OR\end{Bmatrix}{\,}and{\,}\begin{bmatrix}\begin{Bmatrix}AND\\\\OR\end{Bmatrix}& <条件表达式>\end{bmatrix}</script><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h4 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h4><h5 id="建立视图"><a href="#建立视图" class="headerlink" title="建立视图"></a>建立视图</h5><p>使用create view 命令建立视图，一般的格式为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span><span class="hljs-operator">&lt;</span>视图名<span class="hljs-operator">&gt;</span> [(列名)...]<br><span class="hljs-keyword">as</span> <span class="hljs-operator">&lt;</span>子查询<span class="hljs-operator">&gt;</span><br>[<span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option];<br></code></pre></td></tr></table></figure><p>with check option表示对视图进行update、insert和delete操作时要保证更新、插入或删除的行满足视图定义中的谓词条件。</p><p><strong>例1：</strong>建立信息系学生的视图，并要求进行修改和插入操作时仍需保证该视图只有信息系的学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> IS_Student<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> sno , sname , sage<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> &quot;IS&quot;<br><span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option;<br></code></pre></td></tr></table></figure><p>执行create view语句的结果<code>只是把视图的定义存入数据字典，并不执行其中的select语句</code>。只是在对视图查询的时候，才按视图的定义从基本表中将数据查出。所以，如果基本表的结构被破坏，视图可能不会正常工作。</p><p><strong>例2：</strong>建立信息系选修了一号课程的学生的视图(包括学生、姓名、成绩)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> is_s1(sno,sname,grade)<br><span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> student.sno , sname , grade<br><span class="hljs-keyword">from</span> student , sc<br><span class="hljs-keyword">where</span> student.sdept <span class="hljs-operator">=</span> &quot;IS&quot;<br><span class="hljs-keyword">and</span> student.sno <span class="hljs-operator">=</span> sc.sno<br><span class="hljs-keyword">and</span> sc.cno  <span class="hljs-operator">=</span> &quot;1&quot;<br><span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option;<br></code></pre></td></tr></table></figure><p><strong>例3：</strong>将学生的学号以及平均成绩定义为一个视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> s_g(sno ,gavg)<br><span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> sno ,<span class="hljs-built_in">avg</span>(grade)<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno;<br></code></pre></td></tr></table></figure><h5 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h5><p><strong>例1：</strong>删除视图is_s1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> is_s1;<br></code></pre></td></tr></table></figure><p>如果在is_s1视图的基础上建立了其他视图，那么这里是不能删除成功的，在后方插入cascade指令可以把和is_s1级联的视图同时删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> is_s1 cascade;<br></code></pre></td></tr></table></figure><h4 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h4><p><strong>例1：</strong>在s_g视图中查询平均成绩在90分以上的学生学号和平均成绩</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> s_g<br><span class="hljs-keyword">where</span> <span class="hljs-built_in">avg</span>(gavg)<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure><p>但是会报错，invalid use of group function，因为s_g底层是group聚集函数组成的，不能使用where语句</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇博客</title>
    <link href="/2022/10/03/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/10/03/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>终于搭建好博客了，以后会在这里发布一些文章，同时分享一些自己的生活。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/03/hello-world/"/>
    <url>/2022/10/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>一</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script type="math/tex; mode=display">p = p1*p2\\f(x) = \sum^{N-1}_{i=0}{a_{i}*x^{i}} \mod{p} \\g(x) = \sum^{N-1}_{i=0}{b_{i}*x^{i}} \mod{p}\\\\f_1(x) = f(x) \mod{p_1}\\g_1(x) = g(x) \mod{p_2}\\\\f_2(x) = f(x) \mod{p_2}\\g_2(x) = g(x) \mod{p_2}</script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BGV参数设置</title>
    <link href="/2022/01/19/BGV%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/"/>
    <url>/2022/01/19/BGV%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="BGV参数设置"><a href="#BGV参数设置" class="headerlink" title="BGV参数设置"></a>BGV参数设置</h1><h2 id="格知识基础（lattice）"><a href="#格知识基础（lattice）" class="headerlink" title="格知识基础（lattice）"></a>格知识基础（lattice）</h2><h3 id="格的定义"><a href="#格的定义" class="headerlink" title="格的定义"></a>格的定义</h3><p>格（lattice）就是说在一个空间内，我定义一组basis向量（基向量）。然后这些basis向量加上整数系数构成的所有点就是格了。非常简单。最简单的例子就是我们的直角坐标系，（0，1），（1，0）就是basis向量，其它所有整数点都是格。画图就是：</p><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20230119133652103.png" alt="image-20230119133652103"></p><p>我们再看详细的定义：</p><p>令$ v_1,…, v_n \in \mathbb{R}^m$  是一组线性独立向量.。格$L$是这些向量的线性组合所形成的空间。</p><script type="math/tex; mode=display">L = {a_1v_1 + a_2v_2 + ··· + a_nv_n : a_1, a_2,...,a_n} \in \mathbb{Z}</script><p>放在二维中就是坐标系中一系列的点：</p><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20230119133729955.png" alt="image-20230119133729955"></p><h3 id="最近向量问题-CVP"><a href="#最近向量问题-CVP" class="headerlink" title="最近向量问题(CVP)"></a>最近向量问题(CVP)</h3><p><strong>定义 The Closest Vector Problem (CVP):</strong>给定一个向量$w \in \mathbb{R}^m$，这个向量不在格L中，我们需要找一个最短的向量$v \in L$，使得欧几里得范数(Euclidean norm)：$|v-w|$最小</p><p>如下图所示：</p><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20230119141708556.png" alt="image-20230119141708556"></p><p>下面给出babai’s Algorithm来解决最短向量问题：</p><ul><li>把向量表示成如下形式（高斯消元法求解线性代数方程）：$w = t_1v_1 + t_2v_2 + ··· + t_nv_n \;\; where \;\; t _1,…,t_n \in \mathbb{R}$</li><li>令$a_i = round(t_i) \in \mathbb{Z}$，这里的round表示四舍五入取整</li><li>最后得到最短向量$v = a_1v_1 + a_2v_2 + ··· + a_nv_n \;\; where \;\; a_1,…,a_n \in \mathbb{Z}$</li></ul><p>看起来很合理，但实际上对向量的基有要求，即这些基尽可能的正交，如果不正交，那么会得到错误的结果，如下图所示，这是一个二维的格，如果格的基夹角太小（正交的不好），那么会求得错误的结果</p><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20230119142638087.png" alt="image-20230119142638087"></p><font color="red">也就是说，我们有必要把格的基正交化</font><h3 id="正交化"><a href="#正交化" class="headerlink" title="正交化"></a>正交化</h3><p>我们介绍几种正交化方法：</p><ul><li>高斯算法，只能处理二维向量</li><li>LLL格约算法，可以处理高维向量，让高维的基正交化</li></ul><p>当维度很高的时候，正交化的时间复杂度较高，导致解密时间很长</p><h2 id="LWE困难问题"><a href="#LWE困难问题" class="headerlink" title="LWE困难问题"></a>LWE困难问题</h2><h3 id="LWE基本介绍"><a href="#LWE基本介绍" class="headerlink" title="LWE基本介绍"></a>LWE基本介绍</h3><p>假设一个如下线性方程组：</p><script type="math/tex; mode=display">\begin{equation}\left\{\begin{array}{c}    a_{11}x_1+a_{12}x_2+\cdots+a_{1n}x_n=y_1 \\    a_{21}x_1+a_{22}x_2+\cdots+a_{2n}x_n=y_2 \\    \cdots \\    a_{n1}x_1+a_{n2}x_2+\cdots+a_{nn}x_n=y_n\end{array}\right.\end{equation}</script><p>要解这样一个方程很容易，只需要用高斯消元法可以一步步求解，但我们思考一个变式。如果把每一项都加上一个误差项呢？</p><script type="math/tex; mode=display">\begin{equation}\left\{\begin{array}{c}    a_{11}x_1+a_{12}x_2   + \varepsilon_2=y_2 \\\end{array}\right.\end{equation}</script><p>是不是这个问题就变得困难起来了，我们再仔细观察，很类似于CVP问题</p><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20230119144312367.png" alt="image-20230119144312367">在这个例子中$\vec{v_i} = (a_{i1},a_{i2},\dots,a_{in})$为格中第$i$个基向量，而$(x_1,x_2,\dots,x_n)$为我们要求解的系数，而$\vec{w} = (y_1,y_2,\dots,y_n)$为随机向量。</p><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20230119144605227.png" alt="image-20230119144605227"></p><h3 id="RLWE介绍"><a href="#RLWE介绍" class="headerlink" title="RLWE介绍"></a>RLWE介绍</h3><p>原理与LEW类似，只不过把运算域搬到了多项式环上，其优点是：</p><ul><li>加密的密钥更小</li><li>有了NTT优化多项式运算，加密时间更短</li></ul><h2 id="BGV参数设置-1"><a href="#BGV参数设置-1" class="headerlink" title="BGV参数设置"></a>BGV参数设置</h2><p>提出了一个经验推导的公式，该公式将给定密文模数大小logq的安全级别λ与维数n联系起来，从而推导安全性公式。</p><h3 id="Lattices-and-Hermite-Factor"><a href="#Lattices-and-Hermite-Factor" class="headerlink" title="Lattices and Hermite Factor"></a>Lattices and Hermite Factor</h3><p>给定一个矩阵$B = (\vec{b_1},\vec{b_2},\dots,\vec{b_n})$，以此作为基向量格的定义：</p><script type="math/tex; mode=display">L = L(B) = \{\sum^k_{i=1}\gamma_i*\vec{b_i}:\gamma_i \in \mathbb{Z},\vec{b_i} \in B \}</script><p>假设有一个格$L$，那么他的体积表示为$Vol(L) = \sqrt{det(B^TB)}$</p><p>定义Hermite Factor:</p><script type="math/tex; mode=display">\delta^k_0 = \|b_1\|/Vol(L)^{1/k}</script><p>这里的$b_i$为格L约简之后的基中的最短向量。</p><h3 id="基于RLWE的安全方案"><a href="#基于RLWE的安全方案" class="headerlink" title="基于RLWE的安全方案"></a>基于RLWE的安全方案</h3><p>我们回顾LWE的方案：</p><blockquote><p>密钥$s\in \mathbb{Z}^n_q$,给定一个$b\in \mathbb{Z}^m_q$和$A \in \mathbb{Z}^{m×n}_q$,满足$A*s+e = b \mod{q}$，这里e从误差分布中采样</p></blockquote><p>基于LWE的方案的安全性取决于这个问题的难解性，而对这些方案的攻击是找到有效的算法来解决它们。有很多方案来解决LWE问题，其中大部分是基于格约简。也就是说，从一个差的格基，找到一个更好的，更正交的基。</p><p>实际中使用的最有名的格约简算法是BKZ(块Korkin-Zolotarev约简)。在这些算法中，时间复杂性和约化基的正交性由Hermite因子来表征。具体地说，算法的复杂度由Hermite因子来表示：</p><script type="math/tex; mode=display">log(t_{BKZ}(\delta_o)) = \omega(- \frac{log(log(\delta_0))}{log(\delta_0)})</script><h3 id="BGV安全性分析"><a href="#BGV安全性分析" class="headerlink" title="BGV安全性分析"></a>BGV安全性分析</h3><p>我们考虑满秩的格L，格的最短向量的范数为$|\vec{b_1}| = \delta^kq^{n/k}$,攻击者选择一个采样数M，使得$|b_1| = \delta^Mq^{n/M}$</p><p>最小，前几年的工作表明，当$M = \sqrt{nlog(q)/log \delta_0}$的时候，可以缩减最短向量$|\vec{b_1}| = q$，这表明</p><script type="math/tex; mode=display">log q = log(\delta_0^M q^{n/M}) = 2\sqrt{nlog(q)log(\delta_0)}\\\Rightarrow n  = log(q)/(4log(\delta_0))</script><p>我们把这个等式代入到，等式(6)，可以得到对应的BGV参数设置</p><script type="math/tex; mode=display">\lambda \approx -log(\cfrac{A*log(q)}{n})\cfrac{Bn}{logq} + C\sqrt{\cfrac{logq}{n}}log(\cfrac{n}{log(q)})</script><p>其中$\lambda$为安全参数，$log(q)$为密文模数的比特数</p><p>当错误分布为高斯分布的时候:</p><ul><li>A = 0.65 </li><li>B = 0.53 </li><li>C = 22.88 </li></ul><p><img src="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20230119153735221.png" alt="image-20230119153735221"></p>]]></content>
    
    
    <categories>
      
      <category>密码学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BGV</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
