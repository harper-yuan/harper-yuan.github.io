<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NTT的实现及其加速</title>
      <link href="/2022/12/14/NTT%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%85%B6%E5%8A%A0%E9%80%9F/"/>
      <url>/2022/12/14/NTT%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8F%8A%E5%85%B6%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ntt的实现及其加速">NTT的实现及其加速</h1><h2 id="ntt快速数论变换原理">NTT快速数论变换原理</h2><h3 id="多项式相乘的困难">多项式相乘的困难</h3><p>假设有多项式A(x)，一共有n项,最高次项为<spanclass="math inline">\(x^{n-1}\)</span>,设其系数为<spanclass="math inline">\(a =(a[0],a[1],\cdots,a[n-1])\)</span>，类似的假设另一个多项式B(x),设其系数为<spanclass="math inline">\(b =(b[0],b[1],\cdots,b[n-1])\)</span>，如果想要将两个多项式相乘，很明显一共要乘<spanclass="math inline">\(n^2\)</span>次，能不能减少乘法的次数，使其复杂度比<spanclass="math inline">\(O(n^2)\)</span>更少呢？</p><h3id="基于fft快速傅里叶变换的多项式相乘">基于FFT(快速傅里叶变换)的多项式相乘</h3><p>把<spanclass="math inline">\(x=x_0\)</span>代入A(x)可以得到多项式在点x0处的值，类似的，我们代入n个这样的点$(x_0,x_1,,x_{n-1})<spanclass="math inline">\(,可以得到n个多项式取值\)</span>(A(x_0),A(x_1),,A(x_{n-1}))$，可以证明，仅通过这n个多项式取值，我们可以还原出原本的多项式。</p><blockquote><p>证明：</p><p>假设还原出的多项式不唯一，分别设为f(x)和g(x)，这个两个多项式的最高次为n-1,否则还原失败</p><p>令h(x) = f(x)-g(x) ，这个多项式的最高次至少为n-1</p><p>那么代入$(x_0,x_1,,x_{n-1})$个点，h(x)均等于0，即这个多项式有n个解</p><p>而即使在复数域上n-1次方程也至多有n-1个解，矛盾</p><p>故只能还原出唯一的一个多项式</p></blockquote><p>类似的，代入多项式B(x)得到$(B(x_0),B(x_1),,B(x_{n-1}))$，我们在进行下面的点乘操作得到 <spanclass="math display">\[(A(x_0)*B(x_0),A(x_1)*B(x_1),\cdots,A(x_{n-1})*B(x_{n-1}))\]</span>这是一个n维向量，按照这个向量还原多项式，我们就可以得到两个多项式的乘积<span class="math display">\[C(x) = A(x)*B(X)\]</span>注意这里的乘法为多项式乘法，这样多项式相乘就巧妙的转化为点乘，复杂度只有O(n)</p><p>但有个疑问，把点代入多项式计算不是也有计算量吗？这个算法快就是因为，我们可以设置点$(x_0,x_1,,x_{n-1})$，这些点经过精心设置，可以在计算例如A(x0)的时候很快。</p><h3 id="基于ct蝴蝶变换的ntt算法">基于CT蝴蝶变换的NTT算法</h3><p>注意这里的参数需要满足一些条件</p><ul><li><p><span class="math inline">\(q \equiv 1 \mod{2n}\)</span></p></li><li><p><span class="math inline">\(n = 2^k,k\in Z_+\)</span></p></li><li><p><spanclass="math inline">\(\psi\)</span>为模数q的2N次单位根，即满足<spanclass="math inline">\(\psi^{2n} \equiv 1 \mod{q}\)</span></p></li><li><p>数组$= (1,<sup>1,</sup>2,,^{n-1}) $</p></li><li><p>数组<span class="math inline">\(\psi_{rev}\)</span>是把数组<spanclass="math inline">\(\phi\)</span>按照bit-reversed顺序重新排列出来的，见下面的例子(多项式次数n= 8)</p><blockquote><p>X(0) = X(0,0,0) --&gt; X(0,0,0) = X(0)</p><p>X(1) = X(0,0,1) --&gt; X(1,0,0) = X(4)</p><p>X(2) = X(0,1,0) --&gt; X(0,1,0) = X(2)</p><p>X(3) = X(0,1,1) --&gt; X(1,1,0) = X(6)</p><p>以此类推</p></blockquote></li></ul><p>下面是蝴蝶变换算法</p><figure><imgsrc="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20221215122722792.png"alt="image-20221215122722792" /><figcaption aria-hidden="true">image-20221215122722792</figcaption></figure><h3 id="基于gs蝴蝶变换的ntt逆变换">基于GS蝴蝶变换的NTT逆变换</h3><figure><imgsrc="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20221215122822035.png"alt="image-20221215122822035" /><figcaption aria-hidden="true">image-20221215122822035</figcaption></figure><h2 id="barrett-reduction-乘法取模加速">Barrett Reduction乘法取模加速</h2><h3 id="参考博客">参考博客</h3><ul><li><ahref="https://blog.csdn.net/YKRY35/article/details/79179285">(37条消息)大数取模运算Barrett reduction_YKRY35的博客-CSDN博客_大数取模</a></li><li><ahref="https://www.luogu.com.cn/blog/Sweetlemon/barrett-reduction">BarrettReduction 乘法取模加速 - Sweetlemon 的博客 - 洛谷博客(luogu.com.cn)</a></li></ul><p>Barrettreduction是一种求模运算的优化方法，它可以将求模运算的时间复杂度从O(n)降低到O(logn)。</p><h3 id="原理简述">原理简述</h3><p>一般来说，32位整数加法操作比乘法操作快得多，大概快3到8倍。而移位操作又比加法操作快10倍以上，核心思想就是把除法尽可能迁移到移位操作上。</p><p>我们（人工）计算取模，用的是 <span class="math display">\[r= a\bmod p=a-\left\lfloor \dfrac{a}{p} \right\rfloor *p\]</span></p><p>这个计算中有除法，在计算机组成原理中，两个32bit的数相除需要32次移位和32次加减法操作，开销比较大。</p><p>而两个32bit的数相乘只需要32次移位操作。我们希望能用乘法替换除法，计算出<span class="math display">\[q=\left\lfloor \dfrac{a}{p} \right\rfloor\]</span> 我们可以钦定一个整数 k，再弄出一个整数 m，使得 <spanclass="math display">\[\dfrac{m}{2^k}\approx\dfrac{1}{p}\]</span> 那么 q不就约等于$$了吗？这样除法运算就被拆成了一次乘法和k次位移，速度大大加快。</p><p>为了防止算出的商超过实际的商，我们一般取 <spanclass="math display">\[m=\left\lfloor \dfrac{2^k}{p} \right\rfloor\]</span> 这里，我们取 <span class="math display">\[k\ge \lceil 2\log_2 p \rceil\\]</span> 也就是使得$ 2<sup>kp</sup>2$。下面我们证明，这样取 k时，<spanclass="math inline">\(0\lea-pq&lt;p\)</span>，也就是我们稍后在计算余数<spanclass="math inline">\(a-pq\)</span>时，得到的答案<del>至多需要再做一次减法</del> 不需要再调整。</p><blockquote><p>下面是这样设置参数的合理性证明，证明<span class="math inline">\(0\lea-pq&lt;p\)</span>：</p><p>由于 <span class="math inline">\(q=\dfrac{am}{2^k}\)</span></p><p>因此 <spanclass="math inline">\(pq=\dfrac{apm}{2^k}，a-pq=\dfrac{a}{2^k}\cdot(2^k-pm)\)</span></p><p>第一点，由于<span class="math inline">\(2^k\approxp^2\)</span>，而a是模p意义下两个数的乘积，所以<spanclass="math inline">\(a&lt;p^2\)</span></p><p>于是有<spanclass="math inline">\(0&lt;\dfrac{a}{2^k}&lt;1\)</span></p><p>第二点，由于<span class="math inline">\(m=\left\lfloor \dfrac{2^k}{p}\right\rfloor\)</span></p><p>所以有$ -1 &lt; m $，进一步推出<spanclass="math inline">\(0\leq(2^k-pm)&lt;p\)</span></p><p>综上可以证明<span class="math inline">\(0\le a-pq&lt;p\)</span></p></blockquote><p>总结这个算法的流程如下：</p><ul><li>根据 p<em>p</em> 的规模选取合适的 k，一般要求 <spanclass="math inline">\(k\ge \lceil 2\log_2 p \rceil\)</span>。</li><li>根据 k,p 预处理出 <span class="math inline">\(m=\left\lfloor\dfrac{2^k}{p} \right\rfloor\)</span>。</li><li>实际计算时，用 <span class="math inline">\(q=\dfrac{a\cdotm}{2^k}\)</span>计算出商，再用$ r=a-pq$ 得出余数</li></ul><h3 id="c例子">c++例子</h3><p>下面是一个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">RingMultiplier::mulModBarrett</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span>&amp; r, <span class="hljs-type">uint64_t</span> a, <span class="hljs-type">uint64_t</span> b, <span class="hljs-type">uint64_t</span> p, <span class="hljs-type">uint64_t</span> pr)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">unsigned</span> __int128 mul = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">unsigned</span> __int128&gt;(a) * b;<br><span class="hljs-type">uint64_t</span> abot = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint64_t</span>&gt;(mul);<span class="hljs-comment">//只会返回a*b的低64位</span><br><span class="hljs-type">uint64_t</span> atop = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint64_t</span>&gt;(mul &gt;&gt; <span class="hljs-number">64</span>);<span class="hljs-comment">//得到a*b的高64位</span><br><span class="hljs-type">unsigned</span> __int128 tmp = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">unsigned</span> __int128&gt;(abot) * pr;<br>tmp &gt;&gt;= <span class="hljs-number">64</span>;<br>tmp += <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">unsigned</span> __int128&gt;(atop) * pr;<br>tmp &gt;&gt;= kbar2 - <span class="hljs-number">64</span>;<br>tmp *= p;<br>tmp = mul - tmp;<br>r = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">uint64_t</span>&gt;(tmp);<br><span class="hljs-keyword">if</span>(r &gt;= p) r -= p;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数主要用来计算r=(a*b) modp的结果，采用Barrett乘法算法，其中<spanclass="math inline">\(pr=2^{kbar2} /p\)</span>，kbar2是一个预设的常量，模数p的大约满足<spanclass="math inline">\(log_2p = 60\)</span>，所以这里的kbar2 =120,于是有<span class="math inline">\(pr \approx p\)</span>。</p><p>算法原理： <span class="math display">\[r = mul - \left\lfloor \dfrac{mul}{p}\right\rfloor*p \\=mul - mul*\dfrac{pr}{2^k}*p \quad where \quad r=2^k \quad and \quad pr= \dfrac{2^k}{p}\\这里把mul*pr/2^k变成如下操作,其中abot存放mul的低64位，atop存放高64位\\[(abot*pr)&gt;&gt;64+atop*pr]&gt;&gt;(kbar2-64) \\=[(abot*pr)+atop*pr*2^{64}]/(2^{kbar2})\\这样可以完成barrett的快速求余操作\]</span> 算法步骤：</p><ul><li>1）先把a*b的结果存到mul变量中，abot存放mul的低64位，atop存放高64位；</li><li>2）然后把abot乘以预设的pr，得到tmp，并右移64位；</li><li>3）再把atop乘以pr，再加到tmp上；</li><li>4）把tmp右移kbar2-64位，再乘以p；</li><li>5）最后求出mul-tmp，得到r；</li><li>6）最后判断r是否大于p，如果大于，则减去p，得到最终结果。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NTT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sm2椭圆曲线公钥密码算法</title>
      <link href="/2022/12/05/sm2%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/"/>
      <url>/2022/12/05/sm2%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="sm2椭圆曲线公钥密码算法">sm2椭圆曲线公钥密码算法</h1><h2 id="背景">背景</h2><h3 id="国密算法介绍">国密算法介绍</h3><p>国密即国家密码局认定的国产密码算法。主要有SM1，SM2，SM3，SM4。<ahref="https://so.csdn.net/so/search?q=密钥&amp;spm=1001.2101.3001.7020">密钥</a>长度和分组长度均为128位。</p><ul><li><p>SM1为对称加密。其加密强度与AES相当。该算法不公开，调用该算法时，需要通过加密芯片的接口进行调用。</p></li><li><p>SM2为非对称加密，基于ECC。该算法已公开。由于该算法基于ECC，故其签名速度与秘钥生成速度都快于RSA。ECC256位（SM2采用的就是ECC 256位的一种）安全强度比RSA2048位高，但运算速度快于RSA。</p></li><li><p>SM3消息摘要。可以用MD5作为对比理解。该算法已公开。校验结果为256位。</p></li><li><p>SM4无线局域网标准的分组数据算法。对称加密，密钥长度和分组长度均为128位。</p></li></ul><p>由于SM1、SM4加解密的分组大小为128bit，故对消息进行加解密时，若消息长度过长，需要进行分组，要消息长度不足，则要进行填充。</p><h3 id="sm2算法简介">SM2算法简介</h3><p>SM2椭圆曲线公钥密码算法是我国自主设计的公钥密码算法，包括SM2-1椭圆曲线数字签名算法，SM2-2椭圆曲线密钥交换协议，SM2-3椭圆曲线公钥加密算法，分别用于实现数字签名密钥协商和数据加密等功能。SM2算法与RSA算法不同的是，SM2算法是基于椭圆曲线上点群离散对数难题，相对于RSA算法，256位的SM2密码强度已经比2048位的RSA密码强度要高。</p><p>sm2主要满足电子认证服务系统等应用需求。</p><h2 id="椭圆曲线介绍">椭圆曲线介绍</h2><ul><li><ahref="https://link.springer.com/content/pdf/10.1007/978-1-4939-1711-2.pdf">参考书籍</a></li></ul><h3 id="基本数学形式">基本数学形式</h3><p>椭圆曲线是下面方程的一组解： <span class="math display">\[Y^2 = X^3 + AX + B\]</span>这种类型的方程也被称为魏尔斯特拉斯方程，得名于19世纪对其进行广泛研究的数学家。下面给两个曲线的实例并画给出图片：<span class="math display">\[E1 : Y^2 = X^3 − 3X + 3 \;and\; E2 : Y ^2 = X^3 − 6X + 5\]</span> <img src="/2022/12/05/sm2%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E6%A0%B7%E4%BE%8B.png" class="椭圆曲线图"></p><figure><imgsrc="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20221205130657777.png"alt="1" /><figcaption aria-hidden="true">1</figcaption></figure><h3 id="实数域上椭圆曲线">实数域上椭圆曲线</h3><h4 id="加法运算">加法运算</h4><p>令E为如下椭圆曲线： <span class="math display">\[Y ^2 = X^3 − 15X + 18.\]</span> 点P = (7, 16) 和 Q = (1, 2)为椭圆曲线上的两点，并构成直线L:<span class="math display">\[L : Y = \frac{7}{3}X − 1/3.\]</span> 如下图所示，直线L和椭圆曲线E交于三个点P,Q,R</p><img src="/2022/12/05/sm2%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E4%BA%A4%E7%82%B9%E5%9B%BE.png" class="椭圆曲线交点图"><figure><imgsrc="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20221205131119418.png"alt="image-20221205131119418" /><figcaption aria-hidden="true">image-20221205131119418</figcaption></figure><p>点R关于x轴对称得到R',我们定义椭圆曲线d上的加法运算, <spanclass="math display">\[P \oplus Q = R&#39;,\]</span>和我们通常理解的加法不同，这里的加法是在曲线上进行的，也就是说给出两个点，相加一定可以得到椭圆曲线上的第三个点R'，这个点就是加法的结果。</p><h4 id="加法运算瓶颈无穷远点o">加法运算瓶颈——无穷远点O</h4><p>还是按照上面的图片，我们尝试做这样的加法 <spanclass="math display">\[R \oplus R&#39;=?\]</span>按照上一节的加法运算，直线RR‘应该和椭圆曲线交于三个点，但是这里没有第三个点，这时候该怎么办？数学家定义了一个无穷远点<spanclass="math inline">\(O\)</span>,并假设点<spanclass="math inline">\(O\)</span>也在椭圆曲线上，这样RR'就能交于椭圆曲线的点<spanclass="math inline">\(O\)</span>了,于是有 <span class="math display">\[R \oplus R&#39;=O.\]</span> 基于无穷远点有这样的性质</p><ul><li>无穷远点<spanclass="math inline">\(O\)</span>和椭圆曲线上任意点P的连线一定是垂直于x轴的</li></ul><p>结合之前的加法运算，于是有公式： <span class="math display">\[P \oplus O = P\]</span><font color='red'>这是不是很类似于一个零点，任何点加这个点都是其本身</font></p><p>除此之外，基于无穷远点还有如下性质 <span class="math display">\[P + O = O + P = P \; for \;all\; P ∈ E\\P + (−P) = O \; for \;all\; P ∈ E\\(P + Q) + R = P + (Q + R) \; for \;all\;P, Q, R ∈ E\\P + Q = Q + P  \; for \;all\; P, Q ∈ E\]</span>四条公式分别代表Albel群(交换群)的4条性质：存在零元，存在逆元，结合律，交换律</p><h4 id="加法运算公式">加法运算公式</h4><p>这里给一张图片，很好的讲述了加法的运算公式</p><figure><imgsrc="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20221205132805302.png"alt="1" /><figcaption aria-hidden="true">1</figcaption></figure><img src="/2022/12/05/sm2%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97%E6%B3%95%E5%88%99.png" class="加法运算法则"><h4 id="减法运算公式">减法运算公式</h4><p>定义负数元的概念：如果椭圆曲线上的一个点P=(a,b)，那么点P的负数元为<spanclass="math inline">\(\ominus P = (a,-b)\)</span></p><p>这样定义有很好的性质：</p><blockquote><ul><li><span class="math inline">\(P\ominus P = O\)</span></li></ul></blockquote><p>相当于实数域加减法的相反数的概念。</p><h3 id="有限域上椭圆曲线">有限域上椭圆曲线</h3><h4 id="有限域上椭圆曲线定义">有限域上椭圆曲线定义</h4><p>从上一节的介绍上可以看到，椭圆曲线上的加法运算构成一个群，所有的点可以是小数，也可以整数。那我们能不能加以限制，令椭圆曲线上的点全部都集中在某个域中呢？</p><p><strong>定义1.</strong>令<spanclass="math inline">\(p\)</span>是一个奇素数，在有限域<spanclass="math inline">\(\mathbb{F}_p\)</span>上的椭圆曲线有如下形式, <spanclass="math display">\[E : Y ^2 = X^3 + AX + B \;with\; A, B \in \mathbb{F}_p \;satisfying\;4A^3 + 27B^2 \neq 0\]</span> 这里<span class="math inline">\(4A^3 + 27B^2 \neq0\)</span>是保证椭圆曲线上没有奇异点。</p><p>则定义在有限域上的椭圆曲线坐标是集合. <span class="math display">\[E(\mathbb{F}_p) = \{(x, y) | x, y \in \mathbb{F}_p \; satisfying \; y^2= x^3 + Ax + B\}∪ \{O\}\]</span></p><blockquote><p>一个例子,考虑下面的椭圆曲线： <span class="math display">\[E(\mathbb{F}_{13}) : Y ^2 = X^3 + 3X + 8 \;over \;the \;field\;\mathbb{F}_{13}\]</span> 我们取X=0,得到<spanclass="math inline">\(Y^2=8\pmod{13}\)</span>，但我们解不出这个Y，因为方程无解</p><p>我们再取X = 1,得到<spanclass="math inline">\(Y^2=12\pmod{13}\)</span>，解出两个解Y=5或者Y=8，那么得到在<spanclass="math inline">\(E(\mathbb{F}_{13})\)</span>有两个点(1,5)和(1,8)</p><p>X遍历有限域<spanclass="math inline">\(\mathbb{F}_{13}\)</span>,我们可以用类似的方法得到下面所有点<span class="math display">\[E(\mathbb{F}_{13}) = \{O,(1, 5),(1, 8),(2, 3),(2, 10),(9, 6),(9, 7),(12,2),(12, 11)\}\]</span></p></blockquote><h4 id="有限域上椭圆曲线运算">有限域上椭圆曲线运算</h4><p>类似与实数域上的加法运算，有限域上椭圆曲线的运算，除法用模逆运算代替，所有运算均在有限域上进行（算完之后要模一个p）。这里还是举个例子</p><blockquote><p>椭圆曲线： <span class="math display">\[E(\mathbb{F}_p) = \{(x, y) | x, y \in \mathbb{F}_p \; satisfying \; y^2= x^3 + Ax + B\}∪ \{O\}\]</span> 计算P=(9,7)和Q=(1,8)的和 $$ λ = (y_2 − y_1)/(x_2 − x_1) = (8 −7)/(1 − 9) = 1/(-8) = 1/5 = 5^{-1} =8\</p><p>x_3 = λ^2 − x_1 − x_2 = 64 − 9 − 1 = 54 = 2\ y_3 = λ(x_1-x_3)-y_1 =8*(9-2) - 7 = 49 = 10 $$ 最终得到P+Q=(2,10)</p></blockquote><h3 id="椭圆曲线的一些名词">椭圆曲线的一些名词</h3><h4 id="椭圆曲线的阶">椭圆曲线的阶</h4><p>我们之前说到每个在有限域上的椭圆曲线都由有限个点组成。那么我们不禁要问：到底是多少个点？</p><p>首先，我们要定义一下在一个群有多少个点就叫做这个群的“阶”（order）【在此放上wiki<ahref="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Order_(group_theory)">关于order的解释</a>】。</p><blockquote><p>椭圆曲线<span class="math inline">\(E(\mathbb{F}_{13}) : Y ^2 = X^3 +3X + 8 \;over \;the \;field\;\mathbb{F}_{13}\)</span>的阶为9，因为总共有9个点</p></blockquote><h4 id="椭圆曲线的基点">椭圆曲线的基点</h4><p>先介绍一下循环子群的概率，方便我们之后基点的讨论</p><h5 id="数乘和循环子群"><strong>数乘和循环子群</strong></h5><p>在实数域乘法的定义是： <span class="math display">\[nP=\underbrace{P+P+⋯+P}_{n个p}\]</span> 使用倍加运算可以实现，其时间复杂度我们之后再讨论</p><blockquote><p>举个例子：</p><p>已知椭圆曲线 <span class="math display">\[E(\mathbb{F}_p) = \{(x, y) | x, y \in \mathbb{F}_p \; satisfying \; y^2= x^3 + 3x + 8\}∪ \{O\}\]</span> 取其上一点P(9,7)，其倍点运算为：</p><ul><li><p>P = (9,7)</p></li><li><p>2P = (9,6)</p></li><li><p>3P = (1,12)</p></li><li><p>4P = (9,7)</p></li></ul></blockquote><p>可以看出，点P运算4次还是点P，这就是循环子群的概念，可以看出点P的运算结果可以构成一个有限的集合，这种群算方式可以看成群的运算，从而构成循环子群。</p><h5 id="基点的概念">基点的概念</h5><p>可以看出基点就是椭圆曲线上的一个点，基点有一个阶n，点加运算n次即可得到再次得到基点。</p><h5 id="基点的生成">基点的生成</h5><p>基点可以构成一个循环子群，sm2椭圆加密就是在这个子群上进行运算。</p><p>假设椭圆曲线的阶为N，对于椭圆曲线上的每一个点，我们都有<spanclass="math inline">\(NP =O\)</span>，同时基点G（其阶为n）也能构成一个元素个数的为n的子群，由群论的拉格朗日定理，一定有<spanclass="math inline">\(n|N\)</span>，我们设置一个辅因子<spanclass="math inline">\(h =N/n\)</span>，随机取椭圆曲线上的一点，可以看出点hP循环n次就是无穷远点，如果n为素数，那么点hp生成的子群阶就是n<span class="math display">\[n*h*p = O\]</span>通过下面的运算步骤，我们可以寻找到阶为n的椭圆曲线下的子群。</p><blockquote><ul><li>计算椭圆曲线的阶 N 。</li><li>选择一个阶为 n 的子群。n必须是素数且必须是 N 的因子。</li><li>计算辅因子 h=N/n 。</li><li>在曲线上选择一个随机的点 P 。</li><li>计算 G=hP 。</li><li>如果 G 是0，那么回到步骤4。否则我们就已经找到了阶为 n 和辅因子是 h的子群的基点。</li></ul></blockquote><h2 id="sm2国密算法流程介绍">sm2国密算法流程介绍</h2><p>最详尽的算法流程步骤请参见这个pdf：<ahref="https://link.springer.com/content/pdf/10.1007/978-1-4939-1711-2.pdf">sm2技术文档</a>，本人在这里仅仅简单介绍一下流程和步骤，并讲解其中原理。其中流程中的一些符号不给予解释，文档里都有。</p><h3 id="加密算法">加密算法</h3><ul><li>A1：用随机数发生器产生随机数k∈[1,n-1]；</li><li>A2：计算椭圆曲线点C1=[k]G=(x1,y1)，按本文本第1部分4.2.8和4.2.4给出的细节，将C1的数据类型转换为比特串；</li><li>A3：计算椭圆曲线点S=[h]PB，若S是无穷远点，则报错并退出；</li><li>A4：计算椭圆曲线点[k]PB=(x2,y2)，将坐标x2、y2 的数据类型转换为比特串；</li><li>A5：计算t=KDF(x2 ∥ y2, klen)，若t为全0比特串，则返回A1；</li><li>A6：计算C2 = M ⊕ t；</li><li>A7：计算C3 = Hash(x2 ∥ M ∥ y2)；</li><li>A8：输出密文C = C1 ∥ C2 ∥ C3。</li></ul><p>其中KDF为密钥派生函数，函数原型为KDF(z,klen)可以根据比特串z，和长度klen，从而输出一个长度为klen的比特串。</p><p>下面给一个流程图</p><figure><imgsrc="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20221210202636498.png"alt="image-20221210202636498" /><figcaption aria-hidden="true">image-20221210202636498</figcaption></figure><h3 id="加密算法原理的一些理解">加密算法原理的一些理解</h3><ul><li><p>为什么随机数k范围是[1,n-1]，因为如果k=n，那么[k]G =O，这样的点G是无法用坐标表示出来的，也无法参加后面的运算</p></li><li><p>真正的密文在C2里，想要获取C2，必须用密钥派生函数KDF得到比特串t的值，而想要得到t的值，又必须计算<spanclass="math inline">\([k]P_B\)</span>，但是k是随机生成的，想要准确的获取k有两种方法。一种是从<spanclass="math inline">\([1,n-1]\)</span>遍历，要知道这样的遍历需要计算<spanclass="math inline">\(n*(n-1)/2\)</span>次加法运算，n一般是个很大的数（数量级为<spanclass="math inline">\(10^{78}\)</span>），这种计算量算到宇宙毁灭也算不出来。另一种是解方程<spanclass="math inline">\([x]G=(x_1,y_1)\)</span>，这就回到椭圆曲线上的困难问题<ahref="https://baike.baidu.com/item/ECDLP/3324859">ECDLP</a>，所以想要解密是十分的困难。</p></li><li><p>C2的长度为klen，即和密文的长度想当</p></li><li><p>C3是哈希函数，更多的是为验证接受到的密文是否出现改动</p></li></ul><h3 id="解密算法">解密算法</h3><p>设klen为密文中C2的比特长度。 为了对密文C=C1 ∥ C2 ∥ C3进行解密，作为解密者的用户B应实现以下运算步骤：</p><ul><li>B1：从C中取出比特串C1，将C1的数据类型转换为椭圆曲线上的点，验证C1是否满足椭圆曲线方程，若不满足则报错并退出；</li><li>B2：计算椭圆曲线点S=[h]C1，若S是无穷远点，则报错并退出；</li><li>B3：计算[dB]C1=(x2,y2)，将坐标x2、y2的数据类型转 换为比特串；</li><li>B4：计算t=KDF(x2 ∥ y2, klen)，若t为全0比特串，则报错并退出；</li><li>B5：从C中取出比特串C2，计算M′ = C2 ⊕ t；</li><li>B6：计算u = Hash(x2 ∥ M′ ∥ y2)，从C中取出比特串C3，若<spanclass="math inline">\(u \neq C3\)</span>则报错并退出；</li><li>B7：输出明文M′。</li></ul><p>还是给出一个流程图</p><figure><imgsrc="C:\Users\24546\AppData\Roaming\Typora\typora-user-images\image-20221210204747217.png"alt="image-20221210204747217" /><figcaption aria-hidden="true">image-20221210204747217</figcaption></figure><h3 id="解密算法的一些理解">解密算法的一些理解</h3><ul><li>为什么计算<spanclass="math inline">\([d_B]C_1=[d_B*k]G\)</span>即可得到加密流程中的(x2,y2)，要知道只有<spanclass="math inline">\([k]P_B=(x2,y2)\)</span>，理由是：</li></ul><p>密钥对的设定是有规则的，即<spanclass="math inline">\([d_B]G=P_B\)</span>，所以这里可以等价。试想一下，想要根据公钥PB得到私钥<spanclass="math inline">\(d_B\)</span>，又需要解一个ECDLP问题，sm2的安全性就基于此。</p><h2 id="python程序实现">Python程序实现</h2><p>sm2算法的实现有专门的库gmssl，调用其中的库即可实现加解密。</p><p>这里仿照gmssl库做出了一些改进，实现了sm2的加解密。</p><p>其中椭圆曲线参数的设定和基点的选择参照官方技术文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">基点G的阶:     FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123<br>素数p:        FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF<br>基点G横坐标:   32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7<br>基点G纵坐标:   bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0<br>椭圆曲线系数a: FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC<br>椭圆曲线系数b: 28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93<br></code></pre></td></tr></table></figure><p>代码实现如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><span class="hljs-keyword">from</span> gmssl <span class="hljs-keyword">import</span> sm3,func<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-comment"># 选择素域，设置椭圆曲线参数</span><br><br>default_ecc_table = \<br>&#123;<br>    <span class="hljs-string">&#x27;n&#x27;</span>: <span class="hljs-string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123&#x27;</span>,<br>    <span class="hljs-string">&#x27;p&#x27;</span>: <span class="hljs-string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF&#x27;</span>,<br>    <span class="hljs-string">&#x27;g_x&#x27;</span>: <span class="hljs-string">&#x27;32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7&#x27;</span>,<br>    <span class="hljs-string">&#x27;g_y&#x27;</span>: <span class="hljs-string">&#x27;bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0&#x27;</span>,<br>    <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">&#x27;FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC&#x27;</span>,<br>    <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-string">&#x27;28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93&#x27;</span>,<br>&#125;<br><br><span class="hljs-comment"># default_ecc_table = \</span><br><span class="hljs-comment"># &#123;</span><br><span class="hljs-comment">#     &#x27;n&#x27;: &#x27;1&#x27;,</span><br><span class="hljs-comment">#     &#x27;p&#x27;: &#x27;D&#x27;,</span><br><span class="hljs-comment">#     &#x27;g_x&#x27;: &#x27;1&#x27;,</span><br><span class="hljs-comment">#     &#x27;g_y&#x27;: &#x27;1&#x27;,</span><br><span class="hljs-comment">#     &#x27;a&#x27;: &#x27;3&#x27;,</span><br><span class="hljs-comment">#     &#x27;b&#x27;: &#x27;8&#x27;,</span><br><span class="hljs-comment"># &#125;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CryptSM2</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, private_key, public_key, ecc_table=default_ecc_table</span>):<br>        <span class="hljs-comment">#初始化函数，需要输入公钥和私钥</span><br>        self.private_key = private_key<br>        self.para_len = <span class="hljs-built_in">len</span>(ecc_table[<span class="hljs-string">&#x27;n&#x27;</span>])<br>        self.public_key = self.Str_coordinate_to_jacobian(public_key)<br>        self.ecc_a3 = (<br>            <span class="hljs-built_in">int</span>(ecc_table[<span class="hljs-string">&#x27;a&#x27;</span>], base=<span class="hljs-number">16</span>) + <span class="hljs-number">3</span>) % <span class="hljs-built_in">int</span>(ecc_table[<span class="hljs-string">&#x27;p&#x27;</span>], base=<span class="hljs-number">16</span>)<br>        self.ecc_table = ecc_table<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">double_point</span>(<span class="hljs-params">self, Point</span>):  <span class="hljs-comment"># 倍点</span><br>        l = <span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(Point)) <span class="hljs-comment">#计算点的16进制长度 </span><br>        len_2 = <span class="hljs-number">2</span> * self.para_len<br>        x1 = <span class="hljs-built_in">int</span>(Point[<span class="hljs-number">0</span>], <span class="hljs-number">16</span>)<br>        y1 = <span class="hljs-built_in">int</span>(Point[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>        z1 = <span class="hljs-built_in">int</span>(Point[<span class="hljs-number">2</span>], <span class="hljs-number">16</span>)<br><br>        p = <span class="hljs-built_in">int</span>(self.ecc_table[<span class="hljs-string">&#x27;p&#x27;</span>], base=<span class="hljs-number">16</span>)<br>        <span class="hljs-comment">#使用计算倍点的公式</span><br>        T6 = (z1 * z1) % p<br>        T2 = (y1 * y1) % p<br>        T3 = (x1 + T6) % p<br>        T4 = (x1 - T6) % p<br>        T1 = (T3 * T4) % p<br>        T3 = (y1 * z1) % p<br>        T4 = (T2 * <span class="hljs-number">8</span>) % p<br>        T5 = (x1 * T4) % p<br>        T1 = (T1 * <span class="hljs-number">3</span>) % p<br>        T6 = (T6 * T6) % p<br>        T6 = (self.ecc_a3 * T6) % p<br>        T1 = (T1 + T6) % p<br>        z3 = (T3 + T3) % p<br>        T3 = (T1 * T1) % p<br>        T2 = (T2 * T4) % p<br>        x3 = (T3 - T5) % p<br><br>        <span class="hljs-keyword">if</span> (T5 % <span class="hljs-number">2</span>) == <span class="hljs-number">1</span>:<br>            T4 = (T5 + ((T5 + p) &gt;&gt; <span class="hljs-number">1</span>) - T3) % p<br>        <span class="hljs-keyword">else</span>:<br>            T4 = (T5 + (T5 &gt;&gt; <span class="hljs-number">1</span>) - T3) % p<br><br>        T1 = (T1 * T4) % p<br>        y3 = (T1 - T2) % p<br><br>        form = <span class="hljs-string">&#x27;%%0%dx&#x27;</span> % self.para_len<br>        <span class="hljs-keyword">return</span> (form % x3, form % y3, form % z3)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_point</span>(<span class="hljs-params">self, P1, P2</span>):  <span class="hljs-comment"># 点加函数，P2点为仿射坐标即z=1，P1为Jacobian加重射影坐标</span><br>        p = <span class="hljs-built_in">int</span>(self.ecc_table[<span class="hljs-string">&#x27;p&#x27;</span>], base=<span class="hljs-number">16</span>)<br>        X1 = <span class="hljs-built_in">int</span>(P1[<span class="hljs-number">0</span>], <span class="hljs-number">16</span>)<br>        Y1 = <span class="hljs-built_in">int</span>(P1[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>        Z1 = <span class="hljs-built_in">int</span>(P1[<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)<br><br>        x2 = <span class="hljs-built_in">int</span>(P2[<span class="hljs-number">0</span>], <span class="hljs-number">16</span>)<br>        y2 = <span class="hljs-built_in">int</span>(P2[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br><br>        T1 = (Z1 * Z1) % p<br>        T2 = (y2 * Z1) % p<br>        T3 = (x2 * T1) % p<br>        T1 = (T1 * T2) % p<br>        T2 = (T3 - X1) % p<br>        T3 = (T3 + X1) % p<br>        T4 = (T2 * T2) % p<br>        T1 = (T1 - Y1) % p<br>        Z3 = (Z1 * T2) % p<br>        T2 = (T2 * T4) % p<br>        T3 = (T3 * T4) % p<br>        T5 = (T1 * T1) % p<br>        T4 = (X1 * T4) % p<br>        X3 = (T5 - T3) % p<br>        T2 = (Y1 * T2) % p<br>        T3 = (T4 - X3) % p<br>        T1 = (T1 * T3) % p<br>        Y3 = (T1 - T2) % p<br><br><br>        form = <span class="hljs-string">&#x27;%%0%dx&#x27;</span> % self.para_len<br>        <br>        <span class="hljs-keyword">return</span> (form % X3, form % Y3, form % Z3)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">kp</span>(<span class="hljs-params">self, k_int, Point_xy</span>):  <br>        <span class="hljs-comment"># kP运算，即k倍点的运算函数</span><br>        Point = Point_xy<br>        k = k_int<br>        mask_str = <span class="hljs-string">&#x27;8&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.para_len - <span class="hljs-number">1</span>):<br>            mask_str += <span class="hljs-string">&#x27;0&#x27;</span><br>        mask = <span class="hljs-built_in">int</span>(mask_str, <span class="hljs-number">16</span>)<br>        Temp = Point<br>        flag = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.para_len * <span class="hljs-number">4</span>): <span class="hljs-comment">#每个16进制4个bit</span><br>            <span class="hljs-keyword">if</span> (flag):<br>                Temp = self.double_point(Temp)<br>            <span class="hljs-keyword">if</span> (k &amp; mask) != <span class="hljs-number">0</span>: <span class="hljs-comment">#用与操作判断k的最高位是否为0</span><br>                <span class="hljs-keyword">if</span> (flag):<br>                    Temp = self.add_point(Temp, Point)<br>                <span class="hljs-keyword">else</span>:<br>                    flag = <span class="hljs-literal">True</span><br>                    Temp = Point<br>            k = k &lt;&lt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> self._convert_jacb_to_nor(Temp)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_convert_jacb_to_nor</span>(<span class="hljs-params">self, Point</span>): <span class="hljs-comment"># Jacobian加重射影坐标转换成仿射坐标</span><br>        len_2 = <span class="hljs-number">2</span> * self.para_len<br>        x = <span class="hljs-built_in">int</span>(Point[<span class="hljs-number">0</span>], <span class="hljs-number">16</span>)<br>        y = <span class="hljs-built_in">int</span>(Point[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>        z = <span class="hljs-built_in">int</span>(Point[<span class="hljs-number">2</span>], <span class="hljs-number">16</span>)<br>        p = <span class="hljs-built_in">int</span>(self.ecc_table[<span class="hljs-string">&#x27;p&#x27;</span>], base=<span class="hljs-number">16</span>)<br>        z_inv = <span class="hljs-built_in">pow</span>(z, p - <span class="hljs-number">2</span>, p)<br>        z_invSquar = (z_inv * z_inv) % p<br>        z_invQube = (z_invSquar * z_inv) % p<br>        x_new = (x * z_invSquar) % p<br>        y_new = (y * z_invQube) % p<br>        z_new = (z * z_inv) % p<br>        <span class="hljs-keyword">if</span> z_new == <span class="hljs-number">1</span>:<br>            form = <span class="hljs-string">&#x27;%%0%dx&#x27;</span> % self.para_len<br>            <br>            <span class="hljs-keyword">return</span> (form % x_new, form % y_new, form % z_new)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">self, data_str</span>):<br>        <span class="hljs-comment"># 加密函数，data消息字符串</span><br>        data = data_str.encode() <span class="hljs-comment">#将消息转化为bytes流</span><br>        msg = data.<span class="hljs-built_in">hex</span>() <span class="hljs-comment"># 消息转化为16进制字符串</span><br>        G = (self.ecc_table[<span class="hljs-string">&#x27;g_x&#x27;</span>],self.ecc_table[<span class="hljs-string">&#x27;g_y&#x27;</span>],<span class="hljs-string">&quot;1&quot;</span>)<br>        k = <span class="hljs-number">2</span><span class="hljs-comment">#int(func.random_hex(self.para_len),16) #1.产生随机数k \in [1,n-1]</span><br>        C1 = self.kp(k,G) <span class="hljs-comment">#2.计算[k]G = (x1,y1)</span><br>        C1 = self._convert_jacb_to_nor(C1)<br>        C1 = C1[<span class="hljs-number">0</span>]+C1[<span class="hljs-number">1</span>]<br>        xy = self.kp(k,self.public_key) <span class="hljs-comment">#3.计算点s = [k]pk</span><br>        x2 = xy[<span class="hljs-number">0</span>]<br>        y2 = xy[<span class="hljs-number">1</span>]<br>        m_len = <span class="hljs-built_in">len</span>(msg)<br>        t = sm3.sm3_kdf((x2+y2).encode(<span class="hljs-string">&#x27;utf8&#x27;</span>), m_len/<span class="hljs-number">2</span>)<span class="hljs-comment">#5.计算t = KDF(x2||y2,klen)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(t,<span class="hljs-number">16</span>)==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">else</span>:<br>            form = <span class="hljs-string">&#x27;%%0%dx&#x27;</span> % m_len <span class="hljs-comment">#两个百分号代表%</span><br>            C2 = form % (<span class="hljs-built_in">int</span>(msg, <span class="hljs-number">16</span>) ^ <span class="hljs-built_in">int</span>(t, <span class="hljs-number">16</span>)) <span class="hljs-comment">#6.计算C2 = M 异或 t，C2的长度理应为消息M的长度</span><br>            C3 = sm3.sm3_hash([<br>                i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&#x27;%s%s%s&#x27;</span>% (x2,msg,y2))<span class="hljs-comment">#7.计算哈希函数C3 = Hash(x2 || M || y2)</span><br>            ])<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&#x27;%s%s%s&#x27;</span> % (C1,C3,C2))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">self, data</span>):<br>            <span class="hljs-comment"># 解密函数，data密文（bytes）</span><br>            data = data.<span class="hljs-built_in">hex</span>()<br>            len_2 = <span class="hljs-number">2</span> * self.para_len<br>            len_3 = len_2 + <span class="hljs-number">64</span> <br>            C1 = self.Str_coordinate_to_jacobian(data[<span class="hljs-number">0</span>:len_2]) <span class="hljs-comment">#1.提取出C1,并转化为坐标点</span><br>            C3 = data[len_2:len_3]<br>            C2 = data[len_3:]<br>            xyz = self.kp(<span class="hljs-built_in">int</span>(self.private_key,<span class="hljs-number">16</span>),C1)<span class="hljs-comment">#3.计算[sk]C1 = (x2,y2)</span><br>            xy = self._convert_jacb_to_nor(xyz)<br>            <span class="hljs-comment"># print(&#x27;xy = %s&#x27; % xy)</span><br>            x2 = xy[<span class="hljs-number">0</span>]<br>            y2 = xy[<span class="hljs-number">1</span>]<br>            cl = <span class="hljs-built_in">len</span>(C2)<br>            t = sm3.sm3_kdf((x2+y2).encode(<span class="hljs-string">&#x27;utf8&#x27;</span>), cl/<span class="hljs-number">2</span>)<span class="hljs-comment">#4.计算t = KDF(x2||y2,klen)</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(t, <span class="hljs-number">16</span>) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            <span class="hljs-keyword">else</span>:<br>                form = <span class="hljs-string">&#x27;%%0%dx&#x27;</span> % cl<br>                M = form % (<span class="hljs-built_in">int</span>(C2,<span class="hljs-number">16</span>) ^ <span class="hljs-built_in">int</span>(t,<span class="hljs-number">16</span>))<span class="hljs-comment">#5.恢复明文M = C2 异或 t</span><br>                u = sm3.sm3_hash([<br>                    i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&#x27;%s%s%s&#x27;</span>% (x2,M,y2))<br>                ])<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>.fromhex(M)<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Str_coordinate_to_jacobian</span>(<span class="hljs-params">self,Point_str</span>):<br>        Point = Point_str<br>        x = Point[<span class="hljs-number">0</span>:self.para_len]<br>        y = Point[self.para_len:<span class="hljs-number">2</span>*self.para_len]<br>        z = <span class="hljs-string">&quot;1&quot;</span><br>        <span class="hljs-keyword">return</span> (x,y,z)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># sm2的公私钥</span><br>    SM2_PRIVATE_KEY = <span class="hljs-string">&#x27;00B9AB0B828FF68872F21A837FC303668428DEA11DCD1B24429D0C99E24EED83D5&#x27;</span><br>    SM2_PUBLIC_KEY = <span class="hljs-string">&#x27;B9C9A6E04E9C91F7BA880429273747D7EF5DDEB0BB2FF6317EB00BEF331A83081A6994B8993F3F5D6EADDDB81872266C87C018FB4162F5AF347B483E24620207&#x27;</span><br>    operator = CryptSM2(SM2_PRIVATE_KEY,SM2_PUBLIC_KEY)<br>    c = operator.encrypt(<span class="hljs-string">&quot;网络空间安全&quot;</span>)<br>    <span class="hljs-built_in">print</span>(base64.b64encode(c))<br>    result = operator.decrypt(c).decode(encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-built_in">print</span>(result)<br><br>    <span class="hljs-comment"># n = int(default_ecc_table[&#x27;n&#x27;],16)</span><br>    <span class="hljs-comment"># G = operator.Str_coordinate_to_jacobian(SM2_PRIVATE_KEY)</span><br>    <span class="hljs-comment"># print(operator.kp(n,G))</span><br>    <br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 椭圆曲线加密算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python常用库(密码学)</title>
      <link href="/2022/11/19/python%E5%B8%B8%E7%94%A8%E5%BA%93-%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
      <url>/2022/11/19/python%E5%B8%B8%E7%94%A8%E5%BA%93-%E5%AF%86%E7%A0%81%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>EIGamal加密算法</title>
      <link href="/2022/11/18/EIGamal%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
      <url>/2022/11/18/EIGamal%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="eigamal加密算法">EIGamal加密算法</h1><h2 id="背景介绍">背景介绍</h2><h3 id="dhdiffie-hellman算法">DH(Diffie-Hellman)算法</h3><p>DH算法用于在不安全的公共通道中协商密钥，安全性体现在：在有限域上计算离散代数非常困难。上两位大牛WhitfieldDiffie 和 Martin Hellman的照片：</p><img src="/2022/11/18/EIGamal%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/DH_master.jpg" class="" title="大师"><p>算法描述：</p><blockquote><p>假定Alice和Bob期望在一个不安全的网络中协商一个共同的密钥，那么进行如下步骤：</p><ul><li>两人先说好大素数（质数）p和它的原始根g。</li><li>Alice随机产生一个数a，并计算<span class="math inline">\(y_A = g^a\mod p\)</span>, 发送给Bob。</li><li>Bob随机产生一个数b，并计算<span class="math inline">\(y_B= g^b \modp\)</span>，发送给Alice。</li></ul><p>此时， Alice手握Bob发过来的<spanclass="math inline">\(y_B\)</span>，结合自己产生的a，开始这样计算：</p><p><span class="math inline">\(y_B^a \mod p = (g^b \mod p)^a \mod p =g^{ab} \mod p\)</span>。</p><p>Bob也拿到了Alice发来的<spanclass="math inline">\(y_A\)</span>，同时结合自己的b，也开始计算：</p><p><span class="math inline">\(y_A^b \mod p = (g^a \mod p)^b \mod p =g^{ab} \mod g\)</span>。</p><p>这样Alice和Bob都得到了相同的密钥。</p></blockquote><img src="/2022/11/18/EIGamal%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/DH.png" class="" title="DH密钥交换图解"><h3 id="eigamal诞生">EIGamal诞生</h3><p>ElGamal算法是由Tather ElGamal在1985年提出的，它是一种基于<ahref="https://so.csdn.net/so/search?q=离散&amp;spm=1001.2101.3001.7020">离散</a>对数难题的加密体系，与RAS算法一样，既能用于数据加密，也能用于数字签名。ElGamal算法是基于因数分解，而ElGamal算法是基于离散对数问题。与RSA算法相比，ElGamal算法哪怕是使用相同的私钥，对相同的明文进行加密，每次加密后得到的签名也各不相同，有效的防止了网络中可能出现的重放攻击。</p><ul><li>原文的链接：<ahref="https://link.springer.com/content/pdf/10.1007/3-540-39568-7_2.pdf">[Apublic key cryptosystem and a signature scheme based on discretelogarithms](https://ieeexplore.ieee.org/abstract/document/1057074/)</a></li></ul><p>这篇论文在谷歌学术上被引用了将近10000次，可以说有想当广泛的影响力，大家如果有时间可以欣赏一下作者是怎么行文的，EIGamal加密算法十分的简单，看看作者是如何将其扩充到9页，也是一种锻炼自己的方式嘿嘿。</p><h2 id="基于离散对数的数学难题">基于离散对数的数学难题</h2><h3 id="基本描述">基本描述</h3><p><strong>如果对于一个整数y和质数p的一个原根g，可以找到一个唯一的指数x，使得：</strong></p><p>$y=g^x $<strong>其中</strong> <spanclass="math inline">\(0≤x≤p−2\)</span><strong>成立，那么指数x称为y的以g为基数的模p的离散对数。</strong></p><p>离散对数难题是指：当已知一个大质数p和它的一个原根g，如果给定一个y，要计算x的值是相当困难的。</p><h3 id="针对不合理参数的破解方法">针对不合理参数的破解方法</h3><h4 id="当质数满足p-2n1">当质数满足<span class="math inline">\(p =2^n+1\)</span></h4><p>当<span class="math inline">\(p =2^n+1\)</span>,x可以被转化成二进制序列<spanclass="math inline">\(\{b_0,\dots,b_{n-1}\}\)</span>,其中<spanclass="math inline">\(b_i\in \{0,1\}\)</span>,有如下等式 <spanclass="math display">\[x = \sum_{i=0}^{n-1}{b_i*2^i}\]</span> 注意到，因为g是模数p的一个原根，所以集合<spanclass="math inline">\(\{g^i|i\in[0,p-2]\}=\{1,\dots,p-1\}\)</span>,两个集合即两个集合应该相等，由Euler小定理:<span class="math display">\[g^{p-1} \equiv 1 \pmod{p}\]</span> 那么对方程开方: <span class="math display">\[g^{(p-1)/2} \equiv -1 \pmod{p}\]</span> 为什么不是等于1呢，因为已经有<spanclass="math inline">\(g^0=1\)</span>了，<spanclass="math inline">\(g^{(p-1)/2}\)</span>不能和<spanclass="math inline">\(g^0\)</span>相等（集合<spanclass="math inline">\(\{g^i|i\in[0,p-2]\}\)</span>等于素数p的既约剩余系），所以只能等于-1</p><p>有了上面的基础，我们可以简单推导出下面的公式 <spanclass="math display">\[y^{(p-1)/2} \equiv (g^x)^{(p-1)/2} \equiv (-1)^x \pmod{p}\]</span> 根据x的二进制序列，当x的最低位</p><ul><li><span class="math inline">\(b_0=0\)</span>时，<spanclass="math inline">\(y^{(p-1)/2} \equiv 1 \pmod{p}\)</span></li><li><span class="math inline">\(b_0=1\)</span>时，<spanclass="math inline">\(y^{(p-1)/2} \equiv -1 \pmod{p}\)</span></li></ul><p>由此我们可以确定第一位<spanclass="math inline">\(b_0\)</span>的值，我们继续令<spanclass="math inline">\(z \equiv y*g^{(-b_0)}\equiv g^{x_1}\pmod{p}\)</span>,这里 <span class="math display">\[x_1 = \sum_{i=1}^{n-1}b_i*2^i\]</span> 如果<span class="math inline">\(b_1=0\)</span>那么<spanclass="math inline">\(x_1\)</span>是4的倍数而不是2的倍数，有下面的等式<span class="math display">\[z^{(p-1)/4} \pmod{p} \equiv\begin{equation}    \begin{cases}        +1,b_1=0\\        -1,b_0=1     \end{cases}\end{equation}\]</span> 由此我们有可以判断一位<spanclass="math inline">\(b_1\)</span>，以此类推，我们可以完全复原密文x</p><h4 id="当p没有大素数因子">当p没有大素数因子</h4><h2 id="eigamal流程介绍">EIGamal流程介绍</h2><h3 id="密钥产生">密钥产生</h3><ul><li>选取一个强素数<span class="math inline">\(p\)</span>，而且满足<spanclass="math inline">\(p-1\)</span>至少有一个很大的质因数（如果因子很小那么计算离散对数很简单）</li><li>素数<span class="math inline">\(p\)</span>的一个本原根<spanclass="math inline">\(g\)</span></li><li>随机选取整数<span class="math inline">\(a\)</span></li></ul><p>产生一个公钥<span class="math inline">\(pk =(p,g,g^a)\)</span>，私钥是随机选取的整数a</p><h3 id="加密">加密</h3><p>假设Alice想发送一个密文m给Bob</p><ul><li>随机选取一个数<span class="math inline">\(k\in[1,p-2]\)</span></li><li>计算<span class="math inline">\(c_1 = g^k \mod p\)</span></li><li>再计算<span class="math inline">\(c_2 = (g^a)^k*m \modp\)</span></li></ul><p>如此就计算出了密文，这是一对数<spanclass="math inline">\((c_1,c_2)\)</span>，并将其发送给Bob</p><h3 id="解密">解密</h3><p>Bob讲密文恢复成明文m</p><ul><li>计算<span class="math inline">\(v \equiv c_1^a\pmod{p}\)</span></li><li>计算<span class="math inline">\(m \equiv c_2*v^{-1}\pmod{p}\)</span></li></ul><blockquote><p>证明：</p><p><span class="math inline">\(m \equiv c_2*v^{-1} \pmod{p} \equivm*g^{ak}*(g^{ak})^{-1} \pmod{p} \equiv m \pmod{p}\)</span></p></blockquote><h2 id="python程序实现">python程序实现</h2><h3 id="参数生成">参数生成</h3><p>强素数满足p-1至少有一个大因子，可以用Crypto.Util.number里的函数<code>getStrongPrime()</code>，这样可以直接产生一个非常强的素数。但是这样有几个问题：</p><ul><li>这个函数随机生成的强素数的bit位数必须是128的倍数而且大于512。一方面导致了计算时间的增大，令一方面如果p太大可能导致不安全（比如<spanclass="math inline">\(g^a \mod p\)</span>可能在数值上就等于<spanclass="math inline">\(g^a\)</span>，而有些同学喜欢默认为原根就是2,3,5中的几个，如果a取的不是很大，我们可以直接开方，如果是整数那么这个就是我们要的a）</li><li>这个素数因为有大因子，在验证g是原根的时候，这几个大因子寻找十分困难，以至于时间很长很长</li></ul><p>下面给出一个解决方案：</p><blockquote><p>我们只需要p-1有一个大因子就行了，我们默认大因子为素数q和数字2，这样就有关系p= 2*q+1,如此一来，我们只需要验证p-1的两个因子即可判断是不是原根</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Gen_primitive_root</span>(<span class="hljs-params">p,q</span>):<br>    <span class="hljs-comment">#产生一个本原根，产生方法，从2，3，... ，p-1逐个选取</span><br>    <span class="hljs-comment">#选到2的时候，选取phi(p)的几个非1因子，比如phi(11)=10,10有因子2，5</span><br>    <span class="hljs-comment">#如果2的2次方和5次方都不等于1，那么一定2的10次方等于1，这时候2为本原根</span><br>    <span class="hljs-comment">#但，这样真的很慢很慢</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        candidate_root = random.randint(<span class="hljs-number">2</span>,p-<span class="hljs-number">2</span>)<br>        <span class="hljs-comment">#按照Gen_para生成的素数p只有两个素因子2和q</span><br>        <span class="hljs-keyword">if</span> gmpy2.powmod(candidate_root,<span class="hljs-number">2</span>,p)!=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span>  gmpy2.powmod(candidate_root,q,p)!=<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> candidate_root     <br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Gen_para</span>(<span class="hljs-params">m</span>):<br>    digit = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(m))<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment">#这里是一个坑，尽量吧q的范围扩大一点，这样有更大的几率让2*q+1是一个素数</span><br>        q = sympy.randprime(<span class="hljs-number">10</span>**digit, <span class="hljs-number">10</span>**(digit+<span class="hljs-number">1</span>))<br>        p = <span class="hljs-number">2</span> * q + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> sympy.isprime(q):<br>            <span class="hljs-keyword">if</span>  gmpy2.is_prime(p):<br>                <span class="hljs-keyword">break</span><br>    g = Gen_primitive_root(p,q)<br>    a = random.randint(<span class="hljs-number">2</span> , p-<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> [p,g,<span class="hljs-built_in">pow</span>(g,a,p)],a<br></code></pre></td></tr></table></figure><h3 id="加解密实现">加解密实现</h3><p>参数生成了之后加解密就没什么好说的了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m,pk</span>):<br>    k = random.randint(<span class="hljs-number">1</span>,p-<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;参数k的值为:%d&quot;</span>%k)<br>    c1 = <span class="hljs-built_in">pow</span>(g,k,p)<br>    c2 = (<span class="hljs-built_in">pow</span>(g_a,k,p) * m)%p<br>    <span class="hljs-keyword">return</span>  c1,c2 <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">c1,c2,sk</span>):<br>    v = <span class="hljs-built_in">pow</span>(c1,sk,p)<br>    m = c2*sympy.invert(v,p) % p<br>    <span class="hljs-keyword">return</span> m<br></code></pre></td></tr></table></figure><h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> sympy<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Gen_primitive_root</span>(<span class="hljs-params">p,q</span>):<br>    <span class="hljs-comment">#产生一个本原根，产生方法，从2，3，... ，p-1逐个选取</span><br>    <span class="hljs-comment">#选到2的时候，选取phi(p)的几个非1因子，比如phi(11)=10,10有因子2，5</span><br>    <span class="hljs-comment">#如果2的2次方和5次方都不等于1，那么一定2的10次方等于1，这时候2为本原根</span><br>    <span class="hljs-comment">#但，这样真的很慢很慢</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        candidate_root = random.randint(<span class="hljs-number">2</span>,p-<span class="hljs-number">2</span>)<br>        <span class="hljs-comment">#按照Gen_para生成的素数p只有两个素因子2和q</span><br>        <span class="hljs-keyword">if</span> gmpy2.powmod(candidate_root,<span class="hljs-number">2</span>,p)!=<span class="hljs-number">1</span> <span class="hljs-keyword">and</span>  gmpy2.powmod(candidate_root,q,p)!=<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> candidate_root          <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Gen_para</span>(<span class="hljs-params">m</span>):<br>    digit = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(m))<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment">#这里是一个坑，尽量吧q的范围扩大一点，这样有更大的几率让2*q+1是一个素数</span><br>        q = sympy.randprime(<span class="hljs-number">10</span>**digit, <span class="hljs-number">10</span>**(digit+<span class="hljs-number">1</span>))<br>        p = <span class="hljs-number">2</span> * q + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> sympy.isprime(q):<br>            <span class="hljs-keyword">if</span>  gmpy2.is_prime(p):<br>                <span class="hljs-keyword">break</span><br>    g = Gen_primitive_root(p,q)<br>    a = random.randint(<span class="hljs-number">2</span> , p-<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> [p,g,<span class="hljs-built_in">pow</span>(g,a,p)],a<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">m,pk</span>):<br>    k = random.randint(<span class="hljs-number">1</span>,p-<span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;参数k的值为:%d&quot;</span>%k)<br>    c1 = <span class="hljs-built_in">pow</span>(g,k,p)<br>    c2 = (<span class="hljs-built_in">pow</span>(g_a,k,p) * m)%p<br>    <span class="hljs-keyword">return</span>  c1,c2 <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">c1,c2,sk</span>):<br>    v = <span class="hljs-built_in">pow</span>(c1,sk,p)<br>    m = c2*sympy.invert(v,p) % p<br>    <span class="hljs-keyword">return</span> m<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    file_name = <span class="hljs-string">&quot;secret0.txt&quot;</span><br>    f = <span class="hljs-built_in">open</span>(file_name)<br>    m = <span class="hljs-built_in">int</span>(f.readline())<br>    pk , sk = Gen_para(m)<br>    p,g,g_a = pk<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;素数p为%d&quot;</span>%p)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原根g为%d&quot;</span>%g)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;参数g^a为%d&quot;</span>%g_a)<br>    c1 , c2 = encrypt(m,pk)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密文c1为%d&quot;</span>%c1)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;密文c2为%d&quot;</span>%c2)<br>    m_d = decrypt(c1,c2,sk)<br>    <span class="hljs-keyword">if</span> m == m_d:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密正确&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 离散对数困难问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国剩余定理</title>
      <link href="/2022/11/04/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
      <url>/2022/11/04/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="32d197bf5baaeb17e048ccf174a235d0c4b7bf051bc2cb1144cfab0f7092b493">e7de803e7160295f95749b4342f9c4f1ac4553a9e1be3cbeca224cfd087de2e183ec0ee2a7e96b9895a356dd4671eae5d9c743d139bf8ecd914d28ee93dc56739c6e01ea03150f5544267ec72ef5d1e140934e12b8ecfb3317e328fc46af7edade153143578266b86d2a9c05a2b724eb91187264d91cfc32a1d76153d3516dcd393a5375522c12f2bd7cc28a10c0ef41ed15dace8fc5f7d1d5537c391921c4340dfdd0201ee52215d434487e2a08b03671455a165144975283a098cc175645f09f5920d2bd9b5c1f88240758fe50c47e77442790940e4a3bad81c64a445ec6c0530ea95fcd2c0f4f1041c28cf27bb8594b6afafb22568c022edffd3a16fad9f01c83b8c447afbc0a1a9d784f83ddcdf430bd0c01d40d777c8e0ebc5747940f914610ac904017e5fe750a4616b766a4fba28a8eb3cabbbdd421336281ad1ed5b02a93e1fd706a8caadd694f98a7dffd1cabc35766ccc2f7c642108c044119939543cd7aabcc9e818b15d5473c8f404662293d69746b860686c359bf0c67b7a2ed9643517e864e60852d83fdadf11e54ca2a123d08a78c37a86acafe8e43edea32fbb73c3e245e5d007b010669fc6c5c90b68df8a924d515c231bdecb5e953499f88746e02bbb575153085c781a5380fd50f5a147956a82afc583f03182a6d23772632fea6964a2e968d8b327a5a3208660e1f30a4a4da73a6708c5989780aac52e1e874db89baf44cd39017502e0fa515e4f019f9b845d69348dc1e49abd9a2fa84e7fe68d8e8b86ce3d8c7be596b68ac12b208f7734cc5ef2b5a2c6b85b1e1dd03b9453ffdf9fb7a53b316f2a8b17bf394a08e876e0ea3cb23bf49b501380e9665777a87d14d3bdd909bdf6b9b3fb8845ca1617416367cfdcf5251dca46478016cebff8ce715254ff25185f3cf085f9a2e6772774451f0ac117aef5db3995d1333c9b22743bd956fdcc76d0a8092052098af29fb1509549fe150991f03697d04d895d9c8cc0a7e2325aa8a12ede4e7fdb30f3ff62c5fab4db3f990fe8159433902f9b38db3ced1a5f71af168e9737adecf8211f9c36615b4adee4ea7503b30b9b2dcfc37d87ed0e7dc1c0f62c08250227a2bde42317cef7ec8fd5f92556560f0db11f0d1948ec2c7ab3b46667a016c691f44f6357b82f8ab2330fbf9e90fcd389d0383ac1bb6b57cc063ba6fedcfe1ff317ed3b6597e9110caa9c1b44b9c9b1cd1a9f48b60675d5081332188dca91004b5dce284cc8fd75391d47e6084b55360ac178158d60ccde88d2164cb15c631a0ca2ab2e5ca100b45dae2b4f9b6d863150fe2886bf6134edd3d05aec77669c0c5eb400e9ec59f320d20343ff4eabd81288b1d005c2f480b1b4ca9d83fbb91dae6d7b3f18db6de139c7f02f3a87ba108ad126e2c0e1401f50b75a72596d39f75d74ad5371a419256be750512fbfd3d065377fe580c85243dbf8edb6d67d5b234233bc8f2c2e364aab63ece0d6b0af5e508f5dcfec82fa71e11e83c63d707fef05fb776e0aea5fcfa4881301f721f975ce513640ca02993b9619601286f7cb76c2732b6b66656e28d8f75c33260a54b74c8a7bd79605dc358ef28dfb1bd8055a2fd23d4eb8c0ecb81cab9477ac7b6d783d692539bf23933eb1435d4131fafa43bff31d3db44700ea60621dc71a7df09d4f01cd0e760b37af902246aede2e47dcc1371fb82434e45654c677e298f7a4f35efe1fba1f5f4ac4f2b7d93bd0da4aab2821e7ecaf85cdf9dfc7ac69adaf00e926f7777f9d16291ac502423461b4e63b607950071dac2fb826d161aa3517c371209a7750240cae98f702156439073cb178f4c7999498246b34e61c20efa224fc632195e902c0b3bc0b06ca579dfcd8438c9628d5722459ce535682d059ea56fb784c102867d3e74a723d2d97750c813867d19788bbe5e9e84257623a9d22a179c8eb6af24692866d61792bc4dddd252b2ad2a147e0fa9cb1e875d607ae8341c52fd554cf08dce4b46452ed63beb22fca61ed7957b45da970acb716ccb2d8b176cac3d5cc06e163d99043fc51e03d44cec31c3ecf4908479ca1c1f7f89d6edca40ac3eb66099ec201b5b12f160176c1dc3b98975e5ac7cc8fd61e3508f3c1398533c76c1fcfaff0e61375553462f8c36f4f58340d1e00405d6f1101dc6e1273b3b8a3e433903065b420455f702549b398d01fe3adaa2754ec3075ea029cfadcfa1f40fc2cc0f0e28c720d214fa6f8a5adca0e921e22103d91e82788d66573710c8685c107364149b87bfc619bd27948167c8e8de335c0f04aabc02cc97ff84b72a2625a7937034fcdd07ad3ed2add5f6d11b83855ef04357d511f77fb6e4b6dbaa428309dc4fd39c8faff563c492e91f6fc6bc91f865f93f66e21c5a9aa3663ca90f82e77a46857fc529ab8a925d7d1f1cf1fd896b008f78da9c4bccf059e546d7362fdbc21039d0b0d2fa98e1be20f6eaab44bbe107e43f24d356bd53153123ec08a225fa928a5031f559fb0cceaaa6c600c08b063516c444167be5acb80271af28589c24ffcae499c8b811e4fd78c34f9bc7a698d4ab83b39398be440d5f3df123cb7a2f619871bd579dd8deac5b6f3d0394c70c8efaf3490fc69d5834293f1e75f6c61eb2cdbdc290a81a7ec584f18973dd95c6c0ad76fa791256c22494e61b4540520a3dfffd631304dd1c1857fe3ce11462f249e398936238e444efbc4ff57fc2b489679883a0a354693394dbb74384fd6bf8d9bdae78359a7adb5f7d94216dcd8070fef7fb6109db54dbb80d3bfb7154c643d26a692781a7aa6e83e2e15b10c77226fead8ef04f3e191d6d075e41431f8b1338bac3df32da766d4cf8671424ba8ef7574616cfd9c30af602d47341502e519e48eecd91397944e00c6cc9051dee17c529f365ef3614b83bad22e82d6e44dac442ac788e22de415f106e2e44380361594e129acc3be458c353edb6b09a05ee83764b20df0f2627f9e51f3a2107c6a7004c62624763992cc66e91d408bce31d4fdba0c6694b0967c6599e5671a620c8360b1a5065d6afeab5deed8519ec8b58031e91f4b1223e4d7bbdda2c4d4116bcf4f82f2e9d93b6c06d42a3a6ef059db4d5a0b43092a1668a1ac44b2407c89166a87e8bc8e47b2cad9df0d1b2cdde3b12945af745c1ca37542e56c5fbf339a0b6c431d2de6b663175298b1b8235a61147d558d9c55a1feb4c960cf584ae998cdf45dc2ed99e1ef3757c4d5858fb253a9494fe2f440f9c4144fd0a56190c7e318fbb5d9b342c68eed0edebbfd56d97e8bc6d7752093d269dd684b3218dcf77369d290df5b308049a6b3641fc82ad139ce7b966da2bf8182dd747099061d76499e72eead6098f90b1bc83dd090b5c828f873a737f676019af7092edaab5a31f79b91ccba281075390aa4529d48e2a3c7703b8961cf55be1e564427222d8972f6cfb0d134a2cc86d039913db24b5d587f71a53a7bcf1f19ad5a56ec808fc81ae1a93f44cf74470097cc29ad81079bcc7e79d9ee134761ee43d0b2bb545c140d4439a863bd37cf2c99db1d52aa36a465f41edfcf07681ca428d267032954ff5b7e508289a0c201d7f7b47322161977c3ebc8ef3566f34c1ac0ed585c736df3fd3424d80574916c78e703394766432242fcad593f8768b55a009f431e1ebc9f72aba41a39a931da615b447ab8dc1657daa5356f0cecbada493bcd510bce58268a91df31b0baeabb8c2e4275cc5282afe3cf056b08fee52ec34526c9c591203cf3c5b07391e50a9a068d825633568b5bbf5e7e3eceded18945d275230a0110b723c5b028099b56e9def0664ad4bd68f5b9575231c7fbf5e5912908ec153855ac8d1e36b6889c98179873c7069e4d86e25ba3a38eacf3a67da66e94332493c58499284fbf451c3f43802ef85f4fbbd8011e423c0f048c9ea732f3e5558dd18091d49935137896d986e483b40e74f98bba95adc484627f8786123ceb3992fd72098e56f6bf7d77133c994101102499a6be460d32e0d0701c5bed7d76dd2acdd7bab4458fa8c025daecccfb5360d3178f0302546f255caa583dc903d380cfbff5ab04ee2a9ce3994578725a6b183be19e7d34c5b797cc4962344d1edff502cebd776fd53e9d0e514983e9ed10dbacf69e651fa80556952123e2f84d4bc8b42de9324f155cfd3d67fd771ed25231db4ee19cce4ba7c18f72131be64b5841b0faabd331c35948ec852a92583adbb03b77540cf1b2952aca78cec583bed94e183c475667a3af71e0dd482fed8214fccd452ca79b28e23a42babb964429d4d2d9539b319221d818a9cb8c80ee33a874c120adc818ece7c4ae0182b0439e61c19f543b577e4c1c17bb1bcddf6a4f5a76a0d373385eaafec049dc483521a5fa1ca35987cef44e3bf8963ec00d40503fc52d52ba52bfb9f9bad97da41b9bfdfc0ffb3626d9f077e8d4d1e1141a5438db21b93bfdad6abe9ede784706ad4e89abaa1c0df34f1e906afdb0687ec7b27b142aa0a892bd810d61610f3514f7304c1280a03661f7de83612acd8d659a1673f6db7554003c1f7911b3bddab6b41596c94d5ff25a9e59cc9344fe23f80b83dc42f6eaf702de366c789639b070688e307b78f809460df82c38361d51ae6870a25c0941861319e1a27a3f0f3f27fe4cc972731dd75e1af47f8e467b5ab5e15c85def3521dd64b6daeeb16d1050f88890b68175e6d7d7fe865d3b9f2d685ecfa5be6b435a57e78f8c0c75df34c03fc741611063f47590a03ad16710d8d7332644c25a025cf898a5aa324f561d7867c599472944e289f5488445c4796b3618f7502cd8f86ec73d4bdf02abb25440c70e782f95b35723c2fc598f1ab8718b53f419900deec49e6a129d0b4721876f7e15ccb61105d2b04e6cfc7dc210c09f3f63d1d0ba3714921e42e7336334c91da16b3f72bcc75df358fc7ca96a1323c7cc39386b411a07e0be60b13651eba38fbf6b92f37ffb02cbde37c992b3a950399fcc356963cbd6ccbe5c7cf957bf4f4d66d0e3b6eb0d611f6eae2a74fb41e0aa79f384cb5840a1dfc68109eb6005d7593908147c48e755b37986549726793c6526541923045fea469e7daee4354a1e12d0a37550ae4e63915bb1a1ca784d6563dd4f9e16c5bb08838cee436e90ab1f8456e987452ea89a8ca58ce0c6e72559d8faf8c4edcb33b3a016fbb5cb7247200b8196782198826df1e0b51d67a81fbda8321a2a37469a8ff3df0b03e5ce671bde2bc0933aa434ef8d0a1ad1a979af86857bdcc14b929582fd53c6ad3f96e3126543e1d38b7d155dce9b3f6dfb362667d2cd3d963510383f32188e30351be290dd36e5de2babded4f1c736002ac5e36dfb94959cb8c9f1ba681003306f2d94a52d28f30b9219bbde289a347363f104f136d9154f8331d0c380a13f96e6282e55a150ccaf3c2908ae6b87dfee296ad02a1e2732018bd8cd1e3b9d3e8d8c81bda5291d27b15905695ebde2fbfa1764716ec0f99d1ef0fda1a0fb10d3a4ca5c6df99aa513c331909a3944b3a500562caa3da1daf641ebe7da2a31c0921aaa294373d083ce5b328932ea17a8047377258f8bd0c4c01e50822daf2a6f072e0563f9fc42215ab4bdc03635544bdd37c6e61581d8d10c66d2626bd581cd705949f646894ddfbec725b7aea1c9fe212a227ed1140b48502fb05f99e26e5cba68bc3cc251836d7ef433c81ef5ce9dd25007eaf3a641a2481353302fc3df675b8662854cec6454066dc6c308b530cea3ea826318255245f6ac784a898d67640025d2215444c58db4a9b5b1adb447f5f997e2da7956b776e3ffd5fe430d0aebde89fcc18cefb2bf3cfd2e6e582bbc33531cbace0bf3e4dc1d2c03e207245560aa43a8f01be5fcf640d676e38702324ea87508286c68adcc7e6788146e0b3324d6b5260e2f5663ed9de29f3ac1d72582231f80aff9970adc02b98db95b4cb73ac85f1c2aafaa1454633fc615adfb6939df02a297771b87be80b3d6b20aed44f83858b8d6b7aa4b365f4c9b15f32d61606a5a9e9cfd66901e6f3f26fc1b513c9981bb78675c8e7dab4a190b1de794ddfc8179f7a097ec2b4cc3e39cf609163a9fc4b523f862b98d29a50c491d1ae74a2f1f1461c4e9397be254c3c2b7db9f789716781c123fc939513b48db6f76dc54f468d028a0fd3b251eec49fd7dd5fe4ac224bf4bb81ecb27e727c47fda82415e8ee7a54c94e134f884d658e1833f2e1ebe380e2ca58739b347bdd21b5ef4c8af8920b2aea7408d1cb095fcc7a132821200c455c928e1b18c4fd431b727d9cb2fa7f7bca7a6362236ee7d411ebf32499cc65b7ce7a1874de9b4b5ccfca3931eaec5a90b9c72a214a9d55d5bc44e765d407442e1b81f59fb72c463821f02ff57511065578d0b7c5e1dd68d530e701d94e9064cadab1297a1d20c8e9848c4124454de5f75dcd7bbaece0d7682f033919784a887cd4c12accee0e6edf8230f0258142e3b4246590b2ead3cbb894a4679334f05719b5bfafe0aff746826ab76d17c0c93c4db71bfd57ce3fc98bb7b40a6cd604fcd6dc4ff5114f6017bd18879430447ae3b71c795263e2f8b9ee104eb08693ce1a1341b5edb57d58f56ef52798f6cfbc0202736bb06a23d22b7d33592538b4d872d95c1bf1fbecec4d083d83ef7deee840e2b8c8aa43fb7c09b09e4996fd9c910ec245fe2afa831077ac437787ad849d78cdd856efe3ed5392d1d5f52edee694d6717120dea27a17ae42b28a10474732c924e31aee20616e7acde2dc3187a999be72c7415a743b84240baa29ade3ed0ba9f8260ea7db11a882f7e0261588dd1414424130e1eb33bf80dcc30f79b158f5630c9b314018d69bf1b6f0f8eb27e18049038d7764101112e70558aa07a7ab7b1d9c298d9c6b8e4dde81bd0057130b2288aea4da8cd3033e4f63f231b35568e919eacc330f56147824d8210ccc7cc5c26e8801017a77a7372b5ae9b25f845329d14c43bb8a84d01660054049afdb3e69d4ab4aaf38611f450189ace9766c6e0239fd062a58a43345e39b9f671f8c6e2560590b616abecb6214e38ee09ed8ef43dfb28b11fbfcf6d2b79865c7c6c58e4e4326784b115005cce3b9b331c1734160b469bf4241c501a18666c5e5075c7345d7af1651b1ac7193975e5a81e5904a229717a04fe5741ddb60ba8265593e40e3fe55f14de1ba249fe1aee9c66687d54a55c126a2c6be6dcf64f4e05c4f856eb331ccadc799e14c72aec222341fb150d8aa281a3fa481b4aa131928cc93d68468567999213297e990ef68b5fabe61f77bc3b0aad0233df870255e44a72d5be7ecff3cd2efffd55c29e4dc5bd6884b7e91f71dfa04d0c7a5a15e4ccc0dd2ff04d54e51e3eb68438ae99a105a9c30a180858203ba65b45455ef2c4224716489e9959551f20a14edbd4d277bedc5ff49ac26d5fa50752bf6569d181f37c02e2e862bd915c518d0e636a74054c85aa8eb7da52e66163149e910af2d5eb3df98f63022ca70ac7a1a3d239abf0d15772b0a86e66b86795646a3ce634969e8671e1cc71160c0b1bf4d4445b0470e83b1decc25bd80b10143e8894e7998149c78cc5fdefbca8c0b3a868590088e50b1e6ab485c1b506757e159148448fa162ca4529331d8b441431da06cdb6b52c4e0a79fae9ff3b26562e27465b98c2a3be72042c2cfbf68952d7c8a80b4db4782de1f4992ef3a43a58064f858d4cb5aa40c5a33f19260a2c902f1b64bdfeb4a7414f7528aba4c5315dafeebb0a87b5cf5e5a49235268d24054fb9feb55b0cc068adc05d13482b752447f40dd2a92d748f2769f0a29b5990d1ef16aa81f5c2b4d275d3a47d3f8cd57ca793950fc06079afb5ceb2ce96fdffc8529ca3321a20dec06916803711b0d82805f976840151868d166fcfc20e50332d5bdea40f2355b1a381074a0f4471d5c1f331d6c6f1ffbc915ab71693209068dd74b5d8ad155eaf6ca1cea9399d0549fe8bdb5f1c51b39f8a21ffcc95cd9cfa72a3c8a11379d501fe291a5f3373331bfb9c58794574baf63d786b493cb777cf71545af3888513ee9564061421f14301deac7c6be5120ca1c4bd0dadee2bef5282f52bceb3917de54fb7c69231acf673a43113db3a598cccdd5a72b93fbf26c2f5f86b1d966d81fa4789c5e964af6211e0ff776aa34dc692c87a74913ea21818effcbe9cdc4e0bb5be61e1c2d2e7b8e975860ee8e84fd0c3c8efa507a514f38076a300ed5beadf363a9c11750b563210ba085e7908264c34addae3e0f99db8d987489f5cb232443aa2f3b600533cb39f9d6b637c5f6a382d6f261645356a9da433c78c375675facf46cdc7a4ed2e9004978fc7823e374ebddedbf6b5e15c511dd199f366fd0c366235479d7d51332b7e9a171b0eb36c68a30123fccd8d9f5c88f1e551b9532a2a1ea18684453806c2ca8e94b376b2140afd17a87a1bceba2eabf71617ec1b2408a279617df0fe4f3c4d8d3bc5d01bbcd2769b01fcaa5e906b61b57b50f667ce1eba2a9463ab1dbb1dd7809e04272cc2d4e593efd613bfcd100f27fe20120c1f012c928f743765d63e7dfd3276dfae08bf6ed74a240db29c9cf56a0586d6ffd11d71758f05c5fa4819e37df0054989924eab72d273907ebd3592c9523cce79241a39cb3c67f6e2c0cd7fea7164319e4792040602d289d4742e879d0a0acdec02ddcbf804bff4284b8db268a3f7f28cb11eae948215e9ef8c04a27ca0ff5748cf70bb9db89f34a1d4b2fbf9991eb40c14c349d048507d2363a41958a19b49dd285cceaa4d4683d99466e6cdd5177c1f09c23142585f0b1439330f5242d259b323175897519446eb8e38674a81d8f62a748221fb9065a131e5ab036e203b75616b0c1c8538ca2e4080d00bded894109d987b7041d96ee0dd94070878493705afc0f159f67f39d48487a765620ee165995905a024a2f5033c478b9aaca82c0bba6b92e76ed8bf33250e1eada176a1b593fe0ac8825a31f128840d20f02d047dcf72e31b95574b2acba61a63ef649ec858f2d663ea69d35b45b90857cb3879d95b39e08a9f80a1285a949f6baa420c41882b3959763317a21070c7b72e74b08df14fa05797a2e5e953d273e2e590c74e486a3990d4e65d5b8e8aa5949dc9f928cb0b8140f32faa4c01fae03d9f50f0304b56f16b7406e7befec9e9847f18f4561005d7c0a5f8f397d14b666b17f77767f59a3c7f67a236bff52534cd892682f0d0f5b09653c0b19726c40e543f8a4d5db7720250f844249ae2ba1e40f8fe53cf4770d67d253e80c73f5c6a248ac5867b3ada0ef36455ea698b61997918c3f8c4bc3ca23479216821dfba003a7476decdaf1df33fccc6567f9c5a6f71949c7ce8df533a88bbe71c7551ed2759c842149d47f680081b20f1537854a05cc4f9e2ec6f82589675b7e8d72adb2fb1319af8eb456bea133fa8edb7e6b904b94a42cb4965ab56c0279f82f20b3b3caf544e9679a4ccb677f1866793ae44debf4a05852479d65ef7b61acc9c4d27af0fe5e8ec008917dceb8d74bea711f8e4d7e461d7eed7bf184e2b263de3dd28f37d70678c26dd3173498128040966e2b9ec60ed2617a8eb4653251964f2e555ba0cb5d299d1525eb204eacade7cb7787a4c9e13abba42af63af1b228f203af54e81b62da829e038f2bcb2d9df99067155c3b6c07d2068ad65179812fab7bd4c9800a99326932d5a63424c5f25ee32aca23eb312f3191a6c920b50b66f192166b70e85fb7974b9f3e1bbeef528ae02f0ac4baf692389d11832eb8715cb928b831a389ccd97569e4af706a0fad0334991d043c8872b3567a373c2ec8b318b72e48b8ea425b3e13d34bc44eef7bd492248778531494bcd659a756afd443d50aa404e34a9309960b1d6b8a90ead793b03e09856b47b6d231eaf4a4b212a9c5b44522d24e07999fcf3765814caeee4a82d232587318b1af42a9b4f3e120120ec1e60e7cbea4e29b2a521ef7b219fcfa6f2fbb56e2ef73ea2c33d7972db26c82305e47593e3a62011e7a85a6a211cc09cdac0d835e60a8a2102a94babbe5b301de244a4eecd0914490fb7899df43544628782835b8ee18c67a6c5418c921f2b82765072552f1ca471e5dfed205fdd05f51ecd7f5949164ae379ca55817f1ad89061c530b165cded0a02dc7af8caec804bc0361cea4164fb2fabee29aa89f1b9157451f52a5b1a3a1a70b3138651da4482cfd6266f5d7e25b80e46f4957605dd6b0e237d9434f5fdf8da2df70a927cbcd513a500b40dfb03c315eb85226a94cb78895398624d4354c1b51e72fbabf29b565782bf712cf5d15d8d116b502d505ddf2e2330b9ec6d5e6fb444e259af42561339684ef45056e12d25927e195bb4572fa2b5cec01fac10d00974733c19526413ee2660c2fcf02a42be6a2a25bf257734a43530db3bba4410cd7e51e278390e68b481cbdcba3c4cb3d917f814deb095e2c27068da76596ff1be5c8679f75f29bca9a62f38a28ee4e6a34d9fd9ff2eb69f7fa1b63af47c034e413240d8337a946875e6fda174be5877580e8457543556093c27c4ba32017b73663fc687f56f67cff61e09d34e71ce2d153adb359bf1856f2154822e169dd3ff578d07dc18121b4176415db9bdde72aec9410206b0ded5cbb272cacb243590e6e207593593aeb30e9a9075cf05b461d0045a398d33028ba7a0b814c272450307a10b760c7ea64fcce3cde55df9ff102fd80028d71e323a65aee933826731eac8bff96e4c266edd0445b05c6d0c63ad916a5d8a03e625dd52a4e701f51e9f0a13db4d0a593f7c866521f506a9d969431a539f509c613375765d60617bfd3e5d7dd18d8d13c90db66c36cdd77a965f3c31530fe2b235946ec36b6701d9685083c97dcd768e814f800893083eb9999c9e5b776d7315bb759b092f0ad42d67fb831f2e4f386235a483e41424dd2df3c09ef9c4f2143a9cf556e18f6163c5753d91dc34933f0576492d9ea344e5776f39bcc84f4244120cd3a3d7d0298ffaf77c5a5ae2cab308f27e61afbccc78fde93882b4e17f8d1cec57fd908e786a67d6ae9ab426aafe83c119b06f5bfd6716443010f9b123078880377a950ee64edf3f1c72cc458760958a9f4e46b6564a2ec2977c66f2a2777a575b2e12ccea9b9834cf34c30da0c28517e6738fdc7e014b4495d25ee3891cd8cdc9f21e2c0a97476107ca0cdd2048f40cdc534865d8580bc73667e6f2b2ff1176fad5d21528428c27bb1ca13b7f1f5d4fc30a404c0fbf2cc7a45d74f6d363bc4e3b45ceb737a712abfb2dadf0b688d9c1be82a10aa37c916f1be5cadccce17ab78c577236d57d39cd3a83629f500e6bf2cf8f3b07f6b0923cee1c9ba7de889a302d20fc0e7cfa56eba645671722f214efb3f6580dbaf4cb93e83e83af00660072d636891adfdc08aa8465347635e830bd659e7cd1d8cca4b33e0deb3efaf559861ab2d950bd84020e4fe9352aa56a05f40fb174f4ce3bdefee48354f140ea7a8821ac10f2f1439cb020aea44f726b4321a637255ec420d9c0e3be82a282ad4f049c6f50c604158c3a53ae5b284a905f09931137b78fbf72905537797ecc0bbddc39215318fafc3c4490f10ab8b764e8772279b999c309d8024a641804fc60e52c2d708ac169dfeec3c1989c420f2bb2d069e1ad08af588751592b1cab55f78228424b061c08a45a51f9e403eb7f021e397f8ec70170bba08c83265d29378e32146b3b3dd31a14c2d012d7b97058188f95daaf3991b02c032c4673a7d8f278a46d88c954d184be18c4c9326d3eafd78d5546899ba2d2f4bda5e13f0aa63bfe5bfdf175da56d3e7715eba8856da8ee6d6e17d5311dccc3af2504d68cc4d268941fb8c4ae02347b39a48cd8df440aa2f447114db1955901f834c15d4c37ccef6b66042ae49d2bfc071cc945bd717352432817241d9144a676b517cd4b26b56fdc30911e406ab4a6b5dcf43e3d96762b4f3f51915cb88b46aa8a1e7968395e320cec4fd9d97612ba75fd458503f741908a8cfd19e5a76603c35a0d3a95720fba5f022c70894810e2eba1cac1ae9e5534f4c25066fce32dcaf241f9321f5a5844aac7a1010095268f6d3a57c633fbf7be46c7125187190d03270aff7c58b30d34f089529c0682d668c55f62e59269c50d874e6f881f1de9e75cdbd8836dcb5e454a5e516f8111a0e49b3b378cea27ccd97839998d7c0eb07150f710af3f953907b021405f62ace8ea840b39dc1a801f215d912d349f81991b2c4bbafd03b07f8feaaddf5dc0c9d1f2db1fca85e8c5b0c37ed57a3e8d49fa691c71b83a5ff15f418cbf98236164dc327e7d7b2f18eb3f0ada9d18479408e0cf9a80aee86b5fdb67f73728ddc98d37d607d85baf9738bed9285690360253e2f59b8ae4721bcf1883791fedbfecf6ed40f29ac5bd29fba4b7f4a2c15ecd6e36eba7f34e5b299b5c1d2835099e817ca1366eb1d5fcc4185aa834eae309e68ed02f882a1160334aa7b496bc5829079b34f8e23556e5d4b6cc76fd161a6191405ce2ee8c8a63ab290915803d1d726589f68dad51587d75e6677bc9d4b023b90a4c5d45cb421ea72f05b01def8bbf7a2bf3479f88f2832624a024a18a692efc02a1dae7b3d6d7f0e407dc0d88db9083a453b50a50ea5fe32101f11d0027de9a8eadb824f590196909dd9f2092b35a48219c28dcbf833f36f15cd496edaf0615551336f86c362656e0382013e5b97b123c75886cacd44d022b91c1b351fce5d97f63a347a1073fb9dda039bf2419319f940ad4c18c90d9766df2bac3f05d6fe06429c4d9719e54f4a08faf4c12960125e52787c63704fd64df23563f92c76c3b16cae8ca54f9436ace022dddb7c39857b28b423e1da59aa826d0e261c2d535c328e72aba7fc6239deb74b78e0fc219a0c7ee73b89f2dcca2f9ca2726e30584dcf6a2e1cc2dc88ddc6009510311ef90ef8243f4717dfb2d16dd778099fae49a72a97971f6e9ce05dfdcb2bd489f9b865cd316f91bc0f2dce7350baa2e049c531fd31463fdd82c199bb27a0c8e8f49ea4c19727f3c59a295bce2597db2f40d5524e3298fffe3f0f5b9ea2b338ae1c8f4c25b68dd2aea91fd50ea06ee78b749fdcbba5a94c6e129c480085533ddf6afe220e41af4025c97f3bc86c76f537e57318b3b465c8def326a919cadcb52e38175cc75fec0f65c55ff1ee352a91c9198803684789d7bc9b46fc23bc9c93a4c4dc01d98922e24eccb48b22386bfc6d906b54bcf4e97404a28d9fbf11847b1704c1417eef74ecff29921116efbe1b87bd3b913b69836b5264c443f6a0b8ef84c7a3f3b48257f3fe9235a646a5fe0fd701aafcc74c0dacac1d63f3a2772bfd8ca9cebce882408ed5ad2ef279079ec3bca7fd02841bfc0ef0e31b3ff56bb1998a8d5f4a00523754fba4591f26981bda4ef0d85e9ceefe4f55577985e6c727012cf9fe33bb5b8dcae583bdc204d9731af4f2fccc6c83a7fbd24365b7dca9bede92e460d19afefe105ee4be09232dab14f8bdabd6f5c0dfcb40e3d7392de392d3d436d430435a9caeca0d36fc98f9532ab8c913833ffaeaef8e86b9b85cf613d691d792143e81a5d7fadee57278b3165ac9af7ac4103c44c345925c6e38abf92b3d6f5c4eeb359a5f346fd8f277f3adc9917f39bffb1b86d4986a2fc6120cdb305abf74a4a5d55b9300c3b5ad47b0e3901403c35c41375ee4e5b8e7570e7d15a6ba7df4ddc0d61b6593773b555b9a435a85048c694b551e4808eb8ca16d7af1d14415ef25442cb39e022eca297837ecf57ea3cdff6f8a45a34044829e65b5223ad0a085afc7013146692084487163fec7639ba37d10d19790ee1211b4a3deb0f9048bdb0b7bb300e0bc8536dd8aebe2e6ce3b51e532cc43dd9dfa97992866d616a34f85b1a0eb720a0b93710a13cefee56e3d6801ca7ca8fc450f2ec9b648edfd1995d9229dbc23b14db80c90e4480c6320011d4aa5676d4ed7a88b21c1bb02b219c96e73996e1b93ebad538061bfadf0cb191cfd49bcbb36224576ea64237c7f5a962de18e841e73f623371dbeb37166f7b87b49a09e1165c74f7f0a38b6deeb8ae88b3869fef124c13927121fd1cf7b594a436db7a032f86488fa2006421a91942eceff38a70198166319ae1beb28533f208c955eb93d80be422f3a9883dff35f39a8b3726b00e8c6c1b316ba1c21d143e1b870f6f293df6d2d2a0caa0610cdc94124082f860410b6c0a4c1190749d5af2dd201326b732ad80e5108ccc3948d4d4233ba27cd0002b9cfb70c9ddd39595d06c1fb00fae19da391e7a348422cf68bcf6ade47446498aad1e2ac669843718153f3b1d791520272850457cd27669d92e9833b6212cda44b9351edf51600b344ac429fb2e216e9deb45e21c2b1ad835027c8238f60f6c59acf651899c5e6f4d3ba4f4402fd0354fd13ee354533247242d8e2fceee733d3094a1b637815f2ffc87a955d00d1d5c5e68e62054e8ad1aceb2ef71e5fb4b3b3306a563d351f1eff7ae15c603bfca6a845ec4a4d0d7c07924ab1ce4b2a453c0d3cca0ef5b4320ef443647d899cc1cccce5ca515b059c51a87cd31bec9f386bbe23791c5bb0c26b38024341576efd48e9263cab721da459ca74118dc63ed04e3d57abf3719ab3df09e07e14cd73e0418cb5afed3c876cb4545409ff9cd869679e3ad346103e6e41f5c91f8e991042a95a1758155b777e31b1841e5ecba0ec5fd496a720fb0c2a416306868f02a3971615bc175cf1527924de9bea09b958ae418513a738ddeeb8d5557b1a847da25fb25bb4b48a961ebc9b9eca35ef4fdf1bc4b812b624110b4f637c16562fca5fccb680b874aa32b86dec327eaef265351c16cb49fe5af3aaba51028c8a29e9d98a51beead7a413fb386a81b63ebd991562e722a35767a5ecf70c132db15beedc13337c7f315217eba65d64a8fa82f9b0eadf5fc8d7977ec41c5e94b768f547f5938c0aaee867583a9d9ed40c4b361ee89d2ff7c2ea3b531d13596aeabbd2805fa92b47f81d0af40743b6c236e44564ad8f2e7e7b31f0a080cb1dd10f245e5be80f16f39c1f5b296d6e559a74e38e60e498b6e4f9729ea182742c7b8145f4bec99be9a5f2328cbc407e33e44a5e167deb26fcdb8a2b4618c932dcb88ceee49dd94fe54c530a0fbd9fc2164394ee6ea38ce64e24f5173c1e4625d85d1c5c702235e8fdc8d8447fe8f8e29cb98e3943a63048a5764564fe71b189f0e5274135973322bf6eafbe13a13cb2cb32005f613242eb59e276501595b9e9c703d5ff2fb48bdf7b79a810f1ec12da7f6f2fe1ebacce537148a57c7e87436fd45e03118aaf099315d28142b8271e27430a068962d7db981606cb7bda43017695b8b012eef7794c1530b9c8f368cfc3bc67bfc311f45df0844bef1a6d7f8a269954489c08517776444db1d431a68ba80191496b113ad309d3011d3802b59899f38df08ab3e99f8ce21c6f474c9d72b4a9e293f81ed95dfe6e2834505366610009b8eec9bca3df3e8267f0c494b544c4717852ff9cb33956e3ae707adec97a46e561c7256195b00ba7d39dbd173a072ba64d85c24d389f32c69f5035f9fe9055dbdcaa1f152a6f7813831ea9ea9c3a106857bdba3d3a98b07836e821b3416e931ad466032317fe50e315dc4b6584e93cd1b453db8eefeb82821db7c6a4c2e048559a93d3be3ac5fc0b18fe2470f4a2e8ea90489b1a6041eea802a4b29fb1edf2f8c5288776fd63fe044587fdc3b0aabbea726fe308d64c3f31087276f3b07cc5e3c740c71a49fdb23467d0c8396ff0e2b37c4e7915b0458975abf0cbf31412261e5d5d3b3bc2dea17b2f4b16b646c635bfac5cceb72d49a6a8d103f4f9eb1df928288b31241b6f1fa56f2b507625b2c0b988c4db9034331fe0e2de670e89d6539304f0b7fc2f0a0a7226fea8a2d42aad040596ce4a43d1725cdf0eab7c2f78ebcfd300fa166bc8a0b6f9a0571c4dad294a5218cafb48a2cccece08c768e0851bb8806d6a54369870c32cf27aa2066df0da996f3cfb06893d403f91313f5e6343eb3d01ba2cd1e2542a3d9526476b3b4e5316895811bbad0ef1133435cfb824a25c9567083e96534d31637227953fed278752790c013dbc1155212f99741fb07f4386ad4a5fe9f6e04f9893e146dcc1373bed1996345388ded127df8c9ea44cabb4e9322527d9577f25fc5314e4a7386688ae681bc8d4bf6b29f7280c6f210c362aec9b00c0c5aae5cde51a50b46998dfa4b7801f31cfed83843f5791c75df0f3197f8ef0d407ee21f6f727a7ff770dd1a6e53d4f0d2e04d8f92fbac2eee7b0e085baa667eac91e433dee3eb3710ee6ff92100ff453a9a528809a5abd2a3c066bfe2c30bef6562d373159c8029a157d591598d1ae3d5262f54be6a93c44d4bab74be3d5c6f87546ee557f17db789234094bec2b249a36cb288a927e0d88d7facf67f55b8d0ad1c21564165878cdc53cba295af421df45518eca5c7c1309a3780e2881c01fbd8c6819d9464d16fe6898439632a15600fe0a29f26a70519bd13ac2969f446d8d9ef1fde65d77d8730ff86850ad654a1619018d31680501b631c3d5a46642dd8b87dbbbefa0e28455e64466b075e136b6662e04f7bcaf4d78f399cc912a1213bf399911299c745d87f91c5226a7c6c4bf7de84632d3a4f7a1d734f4d80e5ed835335d7e6c3427664ee6bd3f047ee8453fcb1ad087e5bccb71f88743f6abf8d017493df6e7761317c6ba3c51769db81d9f758076c9d8905cdd5820c0e029a5ecd739aa77ef809a12edcef1f17754adfbe799a32b4afeccd8008d4248efbecceafad8b9d00b23cb3a9892ef49c5ddf1b7abfcb2aecc9561483ba2ba09f1e8bbdd3df6b5cfe8d24a20c0bbdb9fd1726664dd63a408aa3977a088b8e8fc39b324ed6f8d295f2e654439f1a88df218e6ca4ec6521f61b909428d0c660f0297f35cd8be4919ab019493a5a57dcf63d32f16826b54b887847e869a1160b92aff2d3626f883aef598823a0372b0cb56df65ebd5ba8f9b8b48b533880481d4b0f5db75d6ee0ec0f84ffabcb35f4efd1fd35dea77751481bc973e8719902b79bb057a555c57827ade9483ed77873dca7afd051d4cb1055f8053fc599a910a934c8a63e15fd2260f9aebdba82b41c1776c436f062db210e79c9f3d4a0d3cbd4d7b80cda54e50ff1b12e3d02dc8a77302b4a264b841e2704308e0df7794f4d89a432521a1bd3e1b827945916cfb2f7fde4d0afdd7a7300002b9283a4f66994ff8d0aafb6dc1734bc824078a4cad246433de12903d5f3c621c0a175897e2fa51e019d1d2417564cca96f4bed26f59bff0bd68916db194e39a13c1d8057638fb166829eb5a99377be3e6a1a41681c4cb4fd4a012fd30e3e9be8ebc92a4343b6b553cf00513de9758198e158e745c9f97d83c9f38757dc304575803200d8da4829cb13c425bddc9b68c0cc0e8cf6b92922f52de3a828f479f3f6fb1485d02fd528e35439338852973529807aa6c72b914afe12728a1ee5921c6f82709ad9890e12d485f3eecebe73c14427d629a63d3713dcca1d9175c3ef2073a2e21efc3841d2ad4ab65937ae102c68ffe711d7ec09b31b2e2f8c490166acf4936d279fe202cc11c2379d7bbefe97d8ea9dbbb91616e7560ee6cc2480837754621f7a600cc10a2876305941d8709fa8a2863628d2adabdd8532a6212660acfd2b2d2a0350ef02ccb0020c45c8b2131c21e0995fd8100ab235f6dcb9f16fa8ee140fe78c60f4d2f70378d48b276f76769bba18e63b08d80a8bba45dd8e2602a843c5d61301997dd28a2cdeefab48fa04f0eac09a2ef5c1efacdba1ee13ea9fba5e2f743d895ad51c026395bcb54e691496db842db83a1f20439ddec8c7dbb395500af8cd90d0d5262edc8e55be708d7955e600d7e181bebdbfcf6ab36257aaec26fcc8c0cf20d3693846c4f29d966b792c332c64fb8a18c23a355f59946802fa58dd59667aea2556df58beefb35d0fb6b02891e246382e88490a98eceb2d1694ee425fe3f60a88fdaa5fc07948ecb8672d4a4a7d85928663cd9b977eef5dbaa28dff5ebdd84cea384d427a96d704b9c33bc3866cdf55e72e212d6ad3caa9c670ef2117b9d868ff59377072a7c9118d0b55a308267854a4f9cb512803c6153b29b58d953a87445d627d702efad2055613620bdf4de558b9e00da79eda883354fd20c58f3d8b0a7c278c84a5023f8453b7904d4e579848282dfbf7b4073751387c70331485dd30c1fa82c8d14f3bb8242214429ab0cf24b8e1ed012e1707dd86cbc8b69f7486b880fa17e72879db00d4b28605bcb6fbed255bbd3cd2aad54248640e61a27955274b546bcae4cdc72f1bd895d095e17bfa3174ed4ead5e844bc47918b7f83ce4a064564c3dbb77051baf3082e36b36b6d8f6e26ebde7449724bd3e0900bff5ccdedc44742ac3e8c64a13688ddd56ff708b68c837711db45b11970103f872bc2b2cf1869e2be89435310795779a027d0d8365c0b8da8786f499c24db2f5cb3c49c275a8b3a6cd18a640228db36bb1aea64a0c4d4bfcfa36c0544ee681f96b8fe3293402c02646e3fa5570a44ba641b73d9a241b3f1b558d13b7b8e65b6257094dbfea492191de427c44cefb1ad31384e66f2f0e7bb73f3735f514d061e355e0a1ff0136d4a64e04e0f9fc778cad81a1e6d9016105f03f46b61d86ac1eecf1ea53b7ca3ec02d93930be5948fbd153467ed9f6eda1b339fc0e7e5a1cec52780805460079a1ad4ccad2ca35994eb76295eba3f822a51f2c4c1d7af4add07a5216aefdb6d2352af878c5cc4057e251eabe74ca7ebd16d060d3bc2ecfcdfb7ba780a942fb6b88fb4c2aea610d4766037e2ab07a8bccc705a0cdcfe39cd7eea88ed872d24dab7f965bb6860cfbacf9ffb0e7dcf36a39c2baaa93a8832f1127a5f9c62fcca28b2bf0ac6bed9fdbed91b7baa0cb9dc95a04803ee3890d22b12ca26f44b1179dd61f916e6fb7bc11e6d238fb10c8c0d1f074fa747093951629e8b553d52c408f92fcbee57f0badf50b72ab707245c275cfdc0fa520736bdaf24a7ad01f158d7dc71e72766126ddbf33bb90ff9fd4875b87e1680f7c1db1a91743a6ee82354893ed0e9423028321567c432ca9c1f8013026907cbddbbdf769de21a9ab6dcc67b1152477f13e91152df1aa97a6114892821b14076bd663971881f522d7a43e0c43b15f0ee8c976ec2b95f08253b4312a09d274a4ddc3a9b5ca2135dfb62763381493c9328748483b6a4d2dd07222f1ba89ea87523f125b1e89267607d4e33bdcad99dbe38a3c51a3f856a4c78c8583937c38214f2ccc1dabb4c9e8e3b6ccf771888b9e6a6554a60320c9c3a3ad2804e76282ef022bd0772f195232d9f619b3ee73d7f20eaade483a04dc272d40279b66f6019ec80a1da9acd60b472fcca56c157b51de5423b020152df99164c45c49cb862d6d595baf8e55dbc3fc6c9f71f33dfb181320ce633e9fc465543d37c1f331e55265d176c7a80c48af6251d086f41bdfdf85ac5994bff1198c6151d9e5598ad7b39e14304e252f8f94aa79860f2cdeb5747047b0dab586b97bda48d0b40cbb9e7ff0bdc8a9a8abbbce3369acfdce84a9098e2e9f615546b29f55194a46b00e539ac0fe79dac79378b28b82c89917b7f03bc4f00e412d0547425a49c4419f2618d2bf83c78f1d757ce753ffa0675d81f3cdbc3b9224b89e9e0ee6f3323295f501c409c4594e2a9450c687b5cc0ea69c8cc73bfe8de255e99e6e3110308c20935bbde2880126231702cb9b6fd1c7e8562f3a32f4a2137a491f207e0c8d80fbdd0b0c8a941c099023199513534841ea524055625071795344214d99c894ec475b4962608bb1d4434c35f6a416ce7300fc9b51c95e87ecdb592cfca82ad64f4d70be9b91e8f28f2ae785e6a4f87551f7bcd68fd42893c09e7f0c9de174a094618874d72e640398a67738f95a20cd4d20ed9f029dbf52e434b85d0366911ac493c5151dc20b04c644027fbcefd235ef3203f74f0942d23ee04649ccfd3600020296211f1ef8655ae6b46163363b7537e5097f464946213c19df31312b53d0f08b442762caa7069d075042a885317fe6aa48e99aa7ae268c307dce7be7adadc288b72726d1940b00de4b7aa545160ac9a0f3c2f0eb7df5d2443cea368eae455d331a208cc91dc713acc4da4d65c293962dbd46b06c6e0f8b4618900d750681d6e7120a7ec97631763c26041723d5dd07fa851f3c7c1e03fd8783af5af1b3f75eaf7e24e7a1f963eae80b18797d774b4551920b192d339a3f649d4bb15e27dd30dec9d669afba6805e90a2cbdffb0281fa722d54169470fce071bf726c30371f9105838a81ecc0767f5ad8e8d1a3c7120661aa2bc8fec1657c2ae3fd75da76c53167d4126e98167f0f9ccd94d5c3a3fb29cabe00acccb7da1e5ddcfb9fb03d9dcbb188ef712e033f74fef52fe6c2f38c8211511546219c00173dccf6db38be0d452de1174e357075bec695af58ac63ffa3ea0df5eec937ad1f93b74fc76e7419b6f34c8c2181267b1202a22a9a22a7c403783b6e7cdfef4e7afbad2ec3c9d8902974265daac19a166cd37d4d60d71397b8fc56c5a44718091fd31d937d2f71e3db48513775e746e9a1d871555c66c540dc65abbe2dd171c62091d3e396c6c4ad79768e18e51679daa861a3086104d2a49d48b51d1f069e280367d5ff4bfc4563e04939d9c4df1322fc0ac5f4ffdb9621684bfd026b867a70bb4aa7f651c84f5b3506b241ac4c80d7f190e4e5249dcd095905b48255ef812ae229c25f6238ba3410778bdd6225bb9f8488552c5c12c66e572bb09eac4a89481034c56a9196036eb41f62d430e9ab8972d7f28d20d8ee2cad68194c9d8d1b3b6bdb4db6e05dd6f504c193af33070a06666960f27f2fab0ac748539ccb45019eba08226d5a123d207e3a5437c6b62ab1f3b42ab4de40121b2c90b5acd854d8bbdba6eecad1a39bf598f46e285cc2b9ab9db9d1a02329b7df4a8eeab8b53b1cf5eabfd7697c30171597c7d50d9353ef5b3478e732245f35b4fcfd2e9b482eb863d873944122e3bfb2f59c95f745d037f86826be6b93cc755b18d9ebce541866d1981aeddf6ab990a03f0876fe9e2978f40ee6e49eb75831ed8b77e2e4bd5f3d1f0311634eee81180b94aa36870cf44a91f8a4a25dddd2e7e16039f91360950f023c7938a9a46e4201bbc6e4515b78bcbd4c3da6f28fd21de172c03c67834a78989b8a054fe54cf4089bd1ffd722566a77f7e82469eecf46fe745dc58d44424df3decdeb69a5b64c795b2610930f0569fb6587a1d8d1f1a5072c999a59e6b60cc66e4f1acea657e449b8956cb9231ffa3a5a0acd8e2ee1cc2b8460796f773c6c3a98859d2b4a47870208f985182558d18e32c538d1158080e712180bf7f180847f217ffcf991adad5c5a2e7a3fd6ea860611a3c8f1e0742a097dac3e592094704d177269b41e76b95084c7cb13758e67878000bf1fd654a75db90f23066746206193756f36c7d9108b6418d2d0c261a64c3b504360e0e07c0529396645e989c4749820f6360bd17d9a06ecd9648319211a9be4efc4e762a8051a4f45306b3fdfe31d7eb427eedc438380a13544eb06de9e363d655195dd367169c92de664c00993d35404dfcfdb0870fc23a6206fde395806995af786195efaeba662abf218cbd51b468be5350f254b5dfb235ad449de74239489a8da3defa385dd25bf26f0f28afc0bc8a4fd96c8bec7f642db7dc3823fd212f9c0e63d22e0dbbbf17c65cb1d297287be4b8b1e5f2e04488d55442c599fc19dc8cf84f56163fd1ba3112bd5f5a68789c2dc6945cbdb5e83fe2defe4262a9470ad23bf30e6db617835bf96b0c9d36a0812156c867a6ec36e173647d4723fc8677d02d4910c76ddbd8919f333f4bd5d1bbd954b0231240e1633873387906e514eed6d7e4184534f36a58be3849e24b53005610b1911d3a2347549a3529951818927fd4d025512f37619f85e103cbbb9d78096b5655d41f4fd67e6b75c50f1c1a5489aa0ec8447c9e8b7c63a8358d4c42ba1633c4497071d592d638cd029a29f38b4a12402b1168b1a44781cbd88e5f3252d972f54625494ab0b4df8207aee996ea005f366754eebe77a40d107d3c8c9832dd2c5091404b8aea2d7f0d81331c47714148ea0dba29272a78bb7db8ddaaba10dd02af3a6bbafed129e720a5f9261f1bf0ca839b834712dc20f13b171a94c28ac07c3dd61fef2531e53312c78b922c3227ed0108b0269bb72e98d87341f66dc8ca8c40b90c8ff29546b494b9f79d2975d35af866118ffa6a11fb8021cc3c22b433647dc33037b337386da961be5e2af9fc0c32a2bb120f6accbe42a020f4b3bdfbde72cc0ecb32a383192218f05c36164ba2ab14ecafe9b287c81f26203c0c05fd9bdaa01b1366d64ae77d354b7b9556103afaac3b5b6c7ed1c4492bd745e2f26f017ae7d7f091bb19d16a42d8f6c3421dbc666caca6b5cb63c6b309304c3c3884cf40bbc0ff8a462fa0329c02c7dcbed90ef860a1352c9be52a5ccdbe15008278c4259705c6a87ddd45c4588c9ac2a0aed9a8fe0b7ba827f383bcc0f65e5810da6d280b75c1770f8715c716a41873e7a1019ebc5b77ed17bced096e499b5c616f10b055e9c5d53d4aba33f63de478f5e9ae0c8668dba1108d532167f2164df937f32c3aa8fef076fa661650e047366f7cc9448038d5629a20b296257e073ed3736d683933a974b7c4ba2f10d179f58aabcb9dbe03d6911cce6e8b350dec4f87b77923e3f6621394cf96b8191915e7eaa9f16af2212e94753b9e6216eaa28fb66f92bda4243d34d24e08a43281279b6bcf1eb0b10014e9fdfadf4e49f4c301dc211991dc04572b97206ee2108b1ccc62b674a0b481ed7e993d2197ca54eb00b5b3b68a8bb26f7e0a7ba926922fe2466f92f5582cc5a675534e4cf1c2acf9cbbc55f891635b176c7ba210f1b9f63b8318dfbeaf2a5bd3d72e9b8b12fb3282c74e454f90063592a91b3f37edd54038cf9b309a7a4525ecbe8e19662c7e8ff46c8be1e20130cae565f181a9ab356236ae2014173bc18d1e44977f06a6ff8074faf914651bdb12f91e19171f6234b889f4f33558a67005cee95b8d15a5e69e2693acf911140f2066062caecd1d7ff25bc3e9953096c9a62ed40857c1601d24b2152bbc703ece8879ba138402442b2e7928447abe05acb2ee8f415b68eca006b9e50c3bf306e15c553c6cb7410bb2407632db722f72f0ad97c5cf1b59c041d433ab15fb84ec4c0c92ec8c538c0fe1996996377812e88b5810403b34ddbe41ae10bfbc718c4e1f097ed21f9f12b3187b7898689af717a51ec452c60dc4d551038d490e8175f5939a7f6791521dd618e705f99a4126bb170df92245b4f3d4decefc7ca8737d693389ac9b8a419564497f50a4b5ede170bbc7e682318d96e041c1dd51b9b7116d53c597b703bac2cb64d3dd5259f8895a29b2127aa2cf2f7874e15d45f2884e048b9b70477f011fcd8635606e7c5248400a47c53241d1bebfecf3ca0f442aa50ddb5f498be17ded0e68f6d858764022cea34d7f043511b08f01b65a2ecd89e19ce1150a715f83400dbbdd51d15c2f2ffc2fc93cd5ee274a5d7d55169aacaf4b92f2bb6c2077230aa17541c7a6ec0ab5abe656b28092bfdf3d8921c4a97df0239f84a1e53d1e62d3ca3745ab840809fd50c9abd7978601d317335a4981a68b399f4132aad22fea16b7f6e24d29c07707916be83dc542c59e00149f007a73e1342b0f3ee54bdf71c2e6df57ebf4bad50aa44f11ee82145b006a0c7365a3dfc830c657bbe68ad96e99623c4236b474d35a990c12dda791</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA加密系统的20年</title>
      <link href="/2022/10/29/RSA%E5%8A%A0%E5%AF%86%E7%B3%BB%E7%BB%9F%E7%9A%8420%E5%B9%B4/"/>
      <url>/2022/10/29/RSA%E5%8A%A0%E5%AF%86%E7%B3%BB%E7%BB%9F%E7%9A%8420%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="rsa加密系统的20年">RSA加密系统的20年</h1><p><strong>原文：<ahref="https://www.ams.org/notices/199902/boneh.pdf">Twenty Years ofAttacks on the RSA Cryptosystem</a></strong></p><p><strong>作者：Dan Boneh@Stanford University(<ahref="mailto:dabo@cs.stanford.edu">dabo@cs.stanford.edu</a>)</strong></p><p><strong>译者：Harper</strong></p><p>参考链接：</p><ul><li><ahref="https://ctf-wiki.org/crypto/asymmetric/rsa/rsa_coppersmith_attack/#boneh-and-durfee-attack">Coppersmith相关攻击 - CTF Wiki</a></li><li><a href="https://paper.seebug.org/727/">二十年以来对 RSA密码系统攻击综述</a></li></ul><h2 id="背景介绍">背景介绍</h2><p>RSA密码系统由Ron Rivest, Adi Shamir和LenAdleman发明，在1977年8月的《科学美国人》杂志上首次公布。密码系统最常用于提供隐私和确保数字数据的真实性。目前，RSA被部署在许多商业系统中。它被网络服务器和浏览器用来保护网络传输，它被用来确保电子邮件的私密性和真实性，它被用来保护远程登录会话，它是电子信用卡支付系统的核心。简而言之，RSA常用于需要考虑数字数据安全性的应用程序中。</p><img src="/2022/10/29/RSA%E5%8A%A0%E5%AF%86%E7%B3%BB%E7%BB%9F%E7%9A%8420%E5%B9%B4/RSA%E4%BD%9C%E8%80%85.png" class="RSA是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的"><h2 id="rsa加密算法">RSA加密算法</h2><p>我们遵循标准命名约定，使用Alice和Bob表示希望相互通信的两个通用方。我们使用Marvin来表示恶意的攻击者，希望窃听或篡改Alice和Bob之间的通信。</p><h3 id="参数设置">参数设置</h3><ul><li>两个质数<span class="math inline">\(p和q\)</span>，再计算得到<spanclass="math inline">\(N = p*q\)</span></li><li>一个随机整数<span class="math inline">\(e\in (1,φ(N))\)</span>,再计算<span class="math inline">\(d \equiv e^{-1}\pmod{\varphi(N)}\)</span></li><li>公钥pk = &lt;N,e&gt;</li><li>私钥sk = &lt;N,d&gt;</li></ul><h4 id="参数生成方法">参数生成方法</h4><p><strong>第一步，随机选择两个不相等的质数p和q。</strong></p><blockquote><p><strong>Alice</strong>选择了61和53。（实际应用中，这两个质数越大，就越难破解。）</p></blockquote><p><strong>第二步，计算p和q的乘积N。</strong></p><blockquote><p>Alice就把61和53相乘。</p><p>N = 61×53 = 3233</p></blockquote><p>N的长度就是密钥长度。3233写成二进制是110010100001，一共有12位，所以这个密钥就是12位。实际应用中，RSA密钥一般是1024位，重要场合则为2048位。</p><p><strong>第三步，计算N的欧拉函数φ(N)。</strong></p><blockquote><p>N是质数，则 φ(N)=N-1 N = p1 × p2 φ(N) = φ(p1p2) = φ(p1)φ(p2) =&gt;φ(N) = (p-1)(q-1)</p></blockquote><p>Alice算出φ(3233)等于60×52，即3120。</p><p><strong>第四步，随机选择一个整数e，条件是1&lt; e &lt; φ(N)，且e与φ(N)互质。</strong></p><p>Alice就在1到3120之间，随机选择了17。（实际应用中，常常选择65537。）</p><p><strong>第五步，计算e对于φ(N)的模反元素d。</strong></p><p>所谓”模反元素”就是指有一个整数d，可以使得ed被φ(N)除的余数为1,故<spanclass="math inline">\(d \equiv e^{-1} \pmod{\varphi(N)}\)</span></p><blockquote><p>ed ≡ 1 (mod φ(N))</p></blockquote><p>这个式子等价于</p><blockquote><p>ed - 1 = kφ(N)</p></blockquote><p>于是，找到模反元素d，实质上就是对下面这个二元一次方程求解，使用拓展欧几里得算法即可</p><blockquote><p>ex + φ(N)y = 1</p></blockquote><p><strong>第六步，将N和e封装成公钥，N和d封装成私钥。</strong></p><p>在Alice的例子中，N=3233，e=17，d=2753，所以公钥就是(3233,17)，私钥就是（3233, 2753）。</p><p>实际应用中，公钥和私钥的数据都采用<ahref="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/zh-cn/ASN.1">ASN.1</a>格式表达。</p><h3 id="加密">加密</h3><p>密文是一个整数m属于乘法群<spanclass="math inline">\(\mathbb{Z^*_{N}}\)</span>，即<spanclass="math inline">\(m \in \mathbb{Z^*_{N}}\)</span></p><p>计算密文ciphertext简称c，需要用到公钥pk=&lt;N,e&gt;</p><blockquote><p><span class="math inline">\(c \equiv m*e \pmod{N}\)</span></p></blockquote><p>Alice的公钥是 (3233,17)，Bob的m假设是65，那么可以算出下面的等式：</p><blockquote><p>65^17 ≡ 2790 (mod 3233)</p></blockquote><p>于是，c等于2790，Bob就把2790发给了Alice。</p><h4 id="参数生成的效率">参数生成的效率</h4><p>RSA密钥对的生成方法是随机选取两个<spanclass="math inline">\(\cfrac{n}{2}\)</span>位素数并将其相乘得到N。然后，对于给定的加密$e &lt; (N)<span class="math inline">\(，使用扩展欧氏算法计算\)</span>de^{-1} $。</p><p>由于素数集非常密集，因此可以快速生成一个随机的<spanclass="math inline">\(\cfrac{n}{2}\)</span>位素数，方法是选取随机的<spanclass="math inline">\(\cfrac{n}{2}\)</span>位整数并用<strong>概率素数检验(如Fermat素性检验法)</strong>来检验每个整数的素数。</p><p>总体来说，生成素数还是比较快的，openssl生成一个1024位的素数在毫秒级即可实现。</p><h3 id="解密">解密</h3><p>Alice拿到Bob发来的2790以后，就用自己的私钥(3233, 2753)进行解密。可以证明，下面的等式一定成立：</p><blockquote><p><span class="math inline">\(m \equiv c^d \pmod{N}\)</span></p></blockquote><p>也就是说，c的d次方除以N的余数为m。现在，c等于2790，私钥是(3233,2753)，那么，Alice算出</p><blockquote><p>2790^2753 ≡ 65 (mod 3233)</p></blockquote><p>因此，Alice知道了Bob加密前的原文就是65。</p><h3 id="解密正确性的证明">解密正确性的证明</h3><p>这里需要使用<ahref="https://zhuanlan.zhihu.com/p/35060143">Euler定理</a>,即</p><blockquote><p>如果正整数 n 和整数 a 互质，那么就有 <spanclass="math inline">\(a^{\varphi(n)}≡1\pmod{n})\)</span>其中<strong>欧拉函数</strong> φ(n) 是「小于 n 的正整数中和 n互质的数」的个数</p></blockquote><p>下面进入正式的证明过程</p><blockquote><p><span class="math display">\[c^d \equiv (m^e)^d \equiv m^{ed} \\\because e*d \equiv 1 \pmod{\varphi(N)} \\\therefore e*d=k*\varphi(N)+1 \; where \; k \in \mathbf{Z} \\\therefore m^{ed} \equiv m^{k*\varphi(N)+1} \equiv m^{k*\varphi(N)} *m\pmod{N} \\with\;the \; help \; of \; Euler \;theorem:m^{\varphi(N)} \equiv1\pmod{N}\\so: \; m^{ed} \equiv m^{k*\varphi(N)+1} \equiv m^{k*\varphi(N)} *m\equiv  1*m\equiv m \pmod{N}\]</span></p></blockquote><h3 id="安全性分析">安全性分析</h3><h4 id="数学难题-大整数的素数分解">数学难题-大整数的素数分解</h4><p>我们可以看到，如果不知道d，就没有办法从c求出m。而前面已经说过，要知道d就必须分解N，这是极难做到的，因为至今为止大整数的素数分解依然是一个难题，所以RSA算法保证了通信安全</p><h4 id="语义安全-semantic-security">语义安全-semantic security</h4><p>RSA不是一个语义安全的加密算法，所谓语义安全，我们不能从密文中获得任何关于明文的信息，比如一段话的第一个字母，一段话中某个数字出现的次数等等。</p><p>拿RSA举例，我们可以很简单的获得m在N上的雅各比符号</p><h2 id="基本攻击">基本攻击</h2><p>我们首先描述一些老的基本攻击，这些攻击说明了RSA的公然滥用情况。虽然存在许多这样的攻击，但我们仅举两个例子。</p><h3 id="common-modulus-共模">Common modulus-共模</h3><p>为了避免为每个用户生成不同的模数<spanclass="math inline">\(N=p*q\)</span>，人们可能希望一劳永逸地固定使用一个<spanclass="math inline">\(N\)</span>，所有用户都使用相同的<spanclass="math inline">\(N\)</span>。可信的中央机构可以向用户提供唯一的一对参数<spanclass="math inline">\(&lt;e_i,d_i&gt;\)</span>，用户从其中生成公钥<spanclass="math inline">\(&lt;N,e_i&gt;\)</span>和私钥<spanclass="math inline">\(&lt;N,d_i&gt;\)</span>。</p><p>乍一看，这似乎行得通：为Alice准备的密文<span class="math inline">\(c= m^{e_a} \pmod{N}\)</span>无法由Bob解密，因为Bob不知道<spanclass="math inline">\(d_a\)</span>。但是，这是不正确的，由此产生的系统是不安全的。事实上，Bob可以使用他自己的指数<spanclass="math inline">\(&lt;e_b,d_b&gt;\)</span>来分解模数<spanclass="math inline">\(N\)</span>。一旦被分解，Bob就可以从她的公钥中计算出Alice的私钥。Simmons的这一观察结果表明，RSA模不应被一个以上的实体使用。</p><h3 id="blinding-盲化">Blinding-盲化</h3><p>设<spanclass="math inline">\(&lt;N,d&gt;\)</span>是Bob的私钥，而<spanclass="math inline">\(&lt;N,e&gt;\)</span>是相应的公钥。假设攻击者Marvin想要Bob的签名<spanclass="math inline">\(m^d_{Bob} \pmod{N} \in\mathbb{Z^{\ast}_N}\)</span>。当然Bob不傻，他拒绝签署。但是Marvin可以尝试以下方法：他随机选择一个<spanclass="math inline">\(r \in \mathbb{Z^{\ast}_N}\)</span>并设<spanclass="math inline">\(m&#39; =r^e*m_{Bob}\)</span>。然后他让Bob在随机消息<spanclass="math inline">\(m&#39;\)</span>上签名。Bob可能愿意在看上去没什么问题的上签名，但是回想一下<spanclass="math inline">\(S&#39;=(m&#39;)^d\mod{N}\)</span>，Marvin现在简单地计算<span class="math inline">\(S =S&#39;/r\)</span>就得到Bob在初始上的签名<spanclass="math inline">\(S\)</span>。</p><p>事实上： <span class="math display">\[S^e = (S&#39;)^e/(r^e)=(M&#39;)^{ed}/r^e \equiv M&#39;/r^e = M \pmod{N}\]</span>这种称为盲化的技术使Marvin能够在他选择的消息上获得有效的签名，方法是让Bob在随机的"盲化"消息上签名。Bob不知道他实际在签名的是什么消息。由于大多数签名方案在签名之前对消息应用"单向散列"算法，因此此种攻击倒不是一个严重的问题。尽管我们将盲化描述为一种攻击，但它实际上是实现匿名数字现金所需的一个有用属性(可以用来购买商品的现金，但不会透露购买者的身份）</p><h2 id="low-private-exponent-低解密指数攻击">Low PrivateExponent-低解密指数攻击</h2><h3 id="理论">理论</h3><p>解密使用参数d，如果d非常小，那么可以用此方法进行解密。</p><p><strong>Theorem 2 (M. Wiener)</strong> 令 <spanclass="math inline">\(N = pq\)</span> ，这里 <spanclass="math inline">\(q &lt; p &lt; 2q\)</span> . 如果$ d &lt; 1/3N^{1/4}$ 。 给定私钥对<span class="math inline">\(&lt;N,e&gt;\)</span>，这里<span class="math inline">\(e*d = 1 \mod{\varphi(N)}\)</span> ,Marvin 可以快速的复原参数 <span class="math inline">\(d\)</span>.</p><blockquote><p>证明详见论文《<strong>TWENTY YEARS OF ATTACKS ON THE RSACRYPTOSYSTEM</strong>》</p><p>最后给出结论： <span class="math display">\[\left| \cfrac{e} {N} - \cfrac{k} {d} \right| \le \cfrac{1} {dN^{1/4} }&lt; \cfrac{1}  {2d^2} \\这里k满足：k\varphi(N)-ed=1\]</span></p></blockquote><p>这是一个经典的逼近关系，两个分数在约束内非常逼近。首先<spanclass="math inline">\(k\varphi(N)-ed=1\)</span>,所以<spanclass="math inline">\(gcd(k,d)=1\)</span>，即k和d互素，分数<spanclass="math inline">\(\cfrac{k}{d}\)</span>是一个最简分数。虽然d很小，但也只是相对于N（1024bits）比较小，实际上d也有上百比特的长度，所以<spanclass="math inline">\(\cfrac{1}{2d^2}\)</span>是一个很小的数，由上面的不等式得到<spanclass="math inline">\(\cfrac{e} {N}\)</span>是很接近于<spanclass="math inline">\(\cfrac{k} {d}\)</span>的。大致的思路就是在<spanclass="math inline">\(\cfrac{e}{N}\)</span>附近寻找一个小数，把小数按照分数的形式展开，分母就是我们想要找的参数<spanclass="math inline">\(d\)</span>，但实际上并没有这么简单(论文中使用连分数展开)。</p><p>由于通常都是1024位，因此<spanclass="math inline">\(d\)</span>必须至少256位长才能避免这种攻击。这对于诸如"智能卡"之类的低功耗设备来说是不幸的，因为小就能节省大量能耗。然而，并不是毫无办法。Wiener提出了许多能够实现快速解密并且不易受其攻击影响的技术</p><h3 id="代码">代码</h3><p>使用python库owiener实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> owiener<br>e = <span class="hljs-number">3047442173541658754667464233797118324917469250436575767227172319344577259865313428705759330024959317716760816959590728238918140105663188172228696589411452947738069773833351725455888549656717874059636289036277785342126992626060696063089487811946920569580454880169977542532087635095357205433679009382368108273</span><br><br>n = <span class="hljs-number">135568509670260054049994954417860747085442883428459182441559553532993752593294067458983143521109377661295622146963670193783017382697726454953197805014428888491744355387957923382241961401063461549210355871385000347645387907568135032087942016502668629010859519249039662555733548461551175133582871220209515648241</span><br><br>d = owiener.attack(e, n)<br><br>m=<span class="hljs-number">123123123123123123123123123123123113212312312312</span><br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br>m_decrypted = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(m_decrypted)<br></code></pre></td></tr></table></figure><p>计算得到d的值为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">22299128035876669298809061693021648003426573977341841609779417036458441464337</span><br></code></pre></td></tr></table></figure><p>计算d的位数大概是<strong>254位</strong>,符合上面的分析，运算时间也是很快，用python基本秒出答案。</p><h2 id="low-private-exponent-低加密指数攻击">Low PrivateExponent-低加密指数攻击</h2><p>为了减少加密或签名验证时间，习惯上使用一个小的公共指数。 e的最小可能值为3，但为了击败某些攻击，建议使用<spanclass="math inline">\(e = 2^{16} + 1 =65537\)</span>。当使用65537时，签名验证需要 17 次乘法，而使用随机 <spanclass="math inline">\(e &lt; \varphi(N)\)</span> 时大约需要 1000次乘法。所以对使用小e的攻击连绵不绝。</p><h3 id="coppersmith理论">Coppersmith理论</h3><p>对低公共指数 RSA 最有效的攻击是基于 Coppersmith的一个定理。Coppersmith定理有很多应用，这里只介绍其中的一部分。想要破解RSA，实际上可以看成一个解决函数零点的问题：<span class="math display">\[x^e \equiv c \pmod{N}\]</span>解出这个函数，就是我们想要做的事情，后面关于多项式环的论述也都是基于这个思想。</p><h4 id="前置定理">前置定理</h4><p>首先介绍一个理论：</p><p><strong>Theorem 3 (Coppersmith)</strong> Let N be an integer and<span class="math inline">\(f \in \mathbb{Z}[x]\)</span> be a monicpolynomial of degree d. Set $X = N ^{ {d}- } $ for some <spanclass="math inline">\(\epsilon \ge 0\)</span>. Then, given $ &lt; N , f&gt; $ Marvin can effciently find all integers $| x_0 | &lt; X $satisfying $f (x_0 ) = 0 $. The running time is dominated by the time ittakes to run the LLL algorithm on a lattice of dimension O (w ) with<span class="math inline">\(w = min(\frac{1} {\epsilon},log_2N)\)</span>.</p><p><font color="red">该定理提供了一种算法，可以有效地找方程<spanclass="math inline">\(f(x) \equiv 0 \pmod{N}\)</span> 的所有小于 $X =N^{} $的根</font></p><p>再给出一个引理：</p><p>首先我们定义范数的概念，给出多项式<spanclass="math inline">\(h(x)=\sum{a_ix^i} \in\mathbb{Z}\)</span>,定义范数<span class="math inline">\(\|h\|^2 =\sum{|a_i|^2}\)</span></p><p><strong><em>Lemma 4</em></strong> <em>Let <spanclass="math inline">\(h(x) \in \mathbb{Z}\)</span> be a polynomial ofdegree d and let X be a positive integer. Suppose $|h(xX )| &lt; $ . If<span class="math inline">\(|x_0| &lt; X\)</span> satisfies <spanclass="math inline">\(h(x_0) = 0 \mod{N}\)</span> , then <spanclass="math inline">\(h(x_0) = 0\)</span> holds over theintegers.</em></p><p>这个引理告诉我们：<font color="red">如果满足前置条件，<spanclass="math inline">\(f(x) \equiv 0 \pmod{N}\)</span>的根，也是<spanclass="math inline">\(f(x)=0\)</span>在整数域上的根</font>，但实际上函数<spanclass="math inline">\(f(x)\)</span>一般都没有这么小的范数能满足前置条件。我们可以构造一个函数<spanclass="math inline">\(h(x)=g(x)*f(x)\)</span>，这个函数<spanclass="math inline">\(h(x)\)</span>应该有比较小的范数来满足前置条件。这相当于一个问题，找到<spanclass="math inline">\(f(x),xf(x),x^2f(x),\dots,x^rf(x)\)</span>的一个线性组合，这个线性组合就是函数<spanclass="math inline">\(h(x)\)</span>，且有较低的范数。</p><h4 id="解决方案">解决方案</h4><p>前面我们介绍过，想要找到函数<spanclass="math inline">\(h(x)\)</span>，实际上就是找一个线性组合，DanBoneh在论文中叙述了一个基于格中LLL算法的解决方案。大家可以细看论文(作者关于格的理论已经忘得差不多了)，以后咱再补充。</p><h3 id="hastad广播攻击">Hastad广播攻击</h3><p>所谓广播，就是一个人把消息发给很多人，这里我们假设假设 Bob希望将加密消息 M 发送给多个参与方 $P_1, P_2, ,P_K $。每一方都有自己的RSA 密钥 <span class="math inline">\(pk=&lt;N_i,e_i&gt;\)</span>。我们假设 M 小于所有的<span class="math inline">\(N_i\)</span>，即<span class="math inline">\(M&lt;min(N_1,N2, \dots ,N_K)\)</span>。为了发送 M，天真的Bob 使用每个公钥对其进行加密，并将第 i个密文发送给 第i个参与方<span class="math inline">\(P_i\)</span>。攻击者Marvin 可以在 Bob 视线之外窃听连接并收集 k 个被传输的密文。</p><p>为了便于大家理解，我们举一个例子来说明：</p><p>我们假定所有公共指数<spanclass="math inline">\(e_i=3\)</span>，如果参与方的个数<spanclass="math inline">\(K \ge3\)</span>那么marvin可以破解出明文M，事实上破解只需解下面一个方程即可：<span class="math display">\[\begin{equation}    \begin{cases}    C_1 \equiv M^3 \mod{N_1}\\    C_2 \equiv M^3 \mod{N_2}\\    C_3 \equiv M^3 \mod{N_3}    \end{cases}\end{equation}\]</span> 这里假定<spanclass="math inline">\(gcd(N_i,N_j)=1\)</span>，即任意两个N之间互素，否则我们可以用<spanclass="math inline">\(N_i/N_j\)</span>很简单的求出他们的公因子，从而复原出<spanclass="math inline">\(p和q\)</span>，这个假定是有意义的。对于上面的方程，我们使用中国剩余定理(CRT)解出结果即为明文。</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fermat素性检验</title>
      <link href="/2022/10/29/Fermat%E7%B4%A0%E6%80%A7%E6%A3%80%E9%AA%8C/"/>
      <url>/2022/10/29/Fermat%E7%B4%A0%E6%80%A7%E6%A3%80%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="fermat素性检验">Fermat素性检验</h1><h2 id="实验环境">实验环境</h2><blockquote><ul><li>电脑：联想拯救者R9000p</li><li>cpu：AMD Ryzen 7 5800H</li><li>内存：16GB</li><li>操作系统：windows11</li><li>python版本：3.10</li></ul></blockquote><p>目标：</p><ul><li>掌握python基本函数库的使用</li><li>熟悉抽象代数的基本定理如Fermat小定理的使用</li><li>理解Fermat素性检验的原理，并编程实现</li><li>测试一些大数，以一定概率检验其素性</li></ul><h2 id="fermat素性检验介绍">Fermat素性检验介绍</h2><h3 id="背景">背景</h3><p><strong>费马素性检验</strong>是一种素数判定法则，利用<ahref="https://baike.baidu.com/item/随机化算法/6233182?fromModule=lemma_inlink">随机化算法</a>判断一个数是<ahref="https://baike.baidu.com/item/合数/49186?fromModule=lemma_inlink">合数</a>还是<em>可能是</em>素数。</p><h3 id="fermat小定理">Fermat小定理</h3><p><span class="math display">\[对\forall(a,p)=1,p为质数\\\exists a^{p-1} \equiv 1 \pmod{p}\]</span></p><blockquote><p>证明：</p><p><spanclass="math inline">\(\{1,2,3,4...p-1\}\)</span>是p的既约剩余系</p><p><span class="math inline">\(\because a,p\)</span>互质</p><p><span class="math inline">\(\therefore \{a*1 , a*2 , a*3 , a*4,\dots,a*(p-1)\}\)</span>也为p的既约剩余系</p><p><span class="math inline">\(\therefore 1*2*3 \dots*(p-1)≡a*2*a*3*a......(p-1)*a \pmod{p}\)</span></p><p>化简得<span class="math inline">\(a^{p-1} \equiv 1\pmod{p}\)</span></p></blockquote><h3 id="fermat素性检验基本原理">Fermat素性检验基本原理</h3><p>根据<ahref="https://baike.baidu.com/item/费马小定理/4776158?fromModule=lemma_inlink">费马小定理</a>：如果<em>p</em>是素数，<spanclass="math inline">\(1\leq a \leq p-1\)</span></p><p>那么 <span class="math display">\[a^{p-1} \equiv 1 \pmod{p}\]</span>如果我们想知道<em>n</em>是否是素数，我们在中间选取<em>a</em>，看看上面等式是否成立。</p><ul><li>如果对于数值<em>a</em>等式不成立，那么<em>n</em>是合数。</li><li>如果有很多的<em>a</em>能够使等式成立，那么我们可以说<em>n</em>可能是素数，或者<ahref="https://baike.baidu.com/item/伪素数/9262664?fromModule=lemma_inlink">伪素数</a>。</li></ul><p>在我们检验过程中，有可能我们选取的<em>a</em>都能让等式成立，然而n却是合数，所以最终得到的结果是，<font color = "red">我们以一定概率确定p是否为素数</font></p><h3 id="fermat素性检验流程">Fermat素性检验流程</h3><p>给定奇整数 <span class="math inline">\(m\geq3\)</span> 和安全参数<span class="math inline">\(k=5\)</span> （1） 随机选取整数<spanclass="math inline">\(a\)</span>,令<span class="math inline">\(2\leq a\leq m-2\)</span> （2） 计算<span class="math inline">\(g=(a,m)\)</span>，如果<span class="math inline">\(g=1\)</span>，转（3）；否则，跳出，m为合数 （3） 计算<spanclass="math inline">\(r=a^{m-1}\pmod{m}\)</span>，如果r=1,m可能是素数，转（1）；否则，跳出，m为合数（4） 重复上述过程k次，如果每次得到m可能为素数，则m为素数的概率为<spanclass="math inline">\(1- \frac1{2^k}\)</span> 。</p><img src="/2022/10/29/Fermat%E7%B4%A0%E6%80%A7%E6%A3%80%E9%AA%8C/%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class="流程图"><h2 id="python代码">python代码</h2><p>需要导入math模块求最大公因数</p><p>需要导入random模块来产生随机数</p><p>求<span class="math inline">\(r=a^{m-1}\pmod{m}\)</span>必须使用pow(a,num-1,num)函数一边乘法一边取模运算速度较快，不能先算<spanclass="math inline">\(a^{m-1}\)</span>再取模，否则时间太长算不出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">num, k=<span class="hljs-number">7</span></span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>        a=random.randrange(<span class="hljs-number">2</span>,num-<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span> math.gcd(a, num)!=<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>, <span class="hljs-number">1</span>-(<span class="hljs-number">0.2</span>)**k<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(a,num-<span class="hljs-number">1</span>,num)!=<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span> , <span class="hljs-number">1</span>-(<span class="hljs-number">0.2</span>)**k<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> , <span class="hljs-number">1</span>-(<span class="hljs-number">0.2</span>)**k<br>m1 = <span class="hljs-number">743476040059754298379331647007684224429004972336533937786799284757790400765316630522369642718204165253922832684184615021404737105614714107158733905598636152327037707290538422718453498125366750918857659068838460954633737911274770976191590193809661578032117496009853673140977556559136466107768672598883924301125589893895001253674886100289402530711221893</span><br>m2 = <span class="hljs-number">5434520625653357625890820149570485819447986258433769976634917091398967074086679540928507095017715540385352266035820823142060119390272763774034231321959236056764511968630360067353876686142517564224926196131349204754111599877101485686283117193149781387816214484583521923017500621725053392290279263586984207169423800476914654441473576611460323772832328657</span><br>m3 = <span class="hljs-number">876147742992673125957404768949712978720573116974723188491435550196169965040848206868200084918233743662847668000971402407461887306389122707315529364807593342507936022301657320206278702095378618110195051280478534126716517153056984269659532882692418682262081495725304483536777013188527470348249542840277926802938912332306310470632601156641005608958891</span><br>m4 = <span class="hljs-number">9876147742992673125957404768949712978720573116974723188491435550196169965040848206868200084918233743662847668000971402407461887306389122707315529364807593342507936022301657320206278702095378618110195051280478534126716517153056984269659532882692418682262081495725304483536777013188527470348249542840277926802938912332306310470632601156641005608958891</span><br><br>result , pr = is_prime(m4)<br><span class="hljs-keyword">if</span> result:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数以&quot;</span>,pr*<span class="hljs-number">100</span>,<span class="hljs-string">&quot;%的概率判定为素数&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;该数不是素数&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>latex常用数学公式</title>
      <link href="/2022/10/25/latex%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
      <url>/2022/10/25/latex%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="latex常用数学公式"><a href="#latex常用数学公式" class="headerlink" title="latex常用数学公式"></a>latex常用数学公式</h1><p>最近需要写一些文档，里面会有大量的公式，写出好看的公式的过程真的很治愈:cat:,这一期博客主要来介绍一些常用的latex公式，内容很干。<font color = "red">自己用markdown写的公式，渲染出来都是对的，但是放到博客上不知道怎么回事有一些奇奇怪怪的错误</font>，大家直接粘贴代码就行。</p><p>参考：<br><a href="https://artofproblemsolving.com/wiki/index.php/LaTeX:Symbols">https://artofproblemsolving.com/wiki/index.php/LaTeX:Symbols</a><br><a href="https://artofproblemsolving.com/wiki/index.php/LaTeX:Commands">https://artofproblemsolving.com/wiki/index.php/LaTeX:Commands</a></p><h2 id="各种类型的符号表"><a href="#各种类型的符号表" class="headerlink" title="各种类型的符号表"></a>各种类型的符号表</h2><h3 id="数集符号"><a href="#数集符号" class="headerlink" title="数集符号"></a>数集符号</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\mathbb{R}$</td><td style="text-align:center">\mathbb{R}</td><td style="text-align:center">$\mathbf{R}$</td><td style="text-align:center">\mathbf{R}</td><td style="text-align:center">$\mathcal{R}$</td><td style="text-align:center">\mathcal{R}</td><td style="text-align:center">$\mathfrak{R}$</td><td style="text-align:center">\mathfrak{R}</td></tr><tr><td style="text-align:center">$\mathbb{Z}$</td><td style="text-align:center">\mathbb{Z}</td><td style="text-align:center">$\mathbf{Z}$</td><td style="text-align:center">\mathbf{Z}</td><td style="text-align:center">$\mathcal{Z}$</td><td style="text-align:center">\mathcal{Z}</td><td style="text-align:center">$\mathfrak{Z}$</td><td style="text-align:center">\mathfrak{Z}</td></tr><tr><td style="text-align:center">$\mathbb{Q}$</td><td style="text-align:center">\mathbb{Q}</td><td style="text-align:center">$\mathbf{Q}$</td><td style="text-align:center">\mathbf{Q}</td><td style="text-align:center">$\mathcal{Q}$</td><td style="text-align:center">\mathcal{Q}</td><td style="text-align:center">$\mathfrak{Q}$</td><td style="text-align:center">\mathfrak{Q}</td></tr></tbody></table></div><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center"><script type="math/tex">\pm</script></td><td style="text-align:center">\pm</td><td style="text-align:center">$\mp$</td><td style="text-align:center">\mp</td><td style="text-align:center">$\times$</td><td style="text-align:center">\times</td></tr><tr><td style="text-align:center"><script type="math/tex">\div</script></td><td style="text-align:center">\div</td><td style="text-align:center">$\cdot$</td><td style="text-align:center">\cdot</td><td style="text-align:center">$\ast$</td><td style="text-align:center">\ast</td></tr><tr><td style="text-align:center"><script type="math/tex">\star</script></td><td style="text-align:center">\star</td><td style="text-align:center">$\dagger$</td><td style="text-align:center">\dagger</td><td style="text-align:center">$\ddagger$</td><td style="text-align:center">\ddagger</td></tr><tr><td style="text-align:center"><script type="math/tex">\amalg</script></td><td style="text-align:center">\amalg</td><td style="text-align:center">$\cap$</td><td style="text-align:center">\cap</td><td style="text-align:center">$\cup$</td><td style="text-align:center">\cup</td></tr><tr><td style="text-align:center">$\uplus$</td><td style="text-align:center">\uplus</td><td style="text-align:center">$\sqcap$</td><td style="text-align:center">\sqcap</td><td style="text-align:center">$\sqcup$</td><td style="text-align:center">\sqcup</td></tr><tr><td style="text-align:center">$\vee$</td><td style="text-align:center">\vee</td><td style="text-align:center">$\wedge$</td><td style="text-align:center">\wedge</td><td style="text-align:center">$\oplus$</td><td style="text-align:center">\oplus</td></tr><tr><td style="text-align:center">$\ominus$</td><td style="text-align:center">\ominus</td><td style="text-align:center">$\otimes$</td><td style="text-align:center">\otimes</td><td style="text-align:center">$\circ$</td><td style="text-align:center">\circ</td></tr><tr><td style="text-align:center">$\bullet$</td><td style="text-align:center">\bullet</td><td style="text-align:center">$\diamond$</td><td style="text-align:center">\diamond</td><td style="text-align:center">$\lhd$</td><td style="text-align:center">\lhd</td></tr><tr><td style="text-align:center">$\rhd$</td><td style="text-align:center">\rhd</td><td style="text-align:center">$\unlhd$</td><td style="text-align:center">\unlhd</td><td style="text-align:center">$\unrhd$</td><td style="text-align:center">\unrhd</td></tr><tr><td style="text-align:center">$\oslash$</td><td style="text-align:center">\oslash</td><td style="text-align:center">$\odot$</td><td style="text-align:center">\odot</td><td style="text-align:center">$\bigcirc$</td><td style="text-align:center">\bigcirc</td></tr><tr><td style="text-align:center">$\triangleleft$</td><td style="text-align:center">\triangleleft</td><td style="text-align:center">$\Diamond$</td><td style="text-align:center">\Diamond</td><td style="text-align:center">$\bigtriangleup$</td><td style="text-align:center">\bigtriangleup</td></tr><tr><td style="text-align:center">$\bigtriangledown$</td><td style="text-align:center">\bigtriangledown</td><td style="text-align:center">$\Box$</td><td style="text-align:center">\Box</td><td style="text-align:center">$\triangleright$</td><td style="text-align:center">\triangleright</td></tr><tr><td style="text-align:center">$\setminus$</td><td style="text-align:center">\setminus</td><td style="text-align:center">$\wr$</td><td style="text-align:center">\wr</td><td style="text-align:center">$\sqrt{x}$</td><td style="text-align:center">\sqrt{x}</td></tr><tr><td style="text-align:center">$x^{\circ}$</td><td style="text-align:center">x^{\circ}</td><td style="text-align:center">$\triangledown$</td><td style="text-align:center">\triangledown</td><td style="text-align:center">$\sqrt[n]{x}$</td><td style="text-align:center">\sqrt[n]{x}</td></tr><tr><td style="text-align:center">$a^x$</td><td style="text-align:center">a^x</td><td style="text-align:center">$a^{xyz}$</td><td style="text-align:center">a^{xyz}</td><td style="text-align:center">$a_x$</td><td style="text-align:center">a_x</td></tr></tbody></table></div><h3 id="关系符号"><a href="#关系符号" class="headerlink" title="关系符号"></a>关系符号</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\le$</td><td style="text-align:center">\le</td><td style="text-align:center">$\ge$</td><td style="text-align:center">\ge</td><td style="text-align:center">$\neq$</td><td style="text-align:center">\neq</td></tr><tr><td style="text-align:center">$\sim$</td><td style="text-align:center">\sim</td><td style="text-align:center">$\ll$</td><td style="text-align:center">\ll</td><td style="text-align:center">$\gg$</td><td style="text-align:center">\gg</td></tr><tr><td style="text-align:center">$\doteq$</td><td style="text-align:center">\doteq</td><td style="text-align:center">$\simeq$</td><td style="text-align:center">\simeq</td><td style="text-align:center">$\subset$</td><td style="text-align:center">\subset</td></tr><tr><td style="text-align:center">$\supset$</td><td style="text-align:center">\supset</td><td style="text-align:center">$\approx$</td><td style="text-align:center">\approx</td><td style="text-align:center">$\asymp$</td><td style="text-align:center">\asymp</td></tr><tr><td style="text-align:center">$\subseteq$</td><td style="text-align:center">\subseteq</td><td style="text-align:center">$\supseteq$</td><td style="text-align:center">\supseteq</td><td style="text-align:center">$\cong$</td><td style="text-align:center">\cong</td></tr><tr><td style="text-align:center">$\smile$</td><td style="text-align:center">\smile</td><td style="text-align:center">$\sqsubset$</td><td style="text-align:center">\sqsubset</td><td style="text-align:center">$\sqsupset$</td><td style="text-align:center">\sqsupset</td></tr><tr><td style="text-align:center">$\equiv$</td><td style="text-align:center">\equiv</td><td style="text-align:center">$\frown$</td><td style="text-align:center">\frown</td><td style="text-align:center">$\sqsubseteq$</td><td style="text-align:center">\sqsubseteq</td></tr><tr><td style="text-align:center">$\sqsupseteq$</td><td style="text-align:center">\sqsupseteq</td><td style="text-align:center">$\propto$</td><td style="text-align:center">\propto</td><td style="text-align:center">$\bowtie$</td><td style="text-align:center">\bowtie</td></tr><tr><td style="text-align:center">$\in$</td><td style="text-align:center">\in</td><td style="text-align:center">$\ni$</td><td style="text-align:center">\ni</td><td style="text-align:center">$\prec$</td><td style="text-align:center">\prec</td></tr><tr><td style="text-align:center">$\succ$</td><td style="text-align:center">\succ</td><td style="text-align:center">$\vdash$</td><td style="text-align:center">\vdash</td><td style="text-align:center">$\dashv$</td><td style="text-align:center">\dashv</td></tr><tr><td style="text-align:center">$\preceq$</td><td style="text-align:center">\preceq</td><td style="text-align:center">$\succeq$</td><td style="text-align:center">\succeq</td><td style="text-align:center">$\models$</td><td style="text-align:center">\models</td></tr><tr><td style="text-align:center">$\perp$</td><td style="text-align:center">\perp</td><td style="text-align:center">$\parallel$</td><td style="text-align:center">\parallel</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\mid$</td><td style="text-align:center">\mid</td><td style="text-align:center">$\bumpeq$</td><td style="text-align:center">\bumpeq</td><td style="text-align:center"></td></tr></tbody></table></div><p>关系符号前面加一个n，就可以变成这些关系符号的反义</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\nmid$</td><td style="text-align:center">\nmid</td><td style="text-align:center">$\nleq$</td><td style="text-align:center">\nleq</td><td style="text-align:center">$\ngeq$</td><td style="text-align:center">\ngeq</td></tr><tr><td style="text-align:center">$\nsim$</td><td style="text-align:center">\nsim</td><td style="text-align:center">$\ncong$</td><td style="text-align:center">\ncong</td><td style="text-align:center">$\nparallel$</td><td style="text-align:center">\nparallel</td></tr><tr><td style="text-align:center">$\not&lt;$</td><td style="text-align:center">\not&lt;</td><td style="text-align:center">$\not&gt;$</td><td style="text-align:center">\not&gt;</td><td style="text-align:center">$\not=$</td><td style="text-align:center">\not= or \neq or \ne</td></tr><tr><td style="text-align:center">$\not\le$</td><td style="text-align:center">\not\le</td><td style="text-align:center">$\not\ge$</td><td style="text-align:center">\not\ge</td><td style="text-align:center">$\not\sim$</td><td style="text-align:center">\not\sim</td></tr><tr><td style="text-align:center">$\not \approx$</td><td style="text-align:center">\not\approx</td><td style="text-align:center">$\not\cong$</td><td style="text-align:center">\not\cong</td><td style="text-align:center">$\not\equiv$</td><td style="text-align:center">\not\equiv</td></tr><tr><td style="text-align:center">$\not\parallel$</td><td style="text-align:center">\not\parallel</td><td style="text-align:center">$\nless$</td><td style="text-align:center">\nless</td><td style="text-align:center">$\ngtr$</td><td style="text-align:center">\ngtr</td></tr><tr><td style="text-align:center">$\lneq$</td><td style="text-align:center">\lneq</td><td style="text-align:center">$\gneq$</td><td style="text-align:center">\gneq</td><td style="text-align:center">$\lnsim$</td><td style="text-align:center">\lnsim</td></tr><tr><td style="text-align:center">$\lneqq$</td><td style="text-align:center">\lneqq</td><td style="text-align:center">$\gneqq$</td><td style="text-align:center">\gneqq</td><td style="text-align:center"></td></tr></tbody></table></div><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\alpha$</td><td style="text-align:center">\alpha</td><td style="text-align:center">$\beta$</td><td style="text-align:center">\beta</td><td style="text-align:center">$\gamma$</td><td style="text-align:center">\gamma</td><td style="text-align:center">$\delta$</td><td style="text-align:center">\delta</td></tr><tr><td style="text-align:center">$\epsilon$</td><td style="text-align:center">\epsilon</td><td style="text-align:center">$\varepsilon$</td><td style="text-align:center">\varepsilon</td><td style="text-align:center">$\zeta$</td><td style="text-align:center">\zeta</td><td style="text-align:center">$\eta$</td><td style="text-align:center">\eta</td></tr><tr><td style="text-align:center">$\theta$</td><td style="text-align:center">\theta</td><td style="text-align:center">$\vartheta$</td><td style="text-align:center">\vartheta</td><td style="text-align:center">$\iota$</td><td style="text-align:center">\iota</td><td style="text-align:center">$\kappa$</td><td style="text-align:center">\kappa</td></tr><tr><td style="text-align:center">$\lambda$</td><td style="text-align:center">\lambda</td><td style="text-align:center">$\mu$</td><td style="text-align:center">\mu</td><td style="text-align:center">$\nu$</td><td style="text-align:center">\nu</td><td style="text-align:center">$\xi$</td><td style="text-align:center">\xi</td></tr><tr><td style="text-align:center">$\pi$</td><td style="text-align:center">\pi</td><td style="text-align:center">$\varpi$</td><td style="text-align:center">\varpi</td><td style="text-align:center">$\rho$</td><td style="text-align:center">\rho</td><td style="text-align:center">$\varrho$</td><td style="text-align:center">\varrho</td></tr><tr><td style="text-align:center">$\sigma$</td><td style="text-align:center">\sigma</td><td style="text-align:center">$\varsigma$</td><td style="text-align:center">\varsigma</td><td style="text-align:center">$\tau$</td><td style="text-align:center">\tau</td><td style="text-align:center">$\upsilon$</td><td style="text-align:center">\upsilon</td></tr><tr><td style="text-align:center">$\phi$</td><td style="text-align:center">\phi</td><td style="text-align:center">$\varphi$</td><td style="text-align:center">\varphi</td><td style="text-align:center">$\chi$</td><td style="text-align:center">\chi</td><td style="text-align:center">$\psi$</td><td style="text-align:center">\psi</td></tr><tr><td style="text-align:center">$\omega$</td><td style="text-align:center">\omega</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><p>一些大写的希腊字母</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\Gamma$</td><td style="text-align:center">\Gamma</td><td style="text-align:center">$\Delta$</td><td style="text-align:center">\Delta</td><td style="text-align:center">$\Theta$</td><td style="text-align:center">\Theta</td><td style="text-align:center">$\Lambda$</td><td style="text-align:center">\Lambda</td></tr><tr><td style="text-align:center">$\Xi$</td><td style="text-align:center">\Xi</td><td style="text-align:center">$\Pi$</td><td style="text-align:center">\Pi</td><td style="text-align:center">$\Sigma$</td><td style="text-align:center">\Sigma</td><td style="text-align:center">$\Upsilon$</td><td style="text-align:center">\Upsilon</td></tr><tr><td style="text-align:center">$\Phi$</td><td style="text-align:center">\Phi</td><td style="text-align:center">$\Psi$</td><td style="text-align:center">\Psi</td><td style="text-align:center">$\Omega$</td><td style="text-align:center">\Omega</td><td style="text-align:center"></td></tr></tbody></table></div><h3 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\gets$</td><td style="text-align:center">\gets</td><td style="text-align:center">$\to$</td><td style="text-align:center">\to</td></tr><tr><td style="text-align:center">$\leftarrow$</td><td style="text-align:center">\leftarrow</td><td style="text-align:center">$\Leftarrow$</td><td style="text-align:center">\Leftarrow</td></tr><tr><td style="text-align:center">$\rightarrow$</td><td style="text-align:center">\rightarrow</td><td style="text-align:center">$\Rightarrow$</td><td style="text-align:center">\Rightarrow</td></tr><tr><td style="text-align:center">$\leftrightarrow$</td><td style="text-align:center">\leftrightarrow</td><td style="text-align:center">$\Leftrightarrow$</td><td style="text-align:center">\Leftrightarrow</td></tr><tr><td style="text-align:center">$\mapsto$</td><td style="text-align:center">\mapsto</td><td style="text-align:center">$\hookleftarrow$</td><td style="text-align:center">\hookleftarrow</td></tr><tr><td style="text-align:center">$\leftharpoonup$</td><td style="text-align:center">\leftharpoonup</td><td style="text-align:center">$\leftharpoondown$</td><td style="text-align:center">\leftharpoondown</td></tr><tr><td style="text-align:center">$\rightleftharpoons$</td><td style="text-align:center">\rightleftharpoons</td><td style="text-align:center">$\longleftarrow$</td><td style="text-align:center">\longleftarrow</td></tr><tr><td style="text-align:center">$\Longleftarrow$</td><td style="text-align:center">\Longleftarrow</td><td style="text-align:center">$\longrightarrow$</td><td style="text-align:center">\longrightarrow</td></tr><tr><td style="text-align:center">$\Longrightarrow$</td><td style="text-align:center">\Longrightarrow</td><td style="text-align:center">$\longleftrightarrow$</td><td style="text-align:center">\longleftrightarrow</td></tr><tr><td style="text-align:center">$\Longleftrightarrow$</td><td style="text-align:center">\Longleftrightarrow</td><td style="text-align:center">$\longmapsto$</td><td style="text-align:center">\longmapsto</td></tr><tr><td style="text-align:center">$\hookrightarrow$</td><td style="text-align:center">\hookrightarrow</td><td style="text-align:center">$\rightharpoonup$</td><td style="text-align:center">\rightharpoonup</td></tr><tr><td style="text-align:center">$\rightharpoondown$</td><td style="text-align:center">\rightharpoondown</td><td style="text-align:center">$\leadsto$</td><td style="text-align:center">\leadsto</td></tr><tr><td style="text-align:center">$\uparrow$</td><td style="text-align:center">\uparrow</td><td style="text-align:center">$\Uparrow$</td><td style="text-align:center">\Uparrow</td></tr><tr><td style="text-align:center">$\downarrow$</td><td style="text-align:center">\downarrow</td><td style="text-align:center">$\Downarrow$</td><td style="text-align:center">\Downarrow</td></tr><tr><td style="text-align:center">$\updownarrow$</td><td style="text-align:center">\updownarrow</td><td style="text-align:center">$\Updownarrow$</td><td style="text-align:center">\Updownarrow</td></tr><tr><td style="text-align:center">$\nearrow$</td><td style="text-align:center">\nearrow</td><td style="text-align:center">$\searrow$</td><td style="text-align:center">\searrow</td></tr><tr><td style="text-align:center">$\swarrow$</td><td style="text-align:center">\swarrow</td><td style="text-align:center">$\nwarrow$</td><td style="text-align:center">\nwarrow</td></tr><tr><td style="text-align:center">$\overrightarrow{AB}$</td><td style="text-align:center">\overrightarrow{AB}</td><td style="text-align:center">$\overleftarrow{AB}$</td><td style="text-align:center">\overleftarrow{AB}</td></tr><tr><td style="text-align:center">$\overleftrightarrow{AB}$</td><td style="text-align:center">\overleftrightarrow{AB}</td><td style="text-align:center"></td></tr></tbody></table></div><h3 id="一些奇奇怪怪的点"><a href="#一些奇奇怪怪的点" class="headerlink" title="一些奇奇怪怪的点"></a>一些奇奇怪怪的点</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\cdot$</td><td style="text-align:center">\cdot</td><td style="text-align:center">$\vdots$</td><td style="text-align:center">\vdots</td></tr><tr><td style="text-align:center">$\dots$</td><td style="text-align:center">\dots</td><td style="text-align:center">$\ddots$</td><td style="text-align:center">\ddots</td></tr><tr><td style="text-align:center">$\cdots$</td><td style="text-align:center">\cdots</td><td style="text-align:center"></td></tr></tbody></table></div><h3 id="字母上的强调符号"><a href="#字母上的强调符号" class="headerlink" title="字母上的强调符号"></a>字母上的强调符号</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\hat{x}$</td><td style="text-align:center">\hat{x}</td><td style="text-align:center">$\check{x}$</td><td style="text-align:center">\check{x}</td><td style="text-align:center">$\dot{x}$</td><td style="text-align:center">\dot{x}</td></tr><tr><td style="text-align:center">$\breve{x}$</td><td style="text-align:center">\breve{x}</td><td style="text-align:center">$\acute{x}$</td><td style="text-align:center">\acute{x}</td><td style="text-align:center">$\ddot{x}$</td><td style="text-align:center">\ddot{x}</td></tr><tr><td style="text-align:center">$\grave{x}$</td><td style="text-align:center">\grave{x}</td><td style="text-align:center">$\tilde{x}$</td><td style="text-align:center">\tilde{x}</td><td style="text-align:center">$\mathring{x}$</td><td style="text-align:center">\mathring{x}</td></tr><tr><td style="text-align:center">$\bar{x}$</td><td style="text-align:center">\bar{x}</td><td style="text-align:center">$\vec{x}$</td><td style="text-align:center">\vec{x}</td><td style="text-align:center"></td></tr></tbody></table></div><p>当对 $i$和$j$应用强调符号时，可以使用\imath和\jmath来防止点与重音发生干扰：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\vec{\jmath}$</td><td style="text-align:center">\vec{\jmath}</td><td style="text-align:center">$\tilde{\imath}$</td><td style="text-align:center">\tilde{\imath}</td></tr></tbody></table></div><p>\tilde 和 \hat 有一个更宽的版本，$\hat{7+x}$和$\widehat{7+x}$两种箭头是有区别的：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\widehat{7+x}$</td><td style="text-align:center">\widehat{7+x}</td><td style="text-align:center">$\widetilde{abc}$</td><td style="text-align:center">\widetilde{abc}</td></tr></tbody></table></div><h3 id="其他一些奇怪的符号"><a href="#其他一些奇怪的符号" class="headerlink" title="其他一些奇怪的符号"></a>其他一些奇怪的符号</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\infty$</td><td style="text-align:center">\infty</td><td style="text-align:center">$\triangle$</td><td style="text-align:center">\triangle</td><td style="text-align:center">$\angle$</td><td style="text-align:center">\angle</td></tr><tr><td style="text-align:center">$\aleph$</td><td style="text-align:center">\aleph</td><td style="text-align:center">$\hbar$</td><td style="text-align:center">\hbar</td><td style="text-align:center">$\imath$</td><td style="text-align:center">\imath</td></tr><tr><td style="text-align:center">$\jmath$</td><td style="text-align:center">\jmath</td><td style="text-align:center">$\ell$</td><td style="text-align:center">\ell</td><td style="text-align:center">$\wp$</td><td style="text-align:center">\wp</td></tr><tr><td style="text-align:center">$\Re$</td><td style="text-align:center">\Re</td><td style="text-align:center">$\Im$</td><td style="text-align:center">\Im</td><td style="text-align:center">$\mho$</td><td style="text-align:center">\mho</td></tr><tr><td style="text-align:center">$\prime$</td><td style="text-align:center">\prime</td><td style="text-align:center">$\emptyset$</td><td style="text-align:center">\emptyset</td><td style="text-align:center">$\nabla$</td><td style="text-align:center">\nabla</td></tr><tr><td style="text-align:center">$\surd$</td><td style="text-align:center">\surd</td><td style="text-align:center">$\partial$</td><td style="text-align:center">\partial</td><td style="text-align:center">$\top$</td><td style="text-align:center">\top</td></tr><tr><td style="text-align:center">$\bot$</td><td style="text-align:center">\bot</td><td style="text-align:center">$\vdash$</td><td style="text-align:center">\vdash</td><td style="text-align:center">$\dashv$</td><td style="text-align:center">\dashv</td></tr><tr><td style="text-align:center">$\forall$</td><td style="text-align:center">\forall</td><td style="text-align:center">$\exists$</td><td style="text-align:center">\exists</td><td style="text-align:center">$\neg$</td><td style="text-align:center">\neg</td></tr><tr><td style="text-align:center">$\flat$</td><td style="text-align:center">\flat</td><td style="text-align:center">$\natural$</td><td style="text-align:center">\natural</td><td style="text-align:center">$\sharp$</td><td style="text-align:center">\sharp</td></tr><tr><td style="text-align:center">$\backslash$</td><td style="text-align:center">\backslash</td><td style="text-align:center">$\Box$</td><td style="text-align:center">\Box</td><td style="text-align:center">$\Diamond$</td><td style="text-align:center">\Diamond</td></tr><tr><td style="text-align:center">$\clubsuit$</td><td style="text-align:center">\clubsuit</td><td style="text-align:center">$\diamondsuit$</td><td style="text-align:center">\diamondsuit</td><td style="text-align:center">$\heartsuit$</td><td style="text-align:center">\heartsuit</td></tr><tr><td style="text-align:center">$\spadesuit$</td><td style="text-align:center">\spadesuit</td><td style="text-align:center">$\Join$</td><td style="text-align:center">\Join</td><td style="text-align:center">$\blacksquare$</td><td style="text-align:center">\blacksquare</td></tr><tr><td style="text-align:center">$\diamondsuit$</td><td style="text-align:center">\diamondsuit</td><td style="text-align:center">$\mathbb{R}$</td><td style="text-align:center">\mathbb{R} (represents all real numbers)</td><td style="text-align:center">$\checkmark$</td><td style="text-align:center">\checkmark</td></tr><tr><td style="text-align:center">$\heartsuit$</td><td style="text-align:center">\heartsuit</td><td style="text-align:center">$\in$</td><td style="text-align:center">\in</td><td style="text-align:center">$\cup$</td><td style="text-align:center">\cup</td></tr><tr><td style="text-align:center">$\S$</td><td style="text-align:center">\S</td><td style="text-align:center">$\P$</td><td style="text-align:center">\P</td><td style="text-align:center">$\Vdash$</td><td style="text-align:center">\Vdash</td></tr><tr><td style="text-align:center">$\vDash$</td><td style="text-align:center">\vDash</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h3><p>In mathematics, sometimes we need to enclose expressions in brackets, braces or parentheses. Some of these work just as you’d imagine in LaTeX; type ( and ) for parentheses, [ and ] for brackets, and | and | for absolute value. However, other symbols have special commands:</p><div class="table-container"><table><thead><tr><th style="text-align:left">Symbol</th><th style="text-align:left">Command</th><th style="text-align:left">Symbol</th><th style="text-align:left">Command</th><th style="text-align:left">Symbol</th><th style="text-align:left">Command</th></tr></thead><tbody><tr><td style="text-align:left"><script type="math/tex">\{</script></td><td style="text-align:left">\{</td><td style="text-align:left"><script type="math/tex">\}</script></td><td style="text-align:left">\}</td><td style="text-align:left">$\</td><td style="text-align:left">$</td><td>\</td><td></td></tr><tr><td style="text-align:left">$\backslash$</td><td style="text-align:left">\backslash</td><td style="text-align:left">$\lfloor$</td><td style="text-align:left">\lfloor</td><td style="text-align:left">$\rfloor$</td><td style="text-align:left">\rfloor</td></tr><tr><td style="text-align:left">$\lceil$</td><td style="text-align:left">\lceil</td><td style="text-align:left">$\rceil$</td><td style="text-align:left">\rceil</td><td style="text-align:left">$\langle$</td><td style="text-align:left">\langle</td></tr><tr><td style="text-align:left">$\rangle$</td><td style="text-align:left">\rangle</td><td style="text-align:left"></td><td style="text-align:left"></td><td style="text-align:left"></td></tr></tbody></table></div><h2 id="编写数学公式"><a href="#编写数学公式" class="headerlink" title="编写数学公式"></a>编写数学公式</h2><h3 id="下标和上标"><a href="#下标和上标" class="headerlink" title="下标和上标"></a>下标和上标</h3><p>下标和上标（例如指数）可以分别使用下划线_和箭头^符号。</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$2^{2}$</td><td style="text-align:center">2^2</td><td style="text-align:center">$\textstyle a_i$</td><td style="text-align:center">a_i</td></tr><tr><td style="text-align:center">$\textstyle 2^{23}$</td><td style="text-align:center">2^{23}</td><td style="text-align:center">$\textstyle n_{i-1}$</td><td style="text-align:center">n_{i-1}</td></tr><tr><td style="text-align:center">$a^{i+1}_3$</td><td style="text-align:center">a^{i+1}_3</td><td style="text-align:center">$x^{3^2}$</td><td style="text-align:center">x\^{3^2}</td></tr><tr><td style="text-align:center">$2^{a_i}$</td><td style="text-align:center">2^{a_i}</td><td style="text-align:center">$2^a_i$</td><td style="text-align:center">2^a_i</td></tr></tbody></table></div><h3 id="分式"><a href="#分式" class="headerlink" title="分式"></a>分式</h3><p>使用\frac{分子}{分母}来进行渲染</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\frac {1}{2}$</td><td style="text-align:center">\frac{1}{2} or \frac12</td></tr><tr><td style="text-align:center">$\frac{2}{x+2}$</td><td style="text-align:center">\frac{2}{x+2}</td></tr><tr><td style="text-align:center">$\frac{1+\frac{1}{x}}{3x + 2}$</td><td style="text-align:center">\frac{1+\frac{1}{x}}{3x + 2}</td></tr></tbody></table></div><p>如果分号比较多，建议用\cfrac代替\frac，看起来更大也舒服很多</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\cfrac{2}{1+\cfrac{2}{1+\cfrac{2}{1+\cfrac{2}{1}}}}$</td><td style="text-align:center">\cfrac{2}{1+\cfrac{2}{1+\cfrac{2}{1+\cfrac{2}{1}}}}</td></tr><tr><td style="text-align:center">$\frac{2}{1+\frac{2}{1+\frac{2}{1+\frac{2}{1}}}}$</td><td style="text-align:center">\frac{2}{1+\frac{2}{1+\frac{2}{1+\frac{2}{1}}}}</td></tr></tbody></table></div><h3 id="累加，累乘，求极限，求对数一类的符号"><a href="#累加，累乘，求极限，求对数一类的符号" class="headerlink" title="累加，累乘，求极限，求对数一类的符号"></a>累加，累乘，求极限，求对数一类的符号</h3><p>分别使用命令\sum、\prod、\lim和\log。要表示下限和上限，或对数的底，使用_和^的方式与下标和上标相同。</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\textstyle \sum_{i=1}^{\infty}\frac{1}{i}$</td><td style="text-align:center">\sum_{i=1}^{\infty}\frac{1}{i}</td></tr><tr><td style="text-align:center">$\textstyle \prod_{n=1}^5\frac{n}{n-1}$</td><td style="text-align:center">\prod_{n=1}^5\frac{n}{n-1}</td></tr><tr><td style="text-align:center">$\textstyle \lim_{x\to\infty}\frac{1}{x}$</td><td style="text-align:center">\lim_{x\to\infty}\frac{1}{x}</td></tr><tr><td style="text-align:center">$\textstyle \lim\limits_{x\to\infty}\frac{1}{x}$</td><td style="text-align:center">\lim\limits_{x\to\infty}\frac{1}{x}</td></tr><tr><td style="text-align:center">$\textstyle \log_n n^2$</td><td style="text-align:center">\log_n n^2</td></tr></tbody></table></div><p>其中一些符号在latex的显示模式下更漂亮：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center"><img src="https://latex.artofproblemsolving.com/3/6/6/3668f57e794d7f20c001ff9776563d1b5e03dfaa.png" alt="$\sum_{i=1}^{\infty}\frac{1}{i}$"></td><td style="text-align:center">\sum_{i=1}^{\infty}\frac{1}{i}</td></tr><tr><td style="text-align:center"><img src="https://latex.artofproblemsolving.com/3/8/6/38620f28e72b9e630220f8b9c5d90a077e9f140c.png" alt="$\prod_{n=1}^5\frac{n}{n-1}$"></td><td style="text-align:center">\prod_{n=1}^5\frac{n}{n-1}</td></tr><tr><td style="text-align:center"><img src="https://latex.artofproblemsolving.com/2/d/b/2db126637f5c59d21b8686443b38eb82bfee3935.png" alt="$\lim_{x\to\infty}\frac{1}{x}$"></td><td style="text-align:center">\lim_{x\to\infty}\frac{1}{x}</td></tr></tbody></table></div><h3 id="模运算符号"><a href="#模运算符号" class="headerlink" title="模运算符号"></a>模运算符号</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$9\equiv 3 \bmod{6}$</td><td style="text-align:center">9\equiv 3 \bmod{6}</td></tr><tr><td style="text-align:center">$9\equiv 3 \pmod{6}$</td><td style="text-align:center">9\equiv 3 \pmod{6}</td></tr><tr><td style="text-align:center">$9\equiv 3 \mod{6}$</td><td style="text-align:center">9\equiv 3 \mod{6}</td></tr><tr><td style="text-align:center">$9\equiv 3\pod{6}$</td><td style="text-align:center">9\equiv 3 \pod{6}</td></tr></tbody></table></div><h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\textstyle \cos$</td><td style="text-align:center">\cos</td><td style="text-align:center">$\textstyle \sin$</td><td style="text-align:center">\sin</td><td style="text-align:center">$\textstyle \tan$</td><td style="text-align:center">\tan</td></tr><tr><td style="text-align:center">$\sec$</td><td style="text-align:center">\sec</td><td style="text-align:center">$\textstyle \textstyle \csc$</td><td style="text-align:center">\csc</td><td style="text-align:center">$\textstyle \cot$</td><td style="text-align:center">\cot</td></tr><tr><td style="text-align:center">$\textstyle \arccos$</td><td style="text-align:center">\arccos</td><td style="text-align:center">$\textstyle \arcsin$</td><td style="text-align:center">\arcsin</td><td style="text-align:center">$\textstyle \arctan$</td><td style="text-align:center">\arctan</td></tr><tr><td style="text-align:center">$\textstyle \cosh$</td><td style="text-align:center">\cosh</td><td style="text-align:center">$\textstyle \sinh$</td><td style="text-align:center">\sinh</td><td style="text-align:center">$\textstyle \tanh$</td><td style="text-align:center">\tanh</td></tr><tr><td style="text-align:center">$\textstyle \coth$</td><td style="text-align:center">\coth</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><p>我们可以使用\begin｛array｝…\end｛array｝命令构建数组或矩阵，并使用\left和\right来适当调整矩阵周围的分隔符大小</p><h3 id="其他符号"><a href="#其他符号" class="headerlink" title="其他符号"></a>其他符号</h3><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\arg$</td><td style="text-align:center">\arg</td><td style="text-align:center">$\textstyle\deg$</td><td style="text-align:center">\deg</td><td style="text-align:center">$\textstyle\det$</td><td style="text-align:center">\det</td></tr><tr><td style="text-align:center">$\dim$</td><td style="text-align:center">\dim</td><td style="text-align:center">$\textstyle\exp$</td><td style="text-align:center">\exp</td><td style="text-align:center">$\textstyle\gcd$</td><td style="text-align:center">\gcd</td></tr><tr><td style="text-align:center">$\hom$</td><td style="text-align:center">\hom</td><td style="text-align:center">$\inf$</td><td style="text-align:center">\inf</td><td style="text-align:center">$\ker$</td><td style="text-align:center">\ker</td></tr><tr><td style="text-align:center">$\textstyle\lg$</td><td style="text-align:center">\lg</td><td style="text-align:center">$\liminf$</td><td style="text-align:center">\liminf</td><td style="text-align:center">$\limsup$</td><td style="text-align:center">\limsup</td></tr><tr><td style="text-align:center">$\textstyle\max$</td><td style="text-align:center">\max</td><td style="text-align:center">$\textstyle\min$</td><td style="text-align:center">\min</td><td style="text-align:center">$\Pr$</td><td style="text-align:center">\Pr</td></tr><tr><td style="text-align:center">$\sup$</td><td style="text-align:center">\sup</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><p>其中一些命令的下标方式与求和、乘积和对数相同。有些渲染在显示模式和常规数学模式下不同。</p><div class="table-container"><table><thead><tr><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th><th style="text-align:center">Symbol</th><th style="text-align:center">Command</th></tr></thead><tbody><tr><td style="text-align:center">$\dim_x$</td><td style="text-align:center">\dim_x</td><td style="text-align:center">$\textstyle\gcd_x$</td><td style="text-align:center">\gcd_x</td><td style="text-align:center">$\inf_x$</td><td style="text-align:center">\inf_x</td></tr><tr><td style="text-align:center">$\liminf_x$</td><td style="text-align:center">\liminf_x</td><td style="text-align:center">$\limsup_x$</td><td style="text-align:center">\limsup_x</td><td style="text-align:center">$\textstyle\max_x$</td><td style="text-align:center">\max_x</td></tr><tr><td style="text-align:center">$\textstyle\min_x$</td><td style="text-align:center">\min_x</td><td style="text-align:center">$\Pr_x$</td><td style="text-align:center">\Pr_x</td><td style="text-align:center">$\sup_x$</td><td style="text-align:center">\sup_x</td></tr></tbody></table></div><h2 id="矩阵-1"><a href="#矩阵-1" class="headerlink" title="矩阵"></a>矩阵</h2><p>把矩阵单独放在一个板块是因为矩阵有很多花招，很多很多不同的表示</p><h3 id="1-数字周围无符号"><a href="#1-数字周围无符号" class="headerlink" title="1. 数字周围无符号"></a>1. 数字周围无符号</h3><h4 id="数字周围无符号"><a href="#数字周围无符号" class="headerlink" title="数字周围无符号"></a>数字周围无符号</h4><script type="math/tex; mode=display">\begin{matrix}    1&0\\    0&1\end{matrix}</script><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;matrix&#125;<br>    1<span class="hljs-built_in">&amp;</span>0<span class="hljs-keyword">\\</span><br>    0<span class="hljs-built_in">&amp;</span>1<br><span class="hljs-keyword">\end</span>&#123;matrix&#125;<br></code></pre></td></tr></table></figure><h4 id="小括号-p"><a href="#小括号-p" class="headerlink" title="小括号+p"></a>小括号+p</h4><script type="math/tex; mode=display">\begin{pmatrix}    1&0\\    0&1\end{pmatrix}</script><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;pmatrix&#125;<br>    1<span class="hljs-built_in">&amp;</span>0<span class="hljs-keyword">\\</span><br>    0<span class="hljs-built_in">&amp;</span>1<br><span class="hljs-keyword">\end</span>&#123;pmatrix&#125;<br></code></pre></td></tr></table></figure><h4 id="中括号-b"><a href="#中括号-b" class="headerlink" title="中括号+b"></a>中括号+b</h4><script type="math/tex; mode=display">\begin{bmatrix}    1&0\\    0&1\end{bmatrix}</script><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;bmatrix&#125;<br>    1<span class="hljs-built_in">&amp;</span>0<span class="hljs-keyword">\\</span><br>    0<span class="hljs-built_in">&amp;</span>1<br><span class="hljs-keyword">\end</span>&#123;bmatrix&#125;<br></code></pre></td></tr></table></figure><h4 id="大括号-B"><a href="#大括号-B" class="headerlink" title="大括号+B"></a>大括号+B</h4><script type="math/tex; mode=display">\begin{Bmatrix}    1&0\\    0&1\end{Bmatrix}</script><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;Bmatrix&#125;<br>    1<span class="hljs-built_in">&amp;</span>0<span class="hljs-keyword">\\</span><br>    0<span class="hljs-built_in">&amp;</span>1<br><span class="hljs-keyword">\end</span>&#123;Bmatrix&#125;<br></code></pre></td></tr></table></figure><h4 id="单竖线-v"><a href="#单竖线-v" class="headerlink" title="单竖线+v"></a>单竖线+v</h4><script type="math/tex; mode=display">\begin{vmatrix}    1&0\\    0&1\end{vmatrix}</script><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">\<span class="hljs-keyword">begin</span>&#123;vmatrix&#125;<br>    <span class="hljs-number">1</span>&amp;<span class="hljs-number">0</span>\\<br>    <span class="hljs-number">0</span>&amp;<span class="hljs-number">1</span><br>\<span class="hljs-keyword">end</span>&#123;vmatrix&#125;<br></code></pre></td></tr></table></figure><h4 id="双竖线-V"><a href="#双竖线-V" class="headerlink" title="双竖线+V"></a>双竖线+V</h4><script type="math/tex; mode=display">\begin{Vmatrix}    1&0\\    0&1\end{Vmatrix}</script><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;Vmatrix&#125;<br>    1<span class="hljs-built_in">&amp;</span>0<span class="hljs-keyword">\\</span><br>    0<span class="hljs-built_in">&amp;</span>1<br><span class="hljs-keyword">\end</span>&#123;Vmatrix&#125;<br></code></pre></td></tr></table></figure><h3 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h3><p>使用<br><code>\dots</code>水平<br><code>\vdots</code> 竖直<br><code>\ddots</code>倾斜<br><code>\hdotsfor&#123;&#125;</code>跨列省略号。大括号中填共几列<br>如：</p><script type="math/tex; mode=display">\begin{bmatrix}a_{11} & \dots & a_{1n}\\&\ddots & \vdots \\a_{n1}& & a_{nn}\end{bmatrix}</script><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;bmatrix&#125;<br>a<span class="hljs-built_in">_</span>&#123;11&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\dots</span> <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>&#123;1n&#125;<span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span><span class="hljs-keyword">\ddots</span> <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\vdots</span> <span class="hljs-keyword">\\</span><br>a<span class="hljs-built_in">_</span>&#123;n1&#125;<span class="hljs-built_in">&amp;</span> <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>&#123;nn&#125;<br><span class="hljs-keyword">\end</span>&#123;bmatrix&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><h3 id="分块矩阵"><a href="#分块矩阵" class="headerlink" title="分块矩阵"></a>分块矩阵</h3><script type="math/tex; mode=display">\begin{bmatrix}\begin{matrix}1&0\\0&1\end{matrix}& \text{\Large 0}\\\text{\Large 0}&\begin{matrix}1&0\\0&1\end{matrix}\end{bmatrix}</script><blockquote><p><code>\Large 0</code>是比普通的零要大一些的</p></blockquote><p>上面矩阵的代码为：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;bmatrix&#125;<br><span class="hljs-keyword">\begin</span>&#123;matrix&#125;1<span class="hljs-built_in">&amp;</span>0<span class="hljs-keyword">\\</span>0<span class="hljs-built_in">&amp;</span>1<span class="hljs-keyword">\end</span>&#123;matrix&#125;<span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\text</span>&#123;<span class="hljs-keyword">\Large</span> 0&#125;<span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\text</span>&#123;<span class="hljs-keyword">\Large</span> 0&#125;<span class="hljs-built_in">&amp;</span><span class="hljs-keyword">\begin</span>&#123;matrix&#125;1<span class="hljs-built_in">&amp;</span>0<span class="hljs-keyword">\\</span>0<span class="hljs-built_in">&amp;</span>1<span class="hljs-keyword">\end</span>&#123;matrix&#125;<br><span class="hljs-keyword">\end</span>&#123;bmatrix&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><blockquote><p><code>\text</code>是在数学编辑模式下临时使用文本编辑，在公式中输入汉字都要使用此标签。分块矩阵就是矩阵的嵌套，仔细阅读代码就能理解 。</p></blockquote><h3 id="三角矩阵"><a href="#三角矩阵" class="headerlink" title="三角矩阵"></a>三角矩阵</h3><script type="math/tex; mode=display">\begin{bmatrix}a_{11}&a_{12} & \dots & a_{1n}\\&a_{22}&\dots&a_{2n}\\&&\ddots&\vdots\\&{\huge 0}&&a_{nn}\end{bmatrix}</script><p>具体代码如下</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;bmatrix&#125;<br>a<span class="hljs-built_in">_</span>&#123;11&#125;<span class="hljs-built_in">&amp;</span>a<span class="hljs-built_in">_</span>&#123;12&#125; <span class="hljs-built_in">&amp;</span> <span class="hljs-keyword">\dots</span> <span class="hljs-built_in">&amp;</span> a<span class="hljs-built_in">_</span>&#123;1n&#125;<span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span>a<span class="hljs-built_in">_</span>&#123;22&#125;<span class="hljs-built_in">&amp;</span><span class="hljs-keyword">\dots</span><span class="hljs-built_in">&amp;</span>a<span class="hljs-built_in">_</span>&#123;2n&#125;<span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span><span class="hljs-built_in">&amp;</span><span class="hljs-keyword">\ddots</span><span class="hljs-built_in">&amp;</span><span class="hljs-keyword">\vdots</span><span class="hljs-keyword">\\</span><br><span class="hljs-built_in">&amp;</span>&#123;<span class="hljs-keyword">\huge</span> 0&#125;<span class="hljs-built_in">&amp;</span><span class="hljs-built_in">&amp;</span>a<span class="hljs-built_in">_</span>&#123;nn&#125;<br><span class="hljs-keyword">\end</span>&#123;bmatrix&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure><h3 id="方程组"><a href="#方程组" class="headerlink" title="方程组"></a>方程组</h3><p>方程组四舍五入也算半个矩阵吧</p><script type="math/tex; mode=display">\begin{equation}    \begin{cases}        l_{11}y_{1} = 1 \\        l_{21}y_{1} + l_{22}y_{2} = 0 \\         l_{31}y_{1} + l_{32}y_{2} + l_{33}y_{3} = 0 \\        l_{41}y_{1} + l_ {42}y_{2} + l_{43}y_{3} + l_{44}y_{4} = 0     \end{cases}\end{equation}</script><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;equation&#125;<br>    <span class="hljs-keyword">\begin</span>&#123;cases&#125;<br>        l<span class="hljs-built_in">_</span>&#123;11&#125;y<span class="hljs-built_in">_</span>&#123;1&#125; = 1 <span class="hljs-keyword">\\</span><br>        l<span class="hljs-built_in">_</span>&#123;21&#125;y<span class="hljs-built_in">_</span>&#123;1&#125; + l<span class="hljs-built_in">_</span>&#123;22&#125;y<span class="hljs-built_in">_</span>&#123;2&#125; = 0 <span class="hljs-keyword">\\</span> <br>        l<span class="hljs-built_in">_</span>&#123;31&#125;y<span class="hljs-built_in">_</span>&#123;1&#125; + l<span class="hljs-built_in">_</span>&#123;32&#125;y<span class="hljs-built_in">_</span>&#123;2&#125; + l<span class="hljs-built_in">_</span>&#123;33&#125;y<span class="hljs-built_in">_</span>&#123;3&#125; = 0 <span class="hljs-keyword">\\</span><br>        l<span class="hljs-built_in">_</span>&#123;41&#125;y<span class="hljs-built_in">_</span>&#123;1&#125; + l<span class="hljs-built_in">_</span> &#123;42&#125;y<span class="hljs-built_in">_</span>&#123;2&#125; + l<span class="hljs-built_in">_</span>&#123;43&#125;y<span class="hljs-built_in">_</span>&#123;3&#125; + l<span class="hljs-built_in">_</span>&#123;44&#125;y<span class="hljs-built_in">_</span>&#123;4&#125; = 0<br>     <span class="hljs-keyword">\end</span>&#123;cases&#125;<br><span class="hljs-keyword">\end</span>&#123;equation&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装openssl库</title>
      <link href="/2022/10/21/ubuntu%E5%AE%89%E8%A3%85openssl%E5%BA%93/"/>
      <url>/2022/10/21/ubuntu%E5%AE%89%E8%A3%85openssl%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ubuntu18-04安装openssl库"><a href="#ubuntu18-04安装openssl库" class="headerlink" title="ubuntu18.04安装openssl库"></a>ubuntu18.04安装openssl库</h1><p>opensssl库是常用的加密函数库，主要有以下加密算法</p><blockquote><p>加密算法</p><ul><li>对称加密：指加密和解密使用相同密钥的加密算法。对称加密算法的优点在于加解密的高速度和使用长密钥时的难破解性。<br>常见的对称加密算法：DES、3DES、DESX、AES、RC4、RC5、RC6等 </li><li>非对称加密：指加密和解密使用不同密钥的加密算法，也称为公私钥加密。<br>常见的非对称加密算法：RSA、DSA（数字签名用）等</li><li>Hash算法：Hash算法它是一种单向算法，用户可以通过Hash算法对目标信息生成一段特定长度的唯一的Hash值，却不能通过这个Hash值逆向获得目标信息。<br>常见的Hash算法：MD2、MD4、MD5、SHA、SHA-1等</li></ul></blockquote><p>下面介绍openssl库的安装</p><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><h3 id="打开命令行终端"><a href="#打开命令行终端" class="headerlink" title="打开命令行终端"></a>打开命令行终端</h3><p>新手的话按ctrl+alt+t即可</p><h3 id="更新-下载编译器-make-和-gcc"><a href="#更新-下载编译器-make-和-gcc" class="headerlink" title="更新/下载编译器 make 和 gcc"></a>更新/下载编译器 make 和 gcc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install make gcc<br>sudo apt update<br>sudo apt upgrade<br></code></pre></td></tr></table></figure><h3 id="下载OpenSSL安装包"><a href="#下载OpenSSL安装包" class="headerlink" title="下载OpenSSL安装包"></a>下载OpenSSL安装包</h3><p>以版本openssl-1.1.1q版本为例，想要其他版本请到官网下载指定版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo wget https://www.openssl.org/source/openssl-1.1.1b.tar.gz<br></code></pre></td></tr></table></figure><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo tar -zxf openssl-1.1.1b.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> openssl-1.1.1b<br></code></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo ./config shared<br>sudo make<br>sudo make install<br></code></pre></td></tr></table></figure><h3 id="修改默认路径"><a href="#修改默认路径" class="headerlink" title="修改默认路径"></a>修改默认路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">ln</span> -s /usr/local/bin/openssl /usr/bin/openssl<br>sudo ldconfig<br></code></pre></td></tr></table></figure><h3 id="检查版本"><a href="#检查版本" class="headerlink" title="检查版本"></a>检查版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">openssl version<br></code></pre></td></tr></table></figure><p>如果到这一步能输出版本信息</p><img src="/2022/10/21/ubuntu%E5%AE%89%E8%A3%85openssl%E5%BA%93/%E7%BB%93%E6%9E%9C%E8%BE%93%E5%87%BA.png" class="" title="版本信息"><h2 id="结果测试"><a href="#结果测试" class="headerlink" title="结果测试"></a>结果测试</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;sys/time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;openssl/bn.h&gt;</span></span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">timeval</span> timestart, timeend ;<br><span class="hljs-type">float</span> timeuse_encrypt = <span class="hljs-number">0</span> , timeuse_decrypt = <span class="hljs-number">0</span>, timeuse_add = <span class="hljs-number">0</span> , timeuse_mul = <span class="hljs-number">0</span> , timeuse = <span class="hljs-number">0</span> ;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;   BN_CTX *ctx = <span class="hljs-built_in">BN_CTX_new</span>();<br>    <span class="hljs-built_in">BN_CTX_start</span>(ctx);<br>    BIGNUM *r1 = <span class="hljs-built_in">BN_CTX_get</span>(ctx);<br>    BIGNUM *r2 = <span class="hljs-built_in">BN_CTX_get</span>(ctx);<br>    BIGNUM *n = <span class="hljs-built_in">BN_CTX_get</span>(ctx);<br>    BIGNUM *tmp = <span class="hljs-built_in">BN_CTX_get</span>(ctx);<br>    BIGNUM *dv = <span class="hljs-built_in">BN_CTX_get</span>(ctx);<br>    BIGNUM *rem = <span class="hljs-built_in">BN_CTX_get</span>(ctx);<br>    <span class="hljs-built_in">BN_rand</span>(r1, <span class="hljs-number">236896</span> , <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">BN_rand</span>(r2, <span class="hljs-number">236896</span> , <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">BN_rand</span>(n, <span class="hljs-number">236896</span> , <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timestart, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">//160*236896</span><br>    <span class="hljs-built_in">BN_mod_mul</span>(tmp , r1 , r2 , n  , ctx);<span class="hljs-comment">//a mod q = a/q*q</span><br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timeend, <span class="hljs-literal">NULL</span>);<br>    timeuse = <span class="hljs-number">1000000</span> * (timeend.tv_sec - timestart.tv_sec) + timeend.tv_usec - timestart.tv_usec;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nmod mul time:%f ms\n&quot;</span>, timeuse / <span class="hljs-number">1000</span>);<br>    <br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timestart, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">//160*236896</span><br>    <span class="hljs-built_in">BN_mul</span>(tmp , r1 , r2  , ctx);<span class="hljs-comment">//a mod q = a/q*q</span><br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timeend, <span class="hljs-literal">NULL</span>);<br>    timeuse = <span class="hljs-number">1000000</span> * (timeend.tv_sec - timestart.tv_sec) + timeend.tv_usec - timestart.tv_usec;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nmul time:%f ms\n&quot;</span>, timeuse / <span class="hljs-number">1000</span>);<br><br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timestart, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">//160*236896</span><br>    <span class="hljs-built_in">BN_div</span>(dv , rem , tmp ,n , ctx);<span class="hljs-comment">//r1*r2/n</span><br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timeend, <span class="hljs-literal">NULL</span>);<br>    timeuse = <span class="hljs-number">1000000</span> * (timeend.tv_sec - timestart.tv_sec) + timeend.tv_usec - timestart.tv_usec;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\ndiv time:%f ms\n&quot;</span>, timeuse / <span class="hljs-number">1000</span>);<br>    <br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timestart, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">//160*236896</span><br>    <span class="hljs-built_in">BN_mod</span>(tmp , tmp , n  , ctx);<span class="hljs-comment">//r1*r2/n mod q = a/q*q</span><br>    <span class="hljs-built_in">gettimeofday</span>(&amp;timeend, <span class="hljs-literal">NULL</span>);<br>    timeuse = <span class="hljs-number">1000000</span> * (timeend.tv_sec - timestart.tv_sec) + timeend.tv_usec - timestart.tv_usec;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nmod time:%f ms\n&quot;</span>, timeuse / <span class="hljs-number">1000</span>);<br>    <span class="hljs-built_in">BN_CTX_end</span>(ctx);<br>    <span class="hljs-built_in">BN_CTX_free</span>(ctx);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h3><p>输入如下指令可以编译运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc test.c -lcrypto<br>./a.out<br></code></pre></td></tr></table></figure><p>可以看到如下输出结果</p><img src="/2022/10/21/ubuntu%E5%AE%89%E8%A3%85openssl%E5%BA%93/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" class="" title="测试结果">]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux操作系统 </tag>
            
            <tag> 环境配置 </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分组密码小笔记</title>
      <link href="/2022/10/18/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/18/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B0%8F%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="分组密码"><a href="#分组密码" class="headerlink" title="分组密码"></a>分组密码</h1><p>这学期学习现代密码学，密码的各种加密方式有很多细节，还有大体的框架，浅浅做个笔记记录一下，以后可以随时回顾。</p><p>参考博客：</p><ul><li><a href="https://blog.csdn.net/qq_28205153/article/details/55798628#commentBox">AES加密算法的详细介绍与实现</a></li><li><a href="https://www.cnblogs.com/starwolf/p/3365834.html">AES五种加密模式（CBC、ECB、CTR、OCF、CFB)</a></li></ul><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><h3 id="AES简介"><a href="#AES简介" class="headerlink" title="AES简介"></a>AES简介</h3><p>高级加密标准(AES,Advanced Encryption Standard)为最常见的对称<a href="https://so.csdn.net/so/search?q=加密算法&amp;spm=1001.2101.3001.7020">加密算法</a>(微信小程序加密传输就是用这个加密算法的)。对称加密算法也就是加密和解密用相同的密钥，具体的加密流程如下图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MDgyOTA5Njg4?x-oss-process=image/format,png" alt="加密流程图"><br>下面简单介绍下各个部分的作用与意义：</p><ul><li>明文P</li></ul><blockquote><p>没有经过加密的数据。</p></blockquote><ul><li>密钥K</li></ul><blockquote><p>用来加密明文的密码，在对称加密算法中，加密与解密的<a href="https://so.csdn.net/so/search?q=密钥&amp;spm=1001.2101.3001.7020">密钥</a>是相同的。密钥为接收方与发送方协商产生，但不可以直接在网络上传输，否则会导致密钥泄漏，通常是通过非对称加密算法加密密钥，然后再通过网络传输给对方，或者直接面对面商量密钥。密钥是绝对不可以泄漏的，否则会被攻击者还原密文，窃取机密数据。</p></blockquote><ul><li>AES加密函数</li></ul><blockquote><p>设<a href="https://so.csdn.net/so/search?q=AES加密&amp;spm=1001.2101.3001.7020">AES加密</a>函数为E，则 C = E(K, P),其中P为明文，K为密钥，C为密文。也就是说，把明文P和密钥K作为加密函数的参数输入，则加密函数E会输出密文C。</p></blockquote><ul><li>密文C</li></ul><blockquote><p>经加密函数处理后的数据</p></blockquote><ul><li>AES解密函数</li></ul><blockquote><p>设AES解密函数为D，则 P = D(K, C),其中C为密文，K为密钥，P为明文。也就是说，把密文C和密钥K作为解密函数的参数输入，则解密函数会输出明文P。</p></blockquote><p>在这里简单介绍下对称加密算法与非对称加密算法的区别。</p><ul><li>对称加密算法</li></ul><blockquote><p>加密和解密用到的密钥是相同的，这种加密方式加密速度非常快，适合经常发送数据的场合。缺点是密钥的传输比较麻烦。</p></blockquote><ul><li>非对称加密算法</li></ul><blockquote><p>加密和解密用的密钥是不同的，这种加密方式是用数学上的难解问题构造的，通常加密解密的速度比较慢，适合偶尔发送数据的场合。优点是密钥传输方便。常见的非对称加密算法为RSA、ECC和EIGamal。</p></blockquote><p>实际中，一般是通过RSA<a href="https://so.csdn.net/so/search?q=加密&amp;spm=1001.2101.3001.7020">加密</a>AES的密钥，传输到接收方，接收方解密得到AES密钥，然后发送方和接收方用AES密钥来通信。</p><p>本文下面AES原理的介绍参考自《现代密码学教程》，AES的实现在介绍完原理后开始。</p><h3 id="AES的基本结构"><a href="#AES的基本结构" class="headerlink" title="AES的基本结构"></a>AES的基本结构</h3><p>AES为分组密码，分组密码也就是把明文分成一组一组的，每组长度相等，每次加密一组数据，直到加密完整个明文。在AES标准规范中，分组长度只能是128位，也就是说，每个分组为16个字节（每个字节8位）。密钥的长度可以使用128位、192位或256位。密钥的长度不同，推荐加密轮数也不同，如下表所示：</p><div class="table-container"><table><thead><tr><th style="text-align:center">AES</th><th style="text-align:center">密钥长度（单位byte)</th><th style="text-align:center">分组长度(单位byte)</th><th style="text-align:center">加密轮数</th></tr></thead><tbody><tr><td style="text-align:center">AES-128</td><td style="text-align:center">16</td><td style="text-align:center">16</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">AES-192</td><td style="text-align:center">24</td><td style="text-align:center">16</td><td style="text-align:center">12</td></tr><tr><td style="text-align:center">AES-256</td><td style="text-align:center">32</td><td style="text-align:center">16</td><td style="text-align:center">14</td></tr></tbody></table></div><p>轮数在下面介绍，这里实现的是AES-128，也就是密钥的长度为128位，加密轮数为10轮。<br>上面说到，AES的加密公式为C = E(K,P)，在加密函数E中，会执行一个轮函数，并且执行10次这个轮函数，这个轮函数的前9次执行的操作是一样的，只有第10次有所不同。也就是说，一个明文分组会被加密10轮。AES的核心就是实现一轮中的所有操作。</p><p>AES的处理单位是字节，128位的输入明文分组P和输入密钥K都被分成16个字节，分别记为：</p><p>$P = P0\;P1 \dots P15$ </p><p>$K = K0\;K1 \dots K15$</p><p>如，明文分组为P = abcdefghijklmnop,其中的字符a对应P0，p对应P15。一般地，明文分组用字节为单位的正方形矩阵描述，称为状态矩阵。在算法的每一轮中，状态矩阵的内容不断发生变化，最后的结果作为密文输出。该矩阵中字节的排列顺序为从上到下、从左至右依次排列，如下图所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MTMyNTQ4OTA2?x-oss-process=image/format,png" alt="state"></p><p>现在假设明文分组P为”abcdefghijklmnop”，则对应上面生成的状态矩阵图如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MTM0NzIyODEy?x-oss-process=image/format,png" alt="state2"><br>上图中，0x61为字符a的十六进制表示。可以看到，明文经过AES加密后，已经面目全非。</p><ul><li>128位密钥也是用字节为单位的矩阵表示，矩阵的每一列被称为1个32位比特字。</li><li>通过密钥编排函数该密钥矩阵被扩展成一个44个字组成的序列$W[0],W[1], … ,W[43]$,序列中每个元素的大小为32bit</li><li>该序列的前4个元素$W[0],W[1],W[2],W[3]$是原始密钥，用于加密运算中的初始密钥加（下面介绍）</li><li>后面40个字分为10组，每组4个字（128比特）分别用于10轮加密运算中的轮密钥加，如下图所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MTUyNjM4MzI0?x-oss-process=image/format,png" alt="keystate"><br>上图中，设K = “abcdefghijklmnop”，则$K0 = a, K15 = p, W[0] = K0 |K1| K2 |K3 = “abcd”$。</li></ul><p>AES的整体结构如下图所示，其中的W[0,3]是指W[0]、W[1]、W[2]和W[3]串联组成的128位密钥。加密的第1轮到第9轮的轮函数一样，包括<font color="red">4个操作：字节代换、行位移、列混合和轮密钥加</font>。最后一轮迭代不执行列混合。另外，在第一轮迭代之前，先将明文和原始密钥进行一次异或加密操作。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MTYxMjAyNDg1?x-oss-process=image/format,png" alt="aes_struct"><br>上图也展示了AES解密过程，解密过程仍为10轮，每一轮的操作是加密操作的逆操作。由于AES的4个轮操作都是可逆的，因此，解密操作的一轮就是顺序执行逆行移位、逆字节代换、轮密钥加和逆列混合。同加密操作类似，最后一轮不执行逆列混合，在第1轮解密之前，要执行1次密钥加操作。</p><p>下面分别介绍AES中一轮的4个操作阶段，这4分操作阶段使输入位得到充分的混淆。</p><h3 id="AES加解密具体流程"><a href="#AES加解密具体流程" class="headerlink" title="AES加解密具体流程"></a>AES加解密具体流程</h3><h4 id="字节代换"><a href="#字节代换" class="headerlink" title="字节代换"></a>字节代换</h4><p>把该字节的高4位作为行值，低4位作为列值，取出S盒中对应的元素作为输出</p><h5 id="字节代换操作"><a href="#字节代换操作" class="headerlink" title="字节代换操作"></a>字节代换操作</h5><p>AES的字节代换其实就是一个简单的查表操作。AES定义了一个S盒和一个逆S盒。<br>AES的S盒：</p><div class="table-container"><table><thead><tr><th>行/列</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>0x63</td><td>0x7c</td><td>0x77</td><td>0x7b</td><td>0xf2</td><td>0x6b</td><td>0x6f</td><td>0xc5</td><td>0x30</td><td>0x01</td><td>0x67</td><td>0x2b</td><td>0xfe</td><td>0xd7</td><td>0xab</td><td>0x76</td></tr><tr><td>1</td><td>0xca</td><td>0x82</td><td>0xc9</td><td>0x7d</td><td>0xfa</td><td>0x59</td><td>0x47</td><td>0xf0</td><td>0xad</td><td>0xd4</td><td>0xa2</td><td>0xaf</td><td>0x9c</td><td>0xa4</td><td>0x72</td><td>0xc0</td></tr><tr><td>2</td><td>0xb7</td><td>0xfd</td><td>0x93</td><td>0x26</td><td>0x36</td><td>0x3f</td><td>0xf7</td><td>0xcc</td><td>0x34</td><td>0xa5</td><td>0xe5</td><td>0xf1</td><td>0x71</td><td>0xd8</td><td>0x31</td><td>0x15</td></tr><tr><td>3</td><td>0x04</td><td>0xc7</td><td>0x23</td><td>0xc3</td><td>0x18</td><td>0x96</td><td>0x05</td><td>0x9a</td><td>0x07</td><td>0x12</td><td>0x80</td><td>0xe2</td><td>0xeb</td><td>0x27</td><td>0xb2</td><td>0x75</td></tr><tr><td>4</td><td>0x09</td><td>0x83</td><td>0x2c</td><td>0x1a</td><td>0x1b</td><td>0x6e</td><td>0x5a</td><td>0xa0</td><td>0x52</td><td>0x3b</td><td>0xd6</td><td>0xb3</td><td>0x29</td><td>0xe3</td><td>0x2f</td><td>0x84</td></tr><tr><td>5</td><td>0x53</td><td>0xd1</td><td>0x00</td><td>0xed</td><td>0x20</td><td>0xfc</td><td>0xb1</td><td>0x5b</td><td>0x6a</td><td>0xcb</td><td>0xbe</td><td>0x39</td><td>0x4a</td><td>0x4c</td><td>0x58</td><td>0xcf</td></tr><tr><td>6</td><td>0xd0</td><td>0xef</td><td>0xaa</td><td>0xfb</td><td>0x43</td><td>0x4d</td><td>0x33</td><td>0x85</td><td>0x45</td><td>0xf9</td><td>0x02</td><td>0x7f</td><td>0x50</td><td>0x3c</td><td>0x9f</td><td>0xa8</td></tr><tr><td>7</td><td>0x51</td><td>0xa3</td><td>0x40</td><td>0x8f</td><td>0x92</td><td>0x9d</td><td>0x38</td><td>0xf5</td><td>0xbc</td><td>0xb6</td><td>0xda</td><td>0x21</td><td>0x10</td><td>0xff</td><td>0xf3</td><td>0xd2</td></tr><tr><td>8</td><td>0xcd</td><td>0x0c</td><td>0x13</td><td>0xec</td><td>0x5f</td><td>0x97</td><td>0x44</td><td>0x17</td><td>0xc4</td><td>0xa7</td><td>0x7e</td><td>0x3d</td><td>0x64</td><td>0x5d</td><td>0x19</td><td>0x73</td></tr><tr><td>9</td><td>0x60</td><td>0x81</td><td>0x4f</td><td>0xdc</td><td>0x22</td><td>0x2a</td><td>0x90</td><td>0x88</td><td>0x46</td><td>0xee</td><td>0xb8</td><td>0x14</td><td>0xde</td><td>0x5e</td><td>0x0b</td><td>0xdb</td></tr><tr><td>A</td><td>0xe0</td><td>0x32</td><td>0x3a</td><td>0x0a</td><td>0x49</td><td>0x06</td><td>0x24</td><td>0x5c</td><td>0xc2</td><td>0xd3</td><td>0xac</td><td>0x62</td><td>0x91</td><td>0x95</td><td>0xe4</td><td>0x79</td></tr><tr><td>B</td><td>0xe7</td><td>0xc8</td><td>0x37</td><td>0x6d</td><td>0x8d</td><td>0xd5</td><td>0x4e</td><td>0xa9</td><td>0x6c</td><td>0x56</td><td>0xf4</td><td>0xea</td><td>0x65</td><td>0x7a</td><td>0xae</td><td>0x08</td></tr><tr><td>C</td><td>0xba</td><td>0x78</td><td>0x25</td><td>0x2e</td><td>0x1c</td><td>0xa6</td><td>0xb4</td><td>0xc6</td><td>0xe8</td><td>0xdd</td><td>0x74</td><td>0x1f</td><td>0x4b</td><td>0xbd</td><td>0x8b</td><td>0x8a</td></tr><tr><td>D</td><td>0x70</td><td>0x3e</td><td>0xb5</td><td>0x66</td><td>0x48</td><td>0x03</td><td>0xf6</td><td>0x0e</td><td>0x61</td><td>0x35</td><td>0x57</td><td>0xb9</td><td>0x86</td><td>0xc1</td><td>0x1d</td><td>0x9e</td></tr><tr><td>E</td><td>0xe1</td><td>0xf8</td><td>0x98</td><td>0x11</td><td>0x69</td><td>0xd9</td><td>0x8e</td><td>0x94</td><td>0x9b</td><td>0x1e</td><td>0x87</td><td>0xe9</td><td>0xce</td><td>0x55</td><td>0x28</td><td>0xdf</td></tr><tr><td>F</td><td>0x8c</td><td>0xa1</td><td>0x89</td><td>0x0d</td><td>0xbf</td><td>0xe6</td><td>0x42</td><td>0x68</td><td>0x41</td><td>0x99</td><td>0x2d</td><td>0x0f</td><td>0xb0</td><td>0x54</td><td>0xbb</td><td>0x16</td></tr></tbody></table></div><p>状态矩阵中的元素按照下面的方式映射为一个新的字节：把该字节的高4位作为行值，低4位作为列值，取出S盒或者逆S盒中对应的行的元素作为输出。例如，加密时，输出的字节S1为0x12,则查S盒的第0x01行和0x02列，得到值0xc9,然后替换S1原有的0x12为0xc9。状态矩阵经字节代换后的图如下：<br><img src="https://img-blog.csdnimg.cn/20181213112210707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI4MjA1MTUz,size_16,color_FFFFFF,t_70" alt="字节变换"></p><h5 id="字节代换逆操作"><a href="#字节代换逆操作" class="headerlink" title="字节代换逆操作"></a>字节代换逆操作</h5><p>逆字节代换也就是查逆S盒来变换，逆S盒如下：</p><div class="table-container"><table><thead><tr><th>列 行</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0</td><td>0x52</td><td>0x09</td><td>0x6a</td><td>0xd5</td><td>0x30</td><td>0x36</td><td>0xa5</td><td>0x38</td><td>0xbf</td><td>0x40</td><td>0xa3</td><td>0x9e</td><td>0x81</td><td>0xf3</td><td>0xd7</td><td>0xfb</td></tr><tr><td>1</td><td>0x7c</td><td>0xe3</td><td>0x39</td><td>0x82</td><td>0x9b</td><td>0x2f</td><td>0xff</td><td>0x87</td><td>0x34</td><td>0x8e</td><td>0x43</td><td>0x44</td><td>0xc4</td><td>0xde</td><td>0xe9</td><td>0xcb</td></tr><tr><td>2</td><td>0x54</td><td>0x7b</td><td>0x94</td><td>0x32</td><td>0xa6</td><td>0xc2</td><td>0x23</td><td>0x3d</td><td>0xee</td><td>0x4c</td><td>0x95</td><td>0x0b</td><td>0x42</td><td>0xfa</td><td>0xc3</td><td>0x4e</td></tr><tr><td>3</td><td>0x08</td><td>0x2e</td><td>0xa1</td><td>0x66</td><td>0x28</td><td>0xd9</td><td>0x24</td><td>0xb2</td><td>0x76</td><td>0x5b</td><td>0xa2</td><td>0x49</td><td>0x6d</td><td>0x8b</td><td>0xd1</td><td>0x25</td></tr><tr><td>4</td><td>0x72</td><td>0xf8</td><td>0xf6</td><td>0x64</td><td>0x86</td><td>0x68</td><td>0x98</td><td>0x16</td><td>0xd4</td><td>0xa4</td><td>0x5c</td><td>0xcc</td><td>0x5d</td><td>0x65</td><td>0xb6</td><td>0x92</td></tr><tr><td>5</td><td>0x6c</td><td>0x70</td><td>0x48</td><td>0x50</td><td>0xfd</td><td>0xed</td><td>0xb9</td><td>0xda</td><td>0x5e</td><td>0x15</td><td>0x46</td><td>0x57</td><td>0xa7</td><td>0x8d</td><td>0x9d</td><td>0x84</td></tr><tr><td>6</td><td>0x90</td><td>0xd8</td><td>0xab</td><td>0x00</td><td>0x8c</td><td>0xbc</td><td>0xd3</td><td>0x0a</td><td>0xf7</td><td>0xe4</td><td>0x58</td><td>0x05</td><td>0xb8</td><td>0xb3</td><td>0x45</td><td>0x06</td></tr><tr><td>7</td><td>0xd0</td><td>0x2c</td><td>0x1e</td><td>0x8f</td><td>0xca</td><td>0x3f</td><td>0x0f</td><td>0x02</td><td>0xc1</td><td>0xaf</td><td>0xbd</td><td>0x03</td><td>0x01</td><td>0x13</td><td>0x8a</td><td>0x6b</td></tr><tr><td>8</td><td>0x3a</td><td>0x91</td><td>0x11</td><td>0x41</td><td>0x4f</td><td>0x67</td><td>0xdc</td><td>0xea</td><td>0x97</td><td>0xf2</td><td>0xcf</td><td>0xce</td><td>0xf0</td><td>0xb4</td><td>0xe6</td><td>0x73</td></tr><tr><td>9</td><td>0x96</td><td>0xac</td><td>0x74</td><td>0x22</td><td>0xe7</td><td>0xad</td><td>0x35</td><td>0x85</td><td>0xe2</td><td>0xf9</td><td>0x37</td><td>0xe8</td><td>0x1c</td><td>0x75</td><td>0xdf</td><td>0x6e</td></tr><tr><td>A</td><td>0x47</td><td>0xf1</td><td>0x1a</td><td>0x71</td><td>0x1d</td><td>0x29</td><td>0xc5</td><td>0x89</td><td>0x6f</td><td>0xb7</td><td>0x62</td><td>0x0e</td><td>0xaa</td><td>0x18</td><td>0xbe</td><td>0x1b</td></tr><tr><td>B</td><td>0xfc</td><td>0x56</td><td>0x3e</td><td>0x4b</td><td>0xc6</td><td>0xd2</td><td>0x79</td><td>0x20</td><td>0x9a</td><td>0xdb</td><td>0xc0</td><td>0xfe</td><td>0x78</td><td>0xcd</td><td>0x5a</td><td>0xf4</td></tr><tr><td>C</td><td>0x1f</td><td>0xdd</td><td>0xa8</td><td>0x33</td><td>0x88</td><td>0x07</td><td>0xc7</td><td>0x31</td><td>0xb1</td><td>0x12</td><td>0x10</td><td>0x59</td><td>0x27</td><td>0x80</td><td>0xec</td><td>0x5f</td></tr><tr><td>D</td><td>0x60</td><td>0x51</td><td>0x7f</td><td>0xa9</td><td>0x19</td><td>0xb5</td><td>0x4a</td><td>0x0d</td><td>0x2d</td><td>0xe5</td><td>0x7a</td><td>0x9f</td><td>0x93</td><td>0xc9</td><td>0x9c</td><td>0xef</td></tr><tr><td>E</td><td>0xa0</td><td>0xe0</td><td>0x3b</td><td>0x4d</td><td>0xae</td><td>0x2a</td><td>0xf5</td><td>0xb0</td><td>0xc8</td><td>0xeb</td><td>0xbb</td><td>0x3c</td><td>0x83</td><td>0x53</td><td>0x99</td><td>0x61</td></tr><tr><td>F</td><td>0x17</td><td>0x2b</td><td>0x04</td><td>0x7e</td><td>0xba</td><td>0x77</td><td>0xd6</td><td>0x26</td><td>0xe1</td><td>0x69</td><td>0x14</td><td>0x63</td><td>0x55</td><td>0x21</td><td>0x0c</td><td>0x7d</td></tr></tbody></table></div><h4 id="行移位"><a href="#行移位" class="headerlink" title="行移位"></a>行移位</h4><h5 id="行移位操作"><a href="#行移位操作" class="headerlink" title="行移位操作"></a>行移位操作</h5><p>行移位是一个简单的左循环移位操作。当密钥长度为128比特时，状态矩阵的第0行左移0字节，第1行左移1字节，第2行左移2字节，第3行左移3字节，如下图所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MTc0MDE1MTY3?x-oss-process=image/format,png" alt="shiftRows"></p><h5 id="行移位的逆变换"><a href="#行移位的逆变换" class="headerlink" title="行移位的逆变换"></a>行移位的逆变换</h5><p>行移位的逆变换是将状态矩阵中的每一行执行相反的移位操作，例如AES-128中，状态矩阵的第0行右移0字节，第1行右移1字节，第2行右移2字节，第3行右移3字节。</p><h4 id="列混合"><a href="#列混合" class="headerlink" title="列混合"></a>列混合</h4><h5 id="列混合操作"><a href="#列混合操作" class="headerlink" title="列混合操作"></a>列混合操作</h5><p>列混合变换是通过矩阵相乘来实现的，经行移位后的状态矩阵与固定的矩阵相乘，得到混淆后的状态矩阵，如下图的公式所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MjAzMzQ2NDM2?x-oss-process=image/format,png" alt="col"></p><p>状态矩阵中的第j列(0 ≤j≤3)的列混合可以表示为下图所示：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MjAzNzQyNTE2?x-oss-process=image/format,png" alt="col2"></p><p>其中，矩阵元素的乘法和加法都是定义在基于$GF(2^8)$上的二元运算,并不是通常意义上的乘法和加法。这里涉及到一些信息安全上的数学知识，不过不懂这些知识也行。其实这种二元运算的加法等价于两个字节的异或，乘法则复杂一点。对于一个8位的二进制数来说，使用域上的乘法乘以(00000010)等价于左移1位(低位补0)后，再根据情况同(00011011)进行异或运算，设$S1 = (a7 ,a6, a5, a4, a3, a2 ,a1,a0)$，刚$0x02 * S1$如下图所示：</p><script type="math/tex; mode=display">(00000010)* (a7 ,a6, a5, a4, a3, a2 ,a1,a0)=\begin{equation}    \begin{cases}       (a6, a5, a4, a3, a2 ,a1,a0) ,a_7 = 0\\       (a6, a5, a4, a3, a2 ,a1,a0) \oplus (00011011),a_7 = 1\\     \end{cases}\end{equation}</script><p>也就是说，如果a7为1，则进行异或运算，否则不进行。<br>类似地，乘以(00000100)可以拆分成两次乘以(00000010)的运算：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MjA1NjAxNjgz?x-oss-process=image/format,png" alt="col4"><br>乘以(0000 0011)可以拆分成先分别乘以(0000 0001)和(0000 0010)，再将两个乘积异或：<br><img src="https://img-blog.csdnimg.cn/20210216120331436.png#pic_center" alt=" "></p><p>因此，我们只需要实现乘以2的函数，其他数值的乘法都可以通过组合来实现。<br>下面举个具体的例子,输入的状态矩阵如下：</p><div class="table-container"><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>C9</td><td>E5</td><td>FD</td><td>2B</td></tr><tr><td>7A</td><td>F2</td><td>78</td><td>6E</td></tr><tr><td>63</td><td>9C</td><td>26</td><td>67</td></tr><tr><td>B0</td><td>A7</td><td>82</td><td>E5</td></tr></tbody></table></div><p>下面，进行列混合运算：<br>以第一列的运算为例：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MjEzNzQ3OTY1?x-oss-process=image/format,png" alt="col7"><br>其它列的计算就不列举了，列混合后生成的新状态矩阵如下：</p><div class="table-container"><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>D4</td><td>E7</td><td>CD</td><td>66</td></tr><tr><td>28</td><td>02</td><td>E5</td><td>BB</td></tr><tr><td>BE</td><td>C6</td><td>D6</td><td>BF</td></tr><tr><td>22</td><td>0F</td><td>DF</td><td>A5</td></tr></tbody></table></div><h5 id="列混合逆运算"><a href="#列混合逆运算" class="headerlink" title="列混合逆运算"></a>列混合逆运算</h5><p>逆向列混合变换可由下图的矩阵乘法定义：<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjE5MjExMTM5NzUy?x-oss-process=image/format,png" alt="col6"><br>可以验证，逆变换矩阵同正变换矩阵的乘积恰好为单位矩阵。</p><h4 id="轮密钥加"><a href="#轮密钥加" class="headerlink" title="轮密钥加"></a>轮密钥加</h4><p>轮密钥加是将128位轮密钥Ki同状态矩阵中的数据进行逐位异或操作，如下图所示。其中，密钥Ki中每个字W[4i],W[4i+1],W[4i+2],W[4i+3]为32位比特字，包含4个字节，他们的生成算法下面在下面介绍。轮密钥加过程可以看成是字逐位异或的结果，也可以看成字节级别或者位级别的操作。也就是说，可以看成S0 S1 S2 S3 组成的32位字与W[4i]的异或运算。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjIwMDgwNTEyMDg2?x-oss-process=image/format,png" alt="roundadd"><br>轮密钥加的逆运算同正向的轮密钥加运算完全一致，这是因为异或的逆操作是其自身。轮密钥加非常简单，但却能够影响S数组中的每一位。</p><h4 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h4><p>AES首先将初始密钥输入到一个4*4的状态矩阵中，如下图所示。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjIwMDgyMzE2NzM2?x-oss-process=image/format,png" alt="keyextends"></p><ul><li><p>这个4*4矩阵的每一列的4个字节组成一个字，矩阵4列的4个字依次命名为W[0]、W[1]、W[2]和W[3]，它们构成一个以字为单位的数组W。例如，设密钥K为”abcdefghijklmnop”,则K0 = ‘a’,K1 = ‘b’, K2 = ‘c’,K3 = ‘d’,W[0] = “abcd”。</p></li><li><p>接着，对W数组扩充40个新列，构成总共44列的扩展密钥数组。新列以如下的递归方式产生：</p><ul><li><p>1.如果i不是4的倍数，那么第i列由如下等式确定：<br>$W[i]=W[i-4]⨁W[i-1]$</p></li><li><p>2.如果i是4的倍数，那么第i列由如下等式确定：<br>$W[i]=W[i-4]⨁T(W[i-1])$<br>其中，T是一个有点复杂的函数。<br>函数T由3部分组成：字循环、字节代换和轮常量异或，这3部分的作用分别如下。</p><ul><li>a.字循环：将1个字中的4个字节循环左移1个字节。即将输入字[b0, b1, b2, b3]变换成[b1,b2,b3,b0]。</li><li>b.字节代换：对字循环的结果使用S盒进行字节代换。</li><li>c.轮常量异或：将前两步的结果同轮常量$Rcon[j]$进行异或，其中$j$表示轮数。轮常量$Rcon[j]$是一个字，其值见下表。</li></ul></li></ul></li></ul><div class="table-container"><table><thead><tr><th>j</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>Rcon[j]</td><td>01 00 00 00</td><td>02 00 00 00</td><td>04 00 00 00</td><td>08 00 00 00</td><td>10 00 00 00</td></tr><tr><td>j</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td></tr><tr><td>Rcon[j]</td><td>20 00 00 00</td><td>40 00 00 00</td><td>80 00 00 00</td><td>1B 00 00 00</td><td>36 00 00 00</td></tr></tbody></table></div><p>下面举个例子：</p><blockquote><p>设初始的128位密钥为：<br>3C A1 0B 21 57 F0 19 16 90 2E 13 80 AC C1 07 BD<br>那么4个初始值为：<br>W[0] = 3C A1 0B 21<br>W[1] = 57 F0 19 16<br>W[2] = 90 2E 13 80<br>W[3] = AC C1 07 BD</p><p>下面求扩展的第1轮的子密钥(W[4],W[5],W[6],W[7])。<br>由于4是4的倍数，所以：<br>W[4] = W[0] ⨁ T(W[3])</p><p>T(W[3])的计算步骤如下：</p><ul><li>循环地将W[3]的元素移位：AC C1 07 BD变成C1 07 BD AC;</li><li>将 C1 07 BD AC 作为S盒的输入，输出为78 C5 7A 91;</li><li>将78 C5 7A 91与第一轮轮常量Rcon[1]进行异或运算，将得到79 C5 7A 91，因此，T(W[3])=79 C5 7A 91，故<br>W[4] = 3C A1 0B 21 ⨁ 79 C5 7A 91 = 45 64 71 B0<br>其余的3个子密钥段的计算如下：<br>W[5] = W[1] ⨁ W[4] = 57 F0 19 16 ⨁ 45 64 71 B0 = 12 94 68 A6<br>W[6] = W[2] ⨁ W[5] =90 2E 13 80 ⨁ 12 94 68 A6 = 82 BA 7B 26<br>W[7] = W[3] ⨁ W[6] = AC C1 07 BD ⨁ 82 BA 7B 26 = 2E 7B 7C 9B<br>所以，第一轮的密钥为 45 64 71 B0 12 94 68 A6 82 BA 7B 26 2E 7B 7C 9B。</li></ul></blockquote><h3 id="AES解密"><a href="#AES解密" class="headerlink" title="AES解密"></a>AES解密</h3><p>在文章开始的图中，有AES解密的流程图，可以对应那个流程图来进行解密。下面介绍的是另一种等价的解密模式，流程图如下图所示。这种等价的解密模式使得解密过程各个变换的使用顺序同加密过程的顺序一致，只是用逆变换取代原来的变换。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwMjIwMDk0ODUzNjIw?x-oss-process=image/format,png" alt="deaes"></p><h3 id="AES四种加密模式"><a href="#AES四种加密模式" class="headerlink" title="AES四种加密模式"></a>AES四种加密模式</h3><p>分组密码有五种工作体制：1.电码本模式（Electronic Codebook Book (ECB)）；2.密码分组链接模式（Cipher Block Chaining (CBC)）；3.计算器模式（Counter (CTR)）；4.输出反馈模式（Output FeedBack (OFB)）。</p><h4 id="电码本模式（ECB）"><a href="#电码本模式（ECB）" class="headerlink" title="电码本模式（ECB）"></a><strong>电码本模式</strong>（ECB）</h4><p>将整个明文分成若干段相同的小段，然后对每一小段进行加密</p><p>优点：</p><ul><li>操作简单，易于实现；分组独立，易于并行；误差不会被传送。——简单，可并行，不传送误差。</li></ul><p>缺点：</p><ul><li>掩盖不了明文结构信息，难以抵抗统计分析攻击。——可对明文进行主动攻击。</li></ul><p><img src="https://images0.cnblogs.com/blog/480062/201310/12232452-d3e3ba87a6b24b49b6f57d41b341ea96.png" alt="img"></p><p><img src="https://blog.mimvp.com/wp-content/uploads/2018/06/aes-jia-mi-suan-fa-de-wu-zhong-jia-mi-mo-shi-011-700x418.jpg" alt="img"></p><h4 id="密码分组链模式（CBC）"><a href="#密码分组链模式（CBC）" class="headerlink" title="密码分组链模式（CBC）"></a><strong>密码分组链模式</strong>（CBC）</h4><p>先将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密</p><p><strong>优点</strong>：</p><ul><li>能掩盖明文结构信息，保证相同密文可得不同明文，所以不容易主动攻击，安全性好于ECB，适合传输长度长的报文，是SSL和IPSec的标准。</li></ul><p><strong>缺点</strong>：</p><ul><li>不利于并行计算；</li><li>传递误差——前一个出错则后续全错；</li><li>第一个明文块需要与一个初始化向量IV进行抑或，初始化向量IV的选取比较复杂。</li></ul><p><strong>初始化IV的选取方式</strong>：固定IV，计数器IV，随机IV（只能得到伪随机数，用的最多），瞬时IV（难以得到瞬时值）</p><p><img src="https://blog.mimvp.com/wp-content/uploads/2018/06/aes-jia-mi-suan-fa-de-wu-zhong-jia-mi-mo-shi-02.png" alt="img"></p><p><strong>IV是做什么用的呢？</strong></p><p>初始向量IV（Initialization Vector）它的作用和MD5的“加盐”有些类似，目的是防止同样的明文块始终加密成同样的密文块。</p><h4 id="输出反馈模式（OFB）"><a href="#输出反馈模式（OFB）" class="headerlink" title="输出反馈模式（OFB）"></a><strong>输出反馈模式</strong>（OFB）</h4><p>密码算法的输出（指密码key而不是密文）会反馈到密码算法的输入中，OFB模式并不是通过密码算法对明文直接加密，而是通过将明文分组和密码算法的输出进行XOR来产生密文分组。</p><p><strong>优点</strong>：</p><ul><li>隐藏了明文模式；结合了分组加密和流密码（分组密码转化为流模式）；可以及时加密传送小于分组的数据。</li></ul><p><strong>缺点</strong>：</p><ul><li>不利于并行计算；需要生成秘钥流；对明文的主动攻击是可能的。</li></ul><p><img src="https://blog.mimvp.com/wp-content/uploads/2018/06/aes-jia-mi-suan-fa-de-wu-zhong-jia-mi-mo-shi-03.png" alt="img"></p><h4 id="计数器模式（CTR）"><a href="#计数器模式（CTR）" class="headerlink" title="计数器模式（CTR）"></a>计数器模式（CTR）</h4><p>完全的流模式，将瞬时值与计数器连接起来，然后对此进行加密产生密钥流的一个密钥块，再进行XOR操作 </p><p>优点：</p><ul><li>不泄露明文；仅需实现加密函数；无需填充；可并行计算。</li></ul><p>缺点：</p><ul><li>需要瞬时值IV，难以保证IV的唯一性。</li></ul><p><img src="https://blog.mimvp.com/wp-content/uploads/2018/06/aes-jia-mi-suan-fa-de-wu-zhong-jia-mi-mo-shi-04.jpg" alt="img"></p><p><strong>对比CBC和CTR</strong></p><p>1）CBC需要填充；CTR不用填充。</p><p>2）CBC不可并行；CTR可并行速度快。</p><p>3）CBC需要实现加密和解密函数；CTR实现简单，仅需实现加密函数。</p><p>4）鲁棒性：CBC强于CTR——使用重复瞬时值，CBC会泄露初始明文块，CTR会泄露所有信息。</p><p>如果有好的瞬时值选择策略，采用CTR，否则采用CBC。</p><p>如加密成绩单，可选用CTR，因为学号唯一，可作为瞬时值。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分组密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译配置SGX-SSL</title>
      <link href="/2022/10/11/Ubuntu18.04%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AESGX-SSL%EF%BC%88SGX%E6%94%AF%E6%8C%81%E7%9A%84openssl%E5%87%BD%E6%95%B0%E5%BA%93%EF%BC%89/"/>
      <url>/2022/10/11/Ubuntu18.04%E7%BC%96%E8%AF%91%E9%85%8D%E7%BD%AESGX-SSL%EF%BC%88SGX%E6%94%AF%E6%8C%81%E7%9A%84openssl%E5%87%BD%E6%95%B0%E5%BA%93%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="编译配置SGX-SSL（SGX支持的openssl函数库）"><a href="#编译配置SGX-SSL（SGX支持的openssl函数库）" class="headerlink" title="编译配置SGX-SSL（SGX支持的openssl函数库）"></a>编译配置SGX-SSL（SGX支持的openssl函数库）</h1><p>由于在sgx中需要对超级大的整数进行操作，于是引入openssl库，下面是一些安装步骤，主要参考的了官方github给出的教程：</p><ul><li><a href="https://github.com/intel/intel-sgx-ssl">intel/intel-sgx-ssl: Intel® Software Guard Extensions SSL (github.com)</a></li></ul><h2 id="所用的电脑配置"><a href="#所用的电脑配置" class="headerlink" title="所用的电脑配置"></a>所用的电脑配置</h2><blockquote><ul><li><p>电脑：联想Thinkpad E14</p></li><li><p>操作系统：ubuntu18.04</p></li><li><p>处理器：i5-10210U</p></li><li><p>内存：8G</p></li><li><p>硬盘：1TB</p></li><li><p>在电脑BIOS中<strong>启用</strong>Intel SGX。重装系统不会更改BIOS中的设置，所以即使重装系统，Intel SGX也会一直保持启用状态。</p></li><li><p>安装如下工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install gcc git cpuid<br></code></pre></td></tr></table></figure></li></ul></blockquote><h2 id="正式开始配置"><a href="#正式开始配置" class="headerlink" title="正式开始配置"></a>正式开始配置</h2><h3 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h3><ul><li>Perl</li><li>Toolchain（需要的工具，参照我的上一个博客<a href="https://harper.city/2022/10/04/intel-sgx%E9%85%8D%E7%BD%AE/">安装sgxsdk</a>，执行下面的指令之后可以看到这些工具的路径）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> external/toolset/&#123;current_distr&#125;/&#123;as,ld,ld.gold,objdump&#125; /usr/local/bin<br><span class="hljs-built_in">which</span> as ld ld.gold objdump<br></code></pre></td></tr></table></figure><ul><li>Intel SGX driver、SDK和PSW</li><li>准备好OpenSSL源码压缩包openssl-${version}.tar.gz。本博客使用的是openssl-1.1.1q版本，之前计划使用openssl-1.1.1p版本，<font color = "red">但是编译的时候报错让我使用openssl-1.1.1q版本</font>，随着时间的推移官方的更新可能之后还需要其他版本，大家自行辨别。</li></ul><h3 id="下载sgx-ssl项目"><a href="#下载sgx-ssl项目" class="headerlink" title="下载sgx-ssl项目"></a>下载sgx-ssl项目</h3><p>从GitHub拉取intel-sgx-ssl项目，这个网站也是可以访问的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/intel/intel-sgx-ssl<br></code></pre></td></tr></table></figure><h3 id="下载openssl压缩包"><a href="#下载openssl压缩包" class="headerlink" title="下载openssl压缩包"></a>下载openssl压缩包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> intel-sgx-ssl/openssl_source<br>wget https://openssl.org/source/openssl-1.1.1q.tar.gz<br></code></pre></td></tr></table></figure><p>这样openssl-1.1.1q.tar.gz压缩包就到了/intel-sgx-ssl/openssl_source/目录下</p><h3 id="编译并安装"><a href="#编译并安装" class="headerlink" title="编译并安装"></a>编译并安装</h3><p>我们现在在openssl_source目录，下面进入linux目录Linux/directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ../Linux<br><span class="hljs-built_in">source</span> /opt/intel/sgxsdk/environment  //这里应填写sgx的安装路径，我的是/opt/intel/sgxsdk/<br></code></pre></td></tr></table></figure><p>使得sgx开发环境生效。<br>无脑编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make all <span class="hljs-built_in">test</span><br>sudo make install<br></code></pre></td></tr></table></figure><p>安装完毕，可以在/opt/intel/sgxssl/找到编译好的库函数。</p>]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sgx </tag>
            
            <tag> linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo配置博客心路历程</title>
      <link href="/2022/10/07/trash/hexo%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/"/>
      <url>/2022/10/07/trash/hexo%E9%85%8D%E7%BD%AE%E5%8D%9A%E5%AE%A2%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://linzeen.me/2022/07/24/mac样式代码块教程/">Hexo-Fluid实现mac-panel风格代码块 - LINZEEN’s Gossip Blog</a></p><p><a href="https://forsure.live/customize-some-effects-for-hexofluid/#Mac风格代码块4">为Hexo-Fluid自定义一些效果 - ForSure’s Blog</a></p><p><a href="https://blog.yleao.com/2018/0902/hexo上的aplayer应用.html">hexo上的aplayer应用 | Y’s BLOG (yleao.com)</a></p><p><a href="https://blog.csdn.net/qq_41380292/article/details/121886741">(25条消息) hexo博客fluid主题添加aplayer组件_ccjoffrey的博客-CSDN博客_fluid主题</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>现代密码学作业10.7</title>
      <link href="/2022/10/06/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E4%BD%9C%E4%B8%9A10-7/"/>
      <url>/2022/10/06/%E7%8E%B0%E4%BB%A3%E5%AF%86%E7%A0%81%E5%AD%A6%E4%BD%9C%E4%B8%9A10-7/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="5f62e8694903bed91ff1b86f21f49027fd48eba56a9ff734ce587915a86625f5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 作业 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>intel sgx开发环境配置</title>
      <link href="/2022/10/04/intel-sgx%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/10/04/intel-sgx%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="sgx的开发环境配置"><a href="#sgx的开发环境配置" class="headerlink" title="sgx的开发环境配置"></a>sgx的开发环境配置</h1><h2 id="参考的文献-amp-博客"><a href="#参考的文献-amp-博客" class="headerlink" title="参考的文献&amp;博客"></a>参考的文献&amp;博客</h2><ul><li><p><a href="https://flxdu.cn/2022/04/08/Intel-R-SGX环境在Ubuntu-18-04的安装/">Intel(R) SGX环境在Ubuntu 18.04的安装 | 小木槌 (flxdu.cn)</a></p></li><li><p><a href="https://blog.csdn.net/cyLee_/article/details/90245344">Ubuntu 18.04安装Intel SGX 2.3.1</a></p></li><li><p><a href="https://blog.csdn.net/cyLee_/article/details/90200470">Ubuntu 16.04下Intel SGX SDK环境搭建（硬件不支持情况）</a></p></li><li><p><a href="https://github.com/intel/linux-sgx">github上非常非常详细的英语教程</a></p></li></ul><p>主要参考了第一个博客，但是最最详细的是第四个github上的教程，只不过是全英文的有很多linux和sgx方面的专业名词对小白不是很友好。本人主要引用了第一个博客的内容，第一个博客的博主写的很详细，但是本人自己配置的时候还是出现了很多很多意想不到的问题，本博客针对可能出现的问题进行补充和说明。</p><h2 id="本人所用的配置"><a href="#本人所用的配置" class="headerlink" title="本人所用的配置"></a>本人所用的配置</h2><h3 id="电脑环境"><a href="#电脑环境" class="headerlink" title="电脑环境"></a>电脑环境</h3><p>由于现在用的电脑是锐龙处理器，而且没有trustzone，所以使用很久没用的、尘封已久的老、但是跟了我一年的老电脑。操作系统用的是ubuntu（鬼知道重装系统用了多久的时间），装完之后开机要很久，也不知道是不是坏了。</p><blockquote><ul><li><p>电脑：联想Thinkpad E14</p></li><li><p>操作系统：ubuntu18.04</p></li><li><p>处理器：i5-10210U</p></li><li><p>内存：8G</p></li><li><p>硬盘：1TB</p></li><li><p>在电脑BIOS中<strong>启用</strong>Intel SGX。重装系统不会更改BIOS中的设置，所以即使重装系统，Intel SGX也会一直保持启用状态。</p></li><li><p>安装如下工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install gcc git cpuid<br></code></pre></td></tr></table></figure></li></ul></blockquote><h3 id="检查硬件情况"><a href="#检查硬件情况" class="headerlink" title="检查硬件情况"></a>检查硬件情况</h3><p>这是Intel官方给出来的方法：<a href="https://www.intel.cn/content/www/cn/zh/support/articles/000057420/software/intel-security-products.html">如何确定英特尔® Software Guard Extensions （英特尔® SGX） 处理器是否支持 DCAP 和 FLC</a></p><p>在终端执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cpuid | grep -i sgx<br></code></pre></td></tr></table></figure><p>如果看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">SGX: Software Guard Extensions supported = <span class="hljs-literal">true</span><br>SGX_LC: SGX launch config supported = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>说明本博客安装方法适合你硬件情况。</p><h2 id="安装Intel-R-SGX环境"><a href="#安装Intel-R-SGX环境" class="headerlink" title="安装Intel(R) SGX环境"></a>安装Intel(R) SGX环境</h2><p>安装共有3大步，分别是：</p><ul><li>安装Intel(R) SGX Driver</li><li>安装Intel(R) SGX SDK</li><li>安装Intel(R) SGX PSW</li></ul><h3 id="安装Intel-R-SGX-Driver"><a href="#安装Intel-R-SGX-Driver" class="headerlink" title="安装Intel(R) SGX Driver"></a>安装Intel(R) SGX Driver</h3><p>安装一些工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install make<br></code></pre></td></tr></table></figure><p>检查系统内核头文件是否与现有内核匹配：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">dpkg-query -s linux-headers-$(<span class="hljs-built_in">uname</span> -r)<br></code></pre></td></tr></table></figure><p>如果看到<code>Status: install ok installed</code>说明没有问题</p><p>否则要安装匹配的内核头文件：<code>sudo apt-get install linux-headers-$(uname -r)</code></p><p>克隆仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/intel/linux-sgx-driver.git<br></code></pre></td></tr></table></figure><p>编译Intel(R) SGX Driver</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux-sgx-driver &amp;&amp; make<br></code></pre></td></tr></table></figure><p>编译完后，依次执行如下命令进行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;/lib/modules/&quot;</span>`<span class="hljs-built_in">uname</span> -r`<span class="hljs-string">&quot;/kernel/drivers/intel/sgx&quot;</span>    <br>sudo <span class="hljs-built_in">cp</span> isgx.ko <span class="hljs-string">&quot;/lib/modules/&quot;</span>`<span class="hljs-built_in">uname</span> -r`<span class="hljs-string">&quot;/kernel/drivers/intel/sgx&quot;</span>    <br>sudo sh -c <span class="hljs-string">&quot;cat /etc/modules | grep -Fxq isgx || echo isgx &gt;&gt; /etc/modules&quot;</span>    <br>sudo /sbin/depmod<br>sudo /sbin/modprobe isgx<br></code></pre></td></tr></table></figure><p>至此Intel(R) SGX Driver安装完成。</p><h3 id="安装Intel-R-SGX-SDK"><a href="#安装Intel-R-SGX-SDK" class="headerlink" title="安装Intel(R) SGX SDK"></a>安装Intel(R) SGX SDK</h3><p>安装一些工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install build-essential python ocaml ocamlbuild automake autoconf libtool wget python libssl-dev git cmake perl libcurl4-openssl-dev protobuf-compiler libprotobuf-dev debhelper reprepro unzip<br></code></pre></td></tr></table></figure><p>注意这里安装工具可能报错如下</p><img src="/2022/10/04/intel-sgx%E9%85%8D%E7%BD%AE/debhelper%E6%8A%A5%E9%94%99.png" class="" title="安装工具报错"><p><font color="red">这是因为某些软件包需要保持现状，安装可能会破坏原有的软件包依赖关系，所以要安装这个软件包，必须调节软件包之间的相关关系</font>,给个解决的<a href="https://blog.csdn.net/weixin_45348389/article/details/122913923">方法链接</a>,简单来说就是用aptitude来代替apt安装，aptitude能解决软件中的依赖关系。</p><p>克隆仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/intel/linux-sgx.git<br></code></pre></td></tr></table></figure><h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><p>此步会克隆几个GitHub，请走代理（不走代理针的好慢好慢）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux-sgx &amp;&amp; make preparation<br></code></pre></td></tr></table></figure><p>将预编译出的文件拷贝至系统路径下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">cp</span> ~/linux-sgx/external/toolset/ubuntu18.04/* /usr/local/bin<br></code></pre></td></tr></table></figure><p>执行如下命令检查是否拷贝成功，如果成功会输出路径：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">which</span> ar as ld objcopy objdump ranlib<br></code></pre></td></tr></table></figure><h4 id="编译Intel-R-SGX-SDK"><a href="#编译Intel-R-SGX-SDK" class="headerlink" title="编译Intel(R) SGX SDK"></a>编译Intel(R) SGX SDK</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make sdk<br></code></pre></td></tr></table></figure><p>此步会输出大约五万行内容（真的时间巨长，等吧），请耐心等待。</p><p>最后没有报错，说明编译成功。</p><h4 id="编译Intel-R-SGX-SDK安装器"><a href="#编译Intel-R-SGX-SDK安装器" class="headerlink" title="编译Intel(R) SGX SDK安装器"></a>编译Intel(R) SGX SDK安装器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make sdk_install_pkg<br></code></pre></td></tr></table></figure><p>此步会输出大约五万行内容（这个时间也很长啊，都看了好多视频了），请耐心等待。</p><p>编译完成后会输出<code>Generated sdk installer: ./linux/installer/bin/sgx_linux_x64_sdk_xxx.bin</code>。</p><h4 id="安装Intel-R-SGX-SDK-1"><a href="#安装Intel-R-SGX-SDK-1" class="headerlink" title="安装Intel(R) SGX SDK"></a>安装Intel(R) SGX SDK</h4><p>首先我们先创建一个目录，作为SDK的安装目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p ~/linux-sgx-install-path<br></code></pre></td></tr></table></figure><p>此步xxx要改为编译Intel(R) SGX SDK安装器最后的输出，在目录<code>linux-sgx/linux/installer/bin</code>下可以看到此文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> linux/installer/bin &amp;&amp; ./sgx_linux_x64_sdk_xxx.bin --prefix ~/linux-sgx-install-path<br></code></pre></td></tr></table></figure><p>根据安装最后的提示输出刷新环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/linux-sgx-install-path/sgxsdk/environment<br></code></pre></td></tr></table></figure><p>SDK安装完成。</p><p>此时进入<code>linux-sgx-install-path/SampleCode</code>下尝试样例代码是不会成功的，需要安装PSW之后才可运行样例。</p><h3 id="安装Intel-R-SGX-PSW"><a href="#安装Intel-R-SGX-PSW" class="headerlink" title="安装Intel(R) SGX PSW"></a>安装Intel(R) SGX PSW</h3><h4 id="编译Intel-R-SGX-PSW"><a href="#编译Intel-R-SGX-PSW" class="headerlink" title="编译Intel(R) SGX PSW"></a>编译Intel(R) SGX PSW</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/linux-sgx &amp;&amp; make psw<br></code></pre></td></tr></table></figure><p>注意把linux-sgx-install-path下的sgxsdk文件夹移动到根目录下的/opt/intel目录里，再执行上面的这一条指令。此步会输出大约一千行内容，请耐心等待。</p><h4 id="编译Intel-R-SGX-SDK安装器-1"><a href="#编译Intel-R-SGX-SDK安装器-1" class="headerlink" title="编译Intel(R) SGX SDK安装器"></a>编译Intel(R) SGX SDK安装器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/linux-sgx &amp;&amp; make deb_psw_pkg<br></code></pre></td></tr></table></figure><p>此步会输出大约八千行内容，请耐心等待。</p><h4 id="添加本地软件源"><a href="#添加本地软件源" class="headerlink" title="添加本地软件源"></a>添加本地软件源</h4><p>按照github上的英文教程，需要先生成sgx_debian_local_repo文件夹，最后在~/linux-sgx/linux/installer/deb目录下可以看见这个文件夹，输入如下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make deb_local_repo<br></code></pre></td></tr></table></figure><p>需要将本地路径追加到软件源文件中，使用<code>sudo vi /etc/apt/sources.list</code>编辑文件，将下面内容添加到文件末尾，<font color = "red">注意：你需要把PATH_TO_LOCAL_REPO替换成<code>~/linux-sgx/linux/installer/deb/sgx_debian_local_repo</code>的绝对路径</font>，注意这里的路径需要自己根据自己的位置设置，建议改成绝对路径，我的添加方式如下，大家自己添加的时候注意改成自己的路径哦！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb [trusted=<span class="hljs-built_in">yes</span> <span class="hljs-built_in">arch</span>=amd64] file:/home/harper/inux-sgx/linux/installer/deb/sgx_debian_local_repo bionic main<br></code></pre></td></tr></table></figure><p>添加完之后，刷新软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br></code></pre></td></tr></table></figure><h4 id="安装Intel-R-SGX-PSW-1"><a href="#安装Intel-R-SGX-PSW-1" class="headerlink" title="安装Intel(R) SGX PSW"></a>安装Intel(R) SGX PSW</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get install libsgx-launch libsgx-urts libsgx-epid libsgx-quote-ex libsgx-dcap-ql<br></code></pre></td></tr></table></figure><p>如果现在去测试样例，会报错<code>failed to load enclave</code>，Intel给出<a href="https://www.intel.com/content/www/us/en/support/articles/000057836/software/intel-security-products.html">解决方案</a>，要启动aesmd服务。</p><h3 id="启动aesmd服务"><a href="#启动aesmd服务" class="headerlink" title="启动aesmd服务"></a>启动aesmd服务</h3><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl start aesmd<br></code></pre></td></tr></table></figure><p>查看aesmd服务启动状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /var/log/syslog | grep -i aesm<br></code></pre></td></tr></table></figure><p>设置aesmd服务开机启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl <span class="hljs-built_in">enable</span> aesmd<br></code></pre></td></tr></table></figure><h2 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h2><h3 id="测试本地认证"><a href="#测试本地认证" class="headerlink" title="测试本地认证"></a>测试本地认证</h3><p>我们使用SDK给出的样例代码<code>LocalAttestation</code>对安装情况进行测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/linux-sgx-install-path/sgxsdk/SampleCode/LocalAttestation <br></code></pre></td></tr></table></figure><p>编译样例代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make<br></code></pre></td></tr></table></figure><p>执行样例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./bin/app<br></code></pre></td></tr></table></figure><p>如果看到如下输出，说明安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">succeed to load enclaves.<br>succeed to establish secure channel.<br>Succeed to exchange secure message...<br>Succeed to close Session...<br></code></pre></td></tr></table></figure><p>我自己跑出来是显示没有成功（狗头），应该是aesmd服务出了点问题，大家可以测试下面的enclave样例</p><h3 id="测试enclave样例"><a href="#测试enclave样例" class="headerlink" title="测试enclave样例"></a>测试enclave样例</h3><p>我们运行enclave代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt/intel/sgxsdk/SampleCode/SampleEnclave<br></code></pre></td></tr></table></figure><p> 编译代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo make<br></code></pre></td></tr></table></figure><p>执行代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./app<br></code></pre></td></tr></table></figure><p>看到如下输出证明安装成功</p><img src="/2022/10/04/intel-sgx%E9%85%8D%E7%BD%AE/%E8%BF%90%E8%A1%8C%E6%88%90%E5%8A%9F.png" class="" title=".&#x2F;app运行结果">]]></content>
      
      
      <categories>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sgx </tag>
            
            <tag> linux操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库笔记</title>
      <link href="/2022/10/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数据库的安装和使用"><a href="#数据库的安装和使用" class="headerlink" title="数据库的安装和使用"></a>数据库的安装和使用</h2><h3 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/37152572">知乎教程</a></li></ul><h3 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h3><ul><li><a href="https://www.bilibili.com/video/BV1Kr4y1i7ru?p=4&amp;spm_id_from=pageDriver">mysql软件的使用</a></li></ul><h2 id="数据库基本语法"><a href="#数据库基本语法" class="headerlink" title="数据库基本语法"></a>数据库基本语法</h2><h3 id="数据库层次结构"><a href="#数据库层次结构" class="headerlink" title="数据库层次结构"></a>数据库层次结构</h3><img src="/2022/10/03/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AC%94%E8%AE%B0/1.png" class="" title="数据库层次结构"><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p<br></code></pre></td></tr></table></figure><h3 id="数据库的创建"><a href="#数据库的创建" class="headerlink" title="数据库的创建"></a>数据库的创建</h3><p>创建基本的一个学生-课程数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">CREAT DATABASE student_course;<br>USE student_course;<br></code></pre></td></tr></table></figure><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p><strong>数值类型</strong></p><div class="table-container"><table><thead><tr><th>TINYINT</th><th>1 Bytes</th><th>(-128，127)</th><th>(0，255)</th><th>小整数值</th></tr></thead><tbody><tr><td>SMALLINT</td><td>2 Bytes</td><td>(-32 768，32 767)</td><td>(0，65 535)</td><td>大整数值</td></tr><tr><td>MEDIUMINT</td><td>3 Bytes</td><td>(-8 388 608，8 388 607)</td><td>(0，16 777 215)</td><td>大整数值</td></tr><tr><td>INT或INTEGER</td><td>4 Bytes</td><td>(-2 147 483 648，2 147 483 647)</td><td>(0，4 294 967 295)</td><td>大整数值</td></tr><tr><td>BIGINT</td><td>8 Bytes</td><td>(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td>(0，18 446 744 073 709 551 615)</td><td>极大整数值</td></tr><tr><td>FLOAT</td><td>4 Bytes</td><td>(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td>0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td>单精度 浮点数值</td></tr><tr><td>DOUBLE</td><td>8 Bytes</td><td>(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td>双精度 浮点数值</td></tr><tr><td>DECIMAL</td><td>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td>依赖于M和D的值</td><td>依赖于M和D的值</td><td>小数值</td></tr></tbody></table></div><p><strong>日期和时间类型</strong></p><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</p><p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</p><p>TIMESTAMP类型有专有的自动更新特性，将在后面描述。</p><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">大小 ( bytes)</th><th style="text-align:left">范围</th><th style="text-align:left">格式</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">DATE</td><td style="text-align:left">3</td><td style="text-align:left">1000-01-01/9999-12-31</td><td style="text-align:left">YYYY-MM-DD</td><td style="text-align:left">日期值</td></tr><tr><td style="text-align:left">TIME</td><td style="text-align:left">3</td><td style="text-align:left">‘-838:59:59’/‘838:59:59’</td><td style="text-align:left">HH:MM:SS</td><td style="text-align:left">时间值或持续时间</td></tr><tr><td style="text-align:left">YEAR</td><td style="text-align:left">1</td><td style="text-align:left">1901/2155</td><td style="text-align:left">YYYY</td><td style="text-align:left">年份值</td></tr><tr><td style="text-align:left">DATETIME</td><td style="text-align:left">8</td><td style="text-align:left">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td style="text-align:left">YYYY-MM-DD HH:MM:SS</td><td style="text-align:left">混合日期和时间值</td></tr><tr><td style="text-align:left">TIMESTAMP</td><td style="text-align:left">4</td><td style="text-align:left">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td style="text-align:left">YYYYMMDD HHMMSS</td><td style="text-align:left">混合日期和时间值，时间戳</td></tr></tbody></table></div><p><strong>字符串类型</strong></p><p>字符串类型指CHAR、VARCHAR、BINARY、VARBINARY、BLOB、TEXT、ENUM和SET。该节描述了这些类型如何工作以及如何在查询中使用这些类型。</p><div class="table-container"><table><thead><tr><th style="text-align:left">类型</th><th style="text-align:left">大小</th><th style="text-align:left">用途</th></tr></thead><tbody><tr><td style="text-align:left">CHAR</td><td style="text-align:left">0-255 bytes</td><td style="text-align:left">定长字符串</td></tr><tr><td style="text-align:left">VARCHAR</td><td style="text-align:left">0-65535 bytes</td><td style="text-align:left">变长字符串</td></tr><tr><td style="text-align:left">TINYBLOB</td><td style="text-align:left">0-255 bytes</td><td style="text-align:left">不超过 255 个字符的二进制字符串</td></tr><tr><td style="text-align:left">TINYTEXT</td><td style="text-align:left">0-255 bytes</td><td style="text-align:left">短文本字符串</td></tr><tr><td style="text-align:left">BLOB</td><td style="text-align:left">0-65 535 bytes</td><td style="text-align:left">二进制形式的长文本数据</td></tr><tr><td style="text-align:left">TEXT</td><td style="text-align:left">0-65 535 bytes</td><td style="text-align:left">长文本数据</td></tr><tr><td style="text-align:left">MEDIUMBLOB</td><td style="text-align:left">0-16 777 215 bytes</td><td style="text-align:left">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:left">MEDIUMTEXT</td><td style="text-align:left">0-16 777 215 bytes</td><td style="text-align:left">中等长度文本数据</td></tr><tr><td style="text-align:left">LONGBLOB</td><td style="text-align:left">0-4 294 967 295 bytes</td><td style="text-align:left">二进制形式的极大文本数据</td></tr><tr><td style="text-align:left">LONGTEXT</td><td style="text-align:left">0-4 294 967 295 bytes</td><td style="text-align:left">极大文本数据</td></tr></tbody></table></div><p> <strong>注意</strong>：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p><p>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</p><p>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</p><p>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</p><p>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</p><h4 id="创建一个表和删除一个表"><a href="#创建一个表和删除一个表" class="headerlink" title="创建一个表和删除一个表"></a>创建一个表和删除一个表</h4><p>创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> student<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> (Sno <span class="hljs-type">CHAR</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">PRIMARY</span> KEY,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> Sname <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">UNIQUE</span>,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> Ssex <span class="hljs-type">CHAR</span>(<span class="hljs-number">2</span>),<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> Sage <span class="hljs-type">SMALLINT</span>,<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> Sdept <span class="hljs-type">CHAR</span>(<span class="hljs-number">20</span>)<br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> );<br></code></pre></td></tr></table></figure><p>删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> student;<br></code></pre></td></tr></table></figure><p>修改表名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> student RENAME stu;<br></code></pre></td></tr></table></figure><p>修改列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> SC<br>CHANGE Crade Grade <span class="hljs-type">SMALLINT</span>;<br></code></pre></td></tr></table></figure><h4 id="表——增删改查"><a href="#表——增删改查" class="headerlink" title="表——增删改查"></a>表——增删改查</h4><h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><p>可以用两种方式编写INSERT INTO语句。</p><p>第一种方法指定列名和要插入的值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name (column1, column2, column3, ...)<br><span class="hljs-keyword">VALUES</span> (value1, value2, value3, ...); <br></code></pre></td></tr></table></figure><p>如果要为表的所有列添加值，则无需在SQL查询中指定列名。但是，请确保值的顺序与表中的列的顺序相同。INSERT INTO语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name<br><span class="hljs-keyword">VALUES</span> (value1, value2, value3, ...); <br></code></pre></td></tr></table></figure><p>代码举例(一定注意：字符型数据需要加引号)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student (Sno,Sname,Ssex,Sage,Sdept)     <span class="hljs-keyword">values</span>     (&quot;201215121&quot;,&quot;李勇&quot;,&quot;男&quot;,<span class="hljs-number">20</span>,&quot;CS&quot;);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student (Sno,Sname,Ssex,Sage,Sdept)     <span class="hljs-keyword">values</span>     (&quot;201215122&quot;,&quot;刘晨&quot;,&quot;女&quot;,<span class="hljs-number">19</span>,&quot;CS&quot;);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student (Sno,Sname,Ssex,Sage,Sdept)     <span class="hljs-keyword">values</span>     (&quot;201215123&quot;,&quot;王敏&quot;,&quot;女&quot;,<span class="hljs-number">18</span>,&quot;MA&quot;);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student (Sno,Sname,Ssex,Sage,Sdept)     <span class="hljs-keyword">values</span>     (&quot;201215125&quot;,&quot;张立&quot;,&quot;男&quot;,<span class="hljs-number">19</span>,&quot;IS&quot;);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC      <span class="hljs-keyword">values</span>     (&quot;201215121&quot;,&quot;1&quot;,<span class="hljs-number">92</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC      <span class="hljs-keyword">values</span>     (&quot;201215121&quot;,&quot;2&quot;,<span class="hljs-number">85</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC      <span class="hljs-keyword">values</span>     (&quot;201215121&quot;,&quot;3&quot;,<span class="hljs-number">88</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC      <span class="hljs-keyword">values</span>     (&quot;201215122&quot;,&quot;2&quot;,<span class="hljs-number">90</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC      <span class="hljs-keyword">values</span>     (&quot;201215122&quot;,&quot;3&quot;,<span class="hljs-number">80</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> course      <span class="hljs-keyword">values</span>     (&quot;1&quot;,&quot;数据库&quot;,&quot;5&quot;,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> course      <span class="hljs-keyword">values</span>     (&quot;2&quot;,&quot;数学&quot;,&quot;NULL&quot;,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> course      <span class="hljs-keyword">values</span>     (&quot;3&quot;,&quot;信息系统&quot;,&quot;1&quot;,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> course      <span class="hljs-keyword">values</span>     (&quot;4&quot;,&quot;操作系统&quot;,&quot;6&quot;,<span class="hljs-number">3</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> course      <span class="hljs-keyword">values</span>     (&quot;5&quot;,&quot;数据结构&quot;,&quot;7&quot;,<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><p>最后得到如下几个表：</p><div align = center>student</div><div class="table-container"><table><thead><tr><th style="text-align:center">Sno</th><th style="text-align:center">Sname</th><th style="text-align:center">Ssex</th><th style="text-align:center">Sage</th><th style="text-align:center">Sdept</th></tr></thead><tbody><tr><td style="text-align:center">201215121</td><td style="text-align:center">李勇</td><td style="text-align:center">男</td><td style="text-align:center">20</td><td style="text-align:center">CS</td></tr><tr><td style="text-align:center">201215122</td><td style="text-align:center">刘晨</td><td style="text-align:center">女</td><td style="text-align:center">19</td><td style="text-align:center">CS</td></tr><tr><td style="text-align:center">201215123</td><td style="text-align:center">王敏</td><td style="text-align:center">女</td><td style="text-align:center">18</td><td style="text-align:center">MA</td></tr><tr><td style="text-align:center">201215125</td><td style="text-align:center">张立</td><td style="text-align:center">男</td><td style="text-align:center">19</td><td style="text-align:center">IS</td></tr></tbody></table></div><div align = center>course</div><div class="table-container"><table><thead><tr><th style="text-align:center">Cno</th><th style="text-align:center">Cname</th><th style="text-align:center">Cpno</th><th style="text-align:center">Ccredit</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">数据库</td><td style="text-align:center">5</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">数学</td><td style="text-align:center">NULL</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">信息系统</td><td style="text-align:center">1</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">操作系统</td><td style="text-align:center">6</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">数据结构</td><td style="text-align:center">7</td><td style="text-align:center">4</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">Sno</th><th style="text-align:center">Cno</th><th style="text-align:center">Grade</th></tr></thead><tbody><tr><td style="text-align:center">201215121</td><td style="text-align:center">1</td><td style="text-align:center">92</td></tr><tr><td style="text-align:center">201215121</td><td style="text-align:center">2</td><td style="text-align:center">85</td></tr><tr><td style="text-align:center">201215121</td><td style="text-align:center">3</td><td style="text-align:center">88</td></tr><tr><td style="text-align:center">201215122</td><td style="text-align:center">2</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center">201215122</td><td style="text-align:center">3</td><td style="text-align:center">80</td></tr></tbody></table></div><p>还有一种插入方式，需要学习select语句，直接把语句放到下面</p><p>对于每一个系，求学生的平均年龄，并把结果放到数据库里</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Dept_age<br>(<br>sdept <span class="hljs-type">char</span>(<span class="hljs-number">15</span>)<br>avg_age <span class="hljs-type">smallint</span><br>);<br><span class="hljs-keyword">insert</span> <br><span class="hljs-keyword">into</span> dept_age(sdept,avg_age)<br><span class="hljs-keyword">select</span> sdept , <span class="hljs-built_in">avg</span>(sage)<br><span class="hljs-keyword">from</span> student <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sdept;<br></code></pre></td></tr></table></figure><h5 id="删"><a href="#删" class="headerlink" title="删"></a>删</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> course <span class="hljs-keyword">WHERE</span> Cno <span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br></code></pre></td></tr></table></figure><p>这里的where子句可以配合一些列其他句子使用，如exists,in等等</p><h5 id="改"><a href="#改" class="headerlink" title="改"></a>改</h5><p>让我们先想想有什么需要修改？</p><p>对于列来说：</p><ul><li>增加新的一列</li></ul><p>增加入学时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student <span class="hljs-keyword">ADD</span> S_entrance <span class="hljs-type">DATE</span>;<br></code></pre></td></tr></table></figure><ul><li>修改原有列的数据类型(使用MODIFY或者CHANGE)或者增加约束条件</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student MODIFY S_entrance <span class="hljs-type">INT</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student <span class="hljs-keyword">ADD</span>  <span class="hljs-keyword">UNIQUE</span>(S_entrance);<br></code></pre></td></tr></table></figure><ul><li>删除列和<a href="[mysql 删除约束_MySQL中的约束,添加约束,删除约束,以及其他修饰_衣锦夜行的李公子的博客-CSDN博客](https://blog.csdn.net/weixin_35731579/article/details/113116120">删除约束条件</a>)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student <span class="hljs-keyword">DROP</span> INDEX S_entrance;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> Student <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> S_entrance;<br></code></pre></td></tr></table></figure><p>对于行来说：</p><ul><li>修改一行中已有的数据(使用SET语句)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> course <span class="hljs-keyword">SET</span> Cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;100&#x27;</span> <span class="hljs-keyword">where</span> Cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> course;<br></code></pre></td></tr></table></figure><p>这里的where子句可以配合一些列其他句子使用，如exists,in等等</p><h5 id="查"><a href="#查" class="headerlink" title="查"></a>查</h5><p>使用where子句和列名可以实现查找(查找是一个大块，内容很复杂，后面再介绍)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sno,Ssex <span class="hljs-keyword">from</span> student;<br><span class="hljs-keyword">SELECT</span> Sno 学号,Ssex 性别 <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>学号</th><th>性别</th></tr></thead><tbody><tr><td>201215122</td><td>女</td></tr><tr><td>201215123</td><td>女</td></tr><tr><td>201215125</td><td>男</td></tr></tbody></table></div><p>如果这样查输出奇怪的东西（sql注入可能用到）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>3</td></tr><tr><td>1</td><td>2</td><td>3</td></tr><tr><td>1</td><td>2</td><td>3</td></tr></tbody></table></div><h4 id="索引的创建"><a href="#索引的创建" class="headerlink" title="索引的创建"></a>索引的创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">use student_course;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX stusno <span class="hljs-keyword">ON</span> student(Sno);<br></code></pre></td></tr></table></figure><h3 id="数据查询-cry"><a href="#数据查询-cry" class="headerlink" title="数据查询:cry:"></a>数据查询:cry:</h3><h4 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h4><p><span id = "jump4"><strong>例1：</strong>查询全体学生的姓名、出生年份和所在院系，要求用小写字母表示系名</span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sname NAME,&quot;Year of Birth:&quot; , <span class="hljs-number">2022</span> <span class="hljs-operator">-</span> Sage BIRTHDAY ,  <span class="hljs-built_in">LOWER</span>(Sdept) <span class="hljs-keyword">FROM</span> student;<br></code></pre></td></tr></table></figure><p>可以看到这里的可以制定别名，同时想要查找的列可以用一个表达式表示 2022 - Sage</p><p><strong>例2：</strong>查询选修了课程的学生学号（去掉重复项）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Sno <span class="hljs-keyword">FROM</span> SC;<br></code></pre></td></tr></table></figure><p>使用distinct子句来保证结果唯一</p><p><strong>例3：</strong>查询计算机系的全体学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Sname <span class="hljs-keyword">FROM</span>  student<br><span class="hljs-keyword">WHERE</span> Sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CS&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这里使用了where子句，这是一个很强大的功能：</p><div align = "center">WHERE子句常用查询条件表</div><div class="table-container"><table><thead><tr><th style="text-align:center">查询条件</th><th style="text-align:center">谓词</th></tr></thead><tbody><tr><td style="text-align:center">比较</td><td style="text-align:center">= , &gt; , &lt; , &gt;= , &lt;= , != , &lt;&gt; , !&gt; , !&lt; , ; NOT + 上述比较符</td></tr><tr><td style="text-align:center">确定范围</td><td style="text-align:center">BETWEEN AND , NOT BETWEEN AND</td></tr><tr><td style="text-align:center">确定集合</td><td style="text-align:center">IN , NOT ,IN</td></tr><tr><td style="text-align:center">字符匹配</td><td style="text-align:center">LIKE , NOT LIKE</td></tr><tr><td style="text-align:center">空值</td><td style="text-align:center">IS NULL , IS NOT NULL</td></tr><tr><td style="text-align:center">多重条件（逻辑运算）</td><td style="text-align:center">AND , OR , NOT</td></tr></tbody></table></div><p><strong>例4：</strong>查询计算机系(CS)和数学(MA)系中年龄在19~20之间的学生姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sname <span class="hljs-keyword">FROM</span> student <br><span class="hljs-keyword">where</span> Sdept <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;CS&#x27;</span>,<span class="hljs-string">&#x27;MA&#x27;</span>) <span class="hljs-keyword">AND</span> Sage <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">19</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><p>这里between and也可以用=<20 AND >=19代替</p><p><strong>例5：</strong>查询名字中课程名中含有下划线的课程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> course      <span class="hljs-keyword">values</span>     (&quot;9&quot;,&quot;DB_course&quot;,&quot;7&quot;,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> course<br><span class="hljs-keyword">where</span> Cname <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%\_%&#x27;</span> ;<br></code></pre></td></tr></table></figure><p>这里使用了LIKE进行字符匹配：</p><ul><li>%（百分号）代表任意长度（可以为0）的字符串</li><li>_(下划线)代表任意单个字符</li></ul><font color = red> 注意：字符集为ASCII时，一个汉字需要两个\_；当字符集为GBK时只需要一个\_</font><p><strong>例6：</strong>查询全体学生情况，查询结果按照系号升序，同一系中的学生按照年龄降序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Sdept , Sage <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p>用DESC来进行降序</p><p><strong>例7：</strong>查询选修了课程的学生人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> Sno)<br><span class="hljs-keyword">FROM</span> SC;<br></code></pre></td></tr></table></figure><p>返回一个表只有一个值：</p><div class="table-container"><table><thead><tr><th style="text-align:center">COUNT(DISTINCT Sno)</th></tr></thead><tbody><tr><td style="text-align:center">2</td></tr></tbody></table></div><p>注意这里必须使用distinct语句，默认是all即全部行都要统计</p><p><strong>例8：</strong>查询各个课程号及相应的选课人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Cno , <span class="hljs-built_in">COUNT</span>(Sno)<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Cno;<br></code></pre></td></tr></table></figure><p>GROUP把课程号相同的学生分到一组，然后COUNT函数统计每一组的Sno结果，输出如下结果：</p><div class="table-container"><table><thead><tr><th style="text-align:center">Cno</th><th style="text-align:center">COUNT(Sno)</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">2</td></tr></tbody></table></div><p>如果GROUP不配合COUNT,AVG（这些函数对于一个表只返回一个值）使用，那么返回这样的结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> Cno;<br></code></pre></td></tr></table></figure><p>输出的结果只有不同Cno的第一个行</p><div class="table-container"><table><thead><tr><th style="text-align:center">Sno</th><th style="text-align:center">Cno</th><th style="text-align:center">Grade</th></tr></thead><tbody><tr><td style="text-align:center">201215121</td><td style="text-align:center">1</td><td style="text-align:center">92</td></tr><tr><td style="text-align:center">201215121</td><td style="text-align:center">2</td><td style="text-align:center">85</td></tr><tr><td style="text-align:center">201215121</td><td style="text-align:center">3</td><td style="text-align:center">88</td></tr></tbody></table></div><p><strong>例9：</strong>查询选修了三门及以上课程的学生学号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Sno ,<span class="hljs-built_in">count</span>(Cno) <span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> Sno<br><span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(Cno)<span class="hljs-operator">&gt;=</span><span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>注意这里不能用where子句，where子句作用于基本表或者视图；</p><p>而having短语作用于组，从中选择满足条件的组；</p><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><h5 id="等值连接与非等值连接"><a href="#等值连接与非等值连接" class="headerlink" title="等值连接与非等值连接"></a><span id = "jump1">等值连接与非等值连接</span></h5><p><strong>例1：</strong>查询每个学生及其选修课程的情况</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> student.<span class="hljs-operator">*</span> , sc.<span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span> student,sc<br><span class="hljs-keyword">where</span> student.sno <span class="hljs-operator">=</span> sc.sno;<br></code></pre></td></tr></table></figure><p>这里是一个等值连接，如果建立了索引这里的速度会更快</p><p><strong>例2：</strong>查询选修了2号课程且成绩在90分及以上的所有学生的学号和姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> student.Sno ,student.sname <br><span class="hljs-keyword">from</span> student , sc<br><span class="hljs-keyword">where</span> student.Sno <span class="hljs-operator">=</span> sc.sno <br><span class="hljs-keyword">and</span> sc.cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-keyword">and</span> sc.grade<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure><p>为什么要用student.sno而不是直接用sno，因为SELECT student.<em> , sc.</em> 返回的值是两个表的笛卡尔积，包括两个sno分别是student.sno和sc.sno，这里只需要提取student.sno</p><h5 id="自身连接"><a href="#自身连接" class="headerlink" title="自身连接"></a>自身连接</h5><p><strong>例1：</strong>查询每一门课的间接先修课(先修课的先修课)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> a.cno 课程号, b.cpno 该课程先修课的先修课<br><span class="hljs-keyword">from</span> course a,course b<br><span class="hljs-keyword">where</span> a.cpno <span class="hljs-operator">=</span> b.cno;<br></code></pre></td></tr></table></figure><h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><p><strong>例1：</strong>查询每个学生及其选修课程的情况</p><p>类比<a href="#jump1">2.5.2.1</a>中,会发现返回的结果里面没有学号为201215123的同学，因为他们被开除了没有选课，但是我们又希望显示他们的选课结果，用NULL表示，这里就需要用到外连接，而且是左外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> student <span class="hljs-keyword">left</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> sc <span class="hljs-keyword">on</span> (student.sno <span class="hljs-operator">=</span> sc.sno);<br></code></pre></td></tr></table></figure><p>这样就能显示啦！:happy:</p><ul><li>左外连接列出左边关系中的所有元组</li><li>右外连接列出右边关系中的所有元组</li></ul><h5 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h5><p><strong>例1：</strong>查询每个学生的学号，姓名，选修的课程名及名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> student.sno , student.sname , course.cname<br><span class="hljs-keyword">from</span> student , sc, course<br><span class="hljs-keyword">where</span> student.sno <span class="hljs-operator">=</span> sc.sno<br><span class="hljs-keyword">and</span> sc.cno <span class="hljs-operator">=</span> course.cno;<br></code></pre></td></tr></table></figure><p>这样还是显示不了没选课的人，需要用到外连接才能实现，我们暂时先不讨论</p><h4 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h4><p>sql语句中，一个SELECT-FROM-WHERE语句为一个<code>查询块</code>。将一个查询块嵌入到另一个查询块的where子句中或者having短语中的查询成为嵌套</p><h5 id="带有IN谓词子查询"><a href="#带有IN谓词子查询" class="headerlink" title="带有IN谓词子查询"></a>带有IN谓词子查询</h5><p><strong>例1：</strong>查询与“刘晨”在同一个系学习的学生的名字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-keyword">in</span><br>(<span class="hljs-keyword">select</span> sdept <br><span class="hljs-keyword">from</span> student <br><span class="hljs-keyword">where</span> sname <span class="hljs-operator">=</span> &quot;刘晨&quot;);<br></code></pre></td></tr></table></figure><p><strong>例2：</strong>查询选修了课程名为“信息系统”的学生学号和姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname <br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sno <span class="hljs-keyword">in</span><br>(<br><span class="hljs-keyword">select</span> sno<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> cno <span class="hljs-keyword">in</span><br>(<br><span class="hljs-keyword">select</span> cno <br><span class="hljs-keyword">from</span> course<br><span class="hljs-keyword">where</span> cname <span class="hljs-operator">=</span> &quot;信息系统&quot;<br>)<br>    );<br></code></pre></td></tr></table></figure><h5 id="带有比较运算符的子查询"><a href="#带有比较运算符的子查询" class="headerlink" title="带有比较运算符的子查询"></a>带有比较运算符的子查询</h5><p>父子查询之间用比较运算符连接</p><p><span id = "jump3"><strong>例1：</strong>找出每个学生超过他自己选修课程平均成绩的课程号 </span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> cno<br><span class="hljs-keyword">from</span> sc x<br><span class="hljs-keyword">where</span> grade <span class="hljs-operator">&gt;</span><br>(<br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(grade)<br>    <span class="hljs-keyword">from</span> sc y<br><span class="hljs-keyword">where</span> y.sno <span class="hljs-operator">=</span> x.sno<br>);<br></code></pre></td></tr></table></figure><p>可能有点难理解，我们把语句的底层实现过程拆分成下面三个步骤：</p><blockquote><p>1.从外层查询中取出sc的一个元组x，将元组x的Sno值(201215121)传给内层查询</p><p>select avg(grade)</p><p>from sc y</p><p>where y.sno = ‘201215121’;</p><p>2.执行内层查询，得到88(近似值)，用该值代替内层查询，得到外层查询</p><p>3.遍历所有元组，把重复的值去掉</p></blockquote><p>需要注意，这里的子查询为<font color = red><code >相关子查询</code></font>，和之前的例子不一样，内层查询和外层是相关的，所以在实现上内层查询不是一次返回多个值，而是返回一个值（88），这一个值只对应sc的第一行，第二行依旧按照如此进行查询。</p><h5 id="带有ANY-SOME-或者ALL谓词的子查询"><a href="#带有ANY-SOME-或者ALL谓词的子查询" class="headerlink" title="带有ANY(SOME)或者ALL谓词的子查询"></a>带有ANY(SOME)或者ALL谓词的子查询</h5><p>望文生义，如果内层查询返回一组数，那么使用any或者all来修饰，同时配合运算比较符号来查询，例如</p><p>>any 表示大于子查询结果中的某个值</p><p><strong>例1：</strong>查询非计算机科学系中比计算机系<font color = red>任意</font>一个学生年龄小的学生姓名和年龄</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname,sage<br><span class="hljs-keyword">from</span> student <br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">!=</span> &quot;CS&quot;<br><span class="hljs-keyword">and</span> sage<span class="hljs-operator">&lt;</span><span class="hljs-keyword">any</span><br>(<br><span class="hljs-keyword">select</span> sage <br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> &quot;CS&quot;<br>);<br></code></pre></td></tr></table></figure><p><strong>例2：</strong>查询非计算机科学系中比计算机系<font color = red>所有</font>一个学生年龄小的学生姓名和年龄</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname,sage<br><span class="hljs-keyword">from</span> student <br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">!=</span> &quot;CS&quot;<br><span class="hljs-keyword">and</span> sage<span class="hljs-operator">&lt;</span><span class="hljs-keyword">all</span><br>(<br><span class="hljs-keyword">select</span> sage <br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> &quot;CS&quot;<br>);<br></code></pre></td></tr></table></figure><h5 id="带有EXISTS谓词的子查询"><a href="#带有EXISTS谓词的子查询" class="headerlink" title="带有EXISTS谓词的子查询"></a>带有EXISTS谓词的子查询</h5><p>exists代表存在量词<script type="math/tex">\exists</script>。带有exists谓词的子查询不返回任何数据，只产生逻辑值true和false</p><p><strong>例1：</strong>查询选修了1号课程的学生姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span><br>(<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br>    <span class="hljs-keyword">from</span> sc<br>    <span class="hljs-keyword">where</span> sc.sno <span class="hljs-operator">=</span> student.sno<br>    <span class="hljs-keyword">and</span> sc.cno <span class="hljs-operator">=</span> &quot;1&quot;<br>);<br></code></pre></td></tr></table></figure><p>这也是一个相关子查询，第一次只传一个元组进入内层（这时学号为201215121），然后在sc表中找出学号为201215121的人选择的1号课程，返回如果有值，那么返回true，如果是空值，返回false。直至外层元组全部检索完。</p><p><a href="[MySQL中的EXISTS用法 - 知乎 (zhihu.com"><strong>EXISTS执行顺序</strong></a>](<a href="https://zhuanlan.zhihu.com/p/351922940">https://zhuanlan.zhihu.com/p/351922940</a>))</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> A <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> B <span class="hljs-keyword">WHERE</span> B.id <span class="hljs-operator">=</span> A.id); <br></code></pre></td></tr></table></figure><p>1、首先执行一次外部查询，并缓存结果集，如 SELECT * FROM A</p><p>2、遍历外部查询结果集的每一行记录R，代入子查询中作为条件进行查询，如 SELECT 1 FROM B WHERE B.id = A.id</p><p>3、如果子查询有返回结果，则EXISTS子句返回TRUE，这一行R可作为外部查询的结果行，否则不能作为结果</p><p><strong>例2</strong>：<span id = "jump2">查询选修了全部课程的学生姓名</span>&gt;</p><p>注意mysql里面没有全程量词<script type="math/tex">\forall</script>，但是可以用存在量词和非来等价替换</p><p>​                                                                      </p><script type="math/tex; mode=display">(\forall x)P\equiv \neg(\exists x (\neg P))</script><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br><span class="hljs-comment">/*遍历student的每一行，看是否这一行满足下面存在语句，如代入第一行的学生201215121*/</span><br>(<span class="hljs-comment">/*查找学生201215121所有的没有选的课程，从course表中查找*/</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br>    <span class="hljs-keyword">from</span> course<br>    <span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span> <br>    <span class="hljs-comment">/*遍历每一个课程，看这个课程是否没有被选，如代入第一行的课程“数据库”，其cno = 1*/</span><br>    (<br>        <span class="hljs-comment">/*现在学生和课程名都确定了，在sc表中看这个课程学生选择了没有*/</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br>        <span class="hljs-keyword">from</span> sc<br>        <span class="hljs-keyword">where</span> student.sno <span class="hljs-operator">=</span> sc.sno<span class="hljs-comment">/*这里的student.sno可以替换为201215121*/</span><br>        <span class="hljs-keyword">and</span> course.cno <span class="hljs-operator">=</span> sc.cno<span class="hljs-comment">/*这里的course.cno可以替换为1*/</span><br>    )<br>);<br></code></pre></td></tr></table></figure><p><strong>例3：</strong>查询至少选修了学生201215122选修的全部课程的学生号码</p><p>本查询可以用逻辑蕴涵来表达:对于学号为x的学生，对于所有的课程y，只要201215122学生选修了课程y，那么就有学生x选修了课程y</p><p>形式化如下：</p><p>用p表示谓词：学生201215122选修了课程y</p><p>用q表示谓词：学生x选修了课程y</p><p>则上述查询为 ：</p><script type="math/tex; mode=display">(\forall y)p \rightarrow q</script><p>SQL语言中没有蕴涵的逻辑运算，但是可以通过$\exists$和$\neg$来等价替换</p><script type="math/tex; mode=display">p \rightarrow q \equiv \neg p \vee q</script><p>加上前置的条件完成的转换为：</p><script type="math/tex; mode=display">(\forall y)p \rightarrow q \equiv \neg (\exists y)(\neg(\neg p \vee q)) \equiv  \neg (\exists y)(p \wedge \neg q)</script><p>表达的意思为：不存在这样的课程y，学生201215122选修了y，而学生x没有选</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> sno<br><span class="hljs-keyword">from</span> sc scx<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br><span class="hljs-comment">/*遍历sc的每一个学生，如代入第一行的学生201215121*/</span><br>(<br><span class="hljs-comment">/*学生已经确定了，看是否存在这样的课程y，学生201215122选修了y，而学生x没有选*/</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> sc scy<br><span class="hljs-keyword">where</span> scy.sno <span class="hljs-operator">=</span> &quot;201215122&quot;<br><span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br><span class="hljs-comment">/*遍历学生201215122的每一个课程，看是否还有学生x没有选的*/</span><br>(<br><span class="hljs-comment">/*学生确定了，课程确定了，看这个学生选了这个课程没有，用not exists实现，不能用!=*/</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> sc scz<br><span class="hljs-keyword">where</span> scz.sno <span class="hljs-operator">=</span> scx.sno<br><span class="hljs-keyword">and</span> scy.cno <span class="hljs-operator">=</span> scz.cno<br>)<br>);<br></code></pre></td></tr></table></figure><p>仿造<a href="#jump2"><strong>例2</strong></a>的另一种解法，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sno<br><span class="hljs-keyword">from</span> student <br><span class="hljs-keyword">where</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">exists</span><br>(<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> sc.sno <span class="hljs-operator">=</span> &quot;201215122&quot;<br><span class="hljs-keyword">and</span> sc.cno <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <br>(<br><span class="hljs-keyword">select</span> cno<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> sc.sno <span class="hljs-operator">=</span> student.sno<br>)<br>);<br></code></pre></td></tr></table></figure><h4 id="集合查询"><a href="#集合查询" class="headerlink" title="集合查询"></a>集合查询</h4><p>select语句的查询结果是元组的集合，所以多个select语句的结果可以进行结合操作。集合操作主要包括并操作union、交操作intersect和差操作except。</p><font color = red>注意：参加集合操作的各查询结果的列数必须相同；对应的数据类型也必须相同</font><p><strong>例1：</strong>查询计算机科学系的学生及年龄不大于19岁的学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CS&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sage<span class="hljs-operator">&lt;=</span><span class="hljs-number">19</span>;<br></code></pre></td></tr></table></figure><p>实际上使用union将多个查询结果合并起来，系统会自动去掉重复的元组。如果要保留，使用union all操作符。</p><p><strong>例2：</strong>查询选修了课程1或者选修了课程2的学生的姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span><br>(<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> student.sno <span class="hljs-operator">=</span> sc.sno<br><span class="hljs-keyword">and</span> sc.cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> student.sno <span class="hljs-operator">=</span> sc.sno<br><span class="hljs-keyword">and</span> sc.cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>实际上这个union等价于下面的语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sname<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span><br>(<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">where</span> student.sno <span class="hljs-operator">=</span> sc.sno<br><span class="hljs-keyword">and</span> (sc.cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">or</span> sc.cno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2&#x27;</span>)<br>);<br></code></pre></td></tr></table></figure><p><strong>例3：</strong>查询计算机科学系的学生与年龄不大于19岁的学生的交集</p><p>有些数据库语言是没有intersect交集的操作，可以使用in语句来等价替换，如下面的例子</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CS&#x27;</span><br><span class="hljs-keyword">and</span> sno <span class="hljs-keyword">in</span><br>(<br><span class="hljs-keyword">select</span> sno <br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sage <span class="hljs-operator">&lt;</span> <span class="hljs-number">19</span><br>);<br></code></pre></td></tr></table></figure><p>解释一下这个语句：一个元组即满足属性sdept = ‘cs’又满足in中的条件，年龄不大于19</p><p>如果不能理解，还可以用and语句来实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CS&#x27;</span><br><span class="hljs-keyword">and</span> sage<span class="hljs-operator">&lt;=</span><span class="hljs-number">19</span>;<br></code></pre></td></tr></table></figure><p><strong>例4：</strong>查询计算机科学系的学生与年龄不大于19岁的学生的差集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CS&#x27;</span><br><span class="hljs-keyword">and</span> sno <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span><br>(<br><span class="hljs-keyword">select</span> sno <br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sage <span class="hljs-operator">&lt;</span> <span class="hljs-number">19</span><br>);<br></code></pre></td></tr></table></figure><h4 id="基于派生词的查询"><a href="#基于派生词的查询" class="headerlink" title="基于派生词的查询"></a>基于派生词的查询</h4><p>子查询不仅可以出现在where子句中，<strong>还可以出现在from子句中</strong>，这是子查询生成的临时派生表成为主查询的查询对象。</p><p><strong>例1：</strong><a href="#jump3">找出每个学生超过他自己选修课程平均成绩的课程号</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sno , cno<br><span class="hljs-keyword">from</span> sc , <br>(<br><span class="hljs-keyword">select</span> sno , <span class="hljs-built_in">avg</span>(grade)<br><span class="hljs-keyword">from</span> sc <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno<br>) <br><span class="hljs-keyword">as</span> avg_sc(avg_sno , avg_grade)<br><span class="hljs-keyword">where</span> sc.grade<span class="hljs-operator">&gt;</span>avg_sc.avg_grade<br><span class="hljs-keyword">and</span> sc.sno <span class="hljs-operator">=</span> avg_sc.avg_sno;<br></code></pre></td></tr></table></figure><p>这种派生的方法实际上是把两个表连接了起来，如果原有的两个表的行列数分别为(m1,n1)和(m2,n2),则得到的规模为(m1*m2,n1+n2)</p><h4 id="select语句的一般格式"><a href="#select语句的一般格式" class="headerlink" title="select语句的一般格式"></a>select语句的一般格式</h4><p>select语句是mysql的核心语句，一般有如下格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> [<span class="hljs-keyword">all</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">distinct</span>] <span class="hljs-operator">&lt;</span>目标列表达式<span class="hljs-operator">&gt;</span> [别名] , ……<br><span class="hljs-keyword">from</span> <span class="hljs-operator">&lt;</span>表名或者视图名<span class="hljs-operator">&gt;</span> [别名] , […… <span class="hljs-operator">|</span> (<span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span>派生<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">as</span>] <span class="hljs-operator">&lt;</span>别名<span class="hljs-operator">&gt;</span>)<br>[<span class="hljs-keyword">where</span> <span class="hljs-operator">&lt;</span>条件表达式<span class="hljs-operator">&gt;</span>]<br>[<span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> [<span class="hljs-keyword">having</span> <span class="hljs-operator">&lt;</span>条件表达式<span class="hljs-operator">&gt;</span>]]<br>[<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-operator">&lt;&gt;</span>列名 [<span class="hljs-keyword">ASC</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DESC</span>]]<br></code></pre></td></tr></table></figure><h5 id="目标列表达式的可选格式"><a href="#目标列表达式的可选格式" class="headerlink" title="目标列表达式的可选格式"></a>目标列表达式的可选格式</h5><ul><li>*</li><li>&lt;表名&gt;.*</li><li>count([distinct | all] *)</li><li>[&lt;表名&gt;.]&lt;属性列表达式&gt;</li></ul><p>其中属性列表达式可以由属性列、作用于属性列的聚集函数和常量的任意算数运算(+，-，*，/)组成的运算公式，<a href="#jump4">见例题</a></p><h5 id="聚集函数的一般形式"><a href="#聚集函数的一般形式" class="headerlink" title="聚集函数的一般形式"></a>聚集函数的一般形式</h5><script type="math/tex; mode=display">\begin{Bmatrix} count\\ sum\\ avg\\   max\\ min\end{Bmatrix} =({\,} [{\,}distinct {\,} | {\,} all{\,}] {\,}  *)</script><h5 id="where子句的条件表达式的可选格式"><a href="#where子句的条件表达式的可选格式" class="headerlink" title="where子句的条件表达式的可选格式"></a>where子句的条件表达式的可选格式</h5><p>(1)其中 $\theta$ 为比较符号</p><script type="math/tex; mode=display"><属性列名> \theta \begin{Bmatrix}<属性列名>\\<常量>\\{\,} [{\,}distinct {\,} | {\,} all{\,}] {\,} (select语句)\end{Bmatrix}</script><p>(2)</p><script type="math/tex; mode=display"><属性列名> [NOT]{\,} between\begin{Bmatrix}<属性列名>\\<常量>\\{\,} [{\,}distinct {\,} | {\,} all{\,}] {\,} (select语句)\end{Bmatrix}{\,}and{\,}\begin{Bmatrix}<属性列名>\\<常量>\\{\,} [{\,}distinct {\,} | {\,} all{\,}] {\,} (select语句)\end{Bmatrix}</script><p>(3)</p><script type="math/tex; mode=display"><属性列名> [NOT]{\,} in\begin{Bmatrix}(<值1>[{\,},{\,}[值2]{\,}]\cdots)\\(select语句)\end{Bmatrix}</script><p>(4)</p><script type="math/tex; mode=display"><属性列名> [not] {\,}{\,} like <匹配串></script><p>(5)</p><script type="math/tex; mode=display"><属性列名> is {\,}{\,}[not] {\,}{\,} null</script><p>(6)</p><script type="math/tex; mode=display">not {\quad} exists{\quad} (select语句)</script><p>(7)</p><script type="math/tex; mode=display"><条件表达式>\begin{Bmatrix}AND\\\\OR\end{Bmatrix}{\,}and{\,}\begin{bmatrix}\begin{Bmatrix}AND\\\\OR\end{Bmatrix}& <条件表达式>\end{bmatrix}</script><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h4 id="定义视图"><a href="#定义视图" class="headerlink" title="定义视图"></a>定义视图</h4><h5 id="建立视图"><a href="#建立视图" class="headerlink" title="建立视图"></a>建立视图</h5><p>使用create view 命令建立视图，一般的格式为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span><span class="hljs-operator">&lt;</span>视图名<span class="hljs-operator">&gt;</span> [(列名)...]<br><span class="hljs-keyword">as</span> <span class="hljs-operator">&lt;</span>子查询<span class="hljs-operator">&gt;</span><br>[<span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option];<br></code></pre></td></tr></table></figure><p>with check option表示对视图进行update、insert和delete操作时要保证更新、插入或删除的行满足视图定义中的谓词条件。</p><p><strong>例1：</strong>建立信息系学生的视图，并要求进行修改和插入操作时仍需保证该视图只有信息系的学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> IS_Student<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> sno , sname , sage<br><span class="hljs-keyword">from</span> student<br><span class="hljs-keyword">where</span> sdept <span class="hljs-operator">=</span> &quot;IS&quot;<br><span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option;<br></code></pre></td></tr></table></figure><p>执行create view语句的结果<code>只是把视图的定义存入数据字典，并不执行其中的select语句</code>。只是在对视图查询的时候，才按视图的定义从基本表中将数据查出。所以，如果基本表的结构被破坏，视图可能不会正常工作。</p><p><strong>例2：</strong>建立信息系选修了一号课程的学生的视图(包括学生、姓名、成绩)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> is_s1(sno,sname,grade)<br><span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> student.sno , sname , grade<br><span class="hljs-keyword">from</span> student , sc<br><span class="hljs-keyword">where</span> student.sdept <span class="hljs-operator">=</span> &quot;IS&quot;<br><span class="hljs-keyword">and</span> student.sno <span class="hljs-operator">=</span> sc.sno<br><span class="hljs-keyword">and</span> sc.cno  <span class="hljs-operator">=</span> &quot;1&quot;<br><span class="hljs-keyword">with</span> <span class="hljs-keyword">check</span> option;<br></code></pre></td></tr></table></figure><p><strong>例3：</strong>将学生的学号以及平均成绩定义为一个视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> s_g(sno ,gavg)<br><span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> sno ,<span class="hljs-built_in">avg</span>(grade)<br><span class="hljs-keyword">from</span> sc<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sno;<br></code></pre></td></tr></table></figure><h5 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h5><p><strong>例1：</strong>删除视图is_s1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> is_s1;<br></code></pre></td></tr></table></figure><p>如果在is_s1视图的基础上建立了其他视图，那么这里是不能删除成功的，在后方插入cascade指令可以把和is_s1级联的视图同时删除</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> is_s1 cascade;<br></code></pre></td></tr></table></figure><h4 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h4><p><strong>例1：</strong>在s_g视图中查询平均成绩在90分以上的学生学号和平均成绩</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> s_g<br><span class="hljs-keyword">where</span> <span class="hljs-built_in">avg</span>(gavg)<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure><p>但是会报错，invalid use of group function，因为s_g底层是group聚集函数组成的，不能使用where语句</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2022/10/03/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/10/03/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>终于搭建好博客了，以后会在这里发布一些文章，同时分享一些自己的生活。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/03/hello-world/"/>
      <url>/2022/10/03/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>一</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>$$ p = p1*p2\ f(x) = <sup>{N-1}<em>{i=0}{a</em>{i}<em>x^{i}} \ g(x) =^{N-1}<em>{i=0}{b</em>{i}</em>x</sup>{i}} </p><p>\ \ f_1(x) = f(x) \ g_1(x) = g(x) </p><p>\ \ f_2(x) = f(x) \ g_2(x) = g(x) $$</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
